
767_SPI_ILI9341_2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009e70  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000276d0  0800a070  0800a070  0001a070  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08031740  08031740  000501f4  2**0
                  CONTENTS
  4 .ARM          00000008  08031740  08031740  00041740  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08031748  08031748  000501f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08031748  08031748  00041748  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0803174c  0803174c  0004174c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f4  20000000  08031750  00050000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003b0  200001f4  08031944  000501f4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200005a4  08031944  000505a4  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000501f4  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00050222  2**0
                  CONTENTS, READONLY
 13 .debug_info   000175d2  00000000  00000000  00050265  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003dca  00000000  00000000  00067837  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001640  00000000  00000000  0006b608  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001138  00000000  00000000  0006cc48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002bf42  00000000  00000000  0006dd80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001dafc  00000000  00000000  00099cc2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00106b21  00000000  00000000  000b77be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00006e04  00000000  00000000  001be2e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006f  00000000  00000000  001c50e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200001f4 	.word	0x200001f4
 800021c:	00000000 	.word	0x00000000
 8000220:	0800a058 	.word	0x0800a058

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200001f8 	.word	0x200001f8
 800023c:	0800a058 	.word	0x0800a058

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b970 	b.w	80005e8 <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9e08      	ldr	r6, [sp, #32]
 8000326:	460d      	mov	r5, r1
 8000328:	4604      	mov	r4, r0
 800032a:	460f      	mov	r7, r1
 800032c:	2b00      	cmp	r3, #0
 800032e:	d14a      	bne.n	80003c6 <__udivmoddi4+0xa6>
 8000330:	428a      	cmp	r2, r1
 8000332:	4694      	mov	ip, r2
 8000334:	d965      	bls.n	8000402 <__udivmoddi4+0xe2>
 8000336:	fab2 f382 	clz	r3, r2
 800033a:	b143      	cbz	r3, 800034e <__udivmoddi4+0x2e>
 800033c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000340:	f1c3 0220 	rsb	r2, r3, #32
 8000344:	409f      	lsls	r7, r3
 8000346:	fa20 f202 	lsr.w	r2, r0, r2
 800034a:	4317      	orrs	r7, r2
 800034c:	409c      	lsls	r4, r3
 800034e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000352:	fa1f f58c 	uxth.w	r5, ip
 8000356:	fbb7 f1fe 	udiv	r1, r7, lr
 800035a:	0c22      	lsrs	r2, r4, #16
 800035c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000360:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000364:	fb01 f005 	mul.w	r0, r1, r5
 8000368:	4290      	cmp	r0, r2
 800036a:	d90a      	bls.n	8000382 <__udivmoddi4+0x62>
 800036c:	eb1c 0202 	adds.w	r2, ip, r2
 8000370:	f101 37ff 	add.w	r7, r1, #4294967295
 8000374:	f080 811c 	bcs.w	80005b0 <__udivmoddi4+0x290>
 8000378:	4290      	cmp	r0, r2
 800037a:	f240 8119 	bls.w	80005b0 <__udivmoddi4+0x290>
 800037e:	3902      	subs	r1, #2
 8000380:	4462      	add	r2, ip
 8000382:	1a12      	subs	r2, r2, r0
 8000384:	b2a4      	uxth	r4, r4
 8000386:	fbb2 f0fe 	udiv	r0, r2, lr
 800038a:	fb0e 2210 	mls	r2, lr, r0, r2
 800038e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000392:	fb00 f505 	mul.w	r5, r0, r5
 8000396:	42a5      	cmp	r5, r4
 8000398:	d90a      	bls.n	80003b0 <__udivmoddi4+0x90>
 800039a:	eb1c 0404 	adds.w	r4, ip, r4
 800039e:	f100 32ff 	add.w	r2, r0, #4294967295
 80003a2:	f080 8107 	bcs.w	80005b4 <__udivmoddi4+0x294>
 80003a6:	42a5      	cmp	r5, r4
 80003a8:	f240 8104 	bls.w	80005b4 <__udivmoddi4+0x294>
 80003ac:	4464      	add	r4, ip
 80003ae:	3802      	subs	r0, #2
 80003b0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80003b4:	1b64      	subs	r4, r4, r5
 80003b6:	2100      	movs	r1, #0
 80003b8:	b11e      	cbz	r6, 80003c2 <__udivmoddi4+0xa2>
 80003ba:	40dc      	lsrs	r4, r3
 80003bc:	2300      	movs	r3, #0
 80003be:	e9c6 4300 	strd	r4, r3, [r6]
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0xbc>
 80003ca:	2e00      	cmp	r6, #0
 80003cc:	f000 80ed 	beq.w	80005aa <__udivmoddi4+0x28a>
 80003d0:	2100      	movs	r1, #0
 80003d2:	e9c6 0500 	strd	r0, r5, [r6]
 80003d6:	4608      	mov	r0, r1
 80003d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003dc:	fab3 f183 	clz	r1, r3
 80003e0:	2900      	cmp	r1, #0
 80003e2:	d149      	bne.n	8000478 <__udivmoddi4+0x158>
 80003e4:	42ab      	cmp	r3, r5
 80003e6:	d302      	bcc.n	80003ee <__udivmoddi4+0xce>
 80003e8:	4282      	cmp	r2, r0
 80003ea:	f200 80f8 	bhi.w	80005de <__udivmoddi4+0x2be>
 80003ee:	1a84      	subs	r4, r0, r2
 80003f0:	eb65 0203 	sbc.w	r2, r5, r3
 80003f4:	2001      	movs	r0, #1
 80003f6:	4617      	mov	r7, r2
 80003f8:	2e00      	cmp	r6, #0
 80003fa:	d0e2      	beq.n	80003c2 <__udivmoddi4+0xa2>
 80003fc:	e9c6 4700 	strd	r4, r7, [r6]
 8000400:	e7df      	b.n	80003c2 <__udivmoddi4+0xa2>
 8000402:	b902      	cbnz	r2, 8000406 <__udivmoddi4+0xe6>
 8000404:	deff      	udf	#255	; 0xff
 8000406:	fab2 f382 	clz	r3, r2
 800040a:	2b00      	cmp	r3, #0
 800040c:	f040 8090 	bne.w	8000530 <__udivmoddi4+0x210>
 8000410:	1a8a      	subs	r2, r1, r2
 8000412:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000416:	fa1f fe8c 	uxth.w	lr, ip
 800041a:	2101      	movs	r1, #1
 800041c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000420:	fb07 2015 	mls	r0, r7, r5, r2
 8000424:	0c22      	lsrs	r2, r4, #16
 8000426:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800042a:	fb0e f005 	mul.w	r0, lr, r5
 800042e:	4290      	cmp	r0, r2
 8000430:	d908      	bls.n	8000444 <__udivmoddi4+0x124>
 8000432:	eb1c 0202 	adds.w	r2, ip, r2
 8000436:	f105 38ff 	add.w	r8, r5, #4294967295
 800043a:	d202      	bcs.n	8000442 <__udivmoddi4+0x122>
 800043c:	4290      	cmp	r0, r2
 800043e:	f200 80cb 	bhi.w	80005d8 <__udivmoddi4+0x2b8>
 8000442:	4645      	mov	r5, r8
 8000444:	1a12      	subs	r2, r2, r0
 8000446:	b2a4      	uxth	r4, r4
 8000448:	fbb2 f0f7 	udiv	r0, r2, r7
 800044c:	fb07 2210 	mls	r2, r7, r0, r2
 8000450:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000454:	fb0e fe00 	mul.w	lr, lr, r0
 8000458:	45a6      	cmp	lr, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x14e>
 800045c:	eb1c 0404 	adds.w	r4, ip, r4
 8000460:	f100 32ff 	add.w	r2, r0, #4294967295
 8000464:	d202      	bcs.n	800046c <__udivmoddi4+0x14c>
 8000466:	45a6      	cmp	lr, r4
 8000468:	f200 80bb 	bhi.w	80005e2 <__udivmoddi4+0x2c2>
 800046c:	4610      	mov	r0, r2
 800046e:	eba4 040e 	sub.w	r4, r4, lr
 8000472:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000476:	e79f      	b.n	80003b8 <__udivmoddi4+0x98>
 8000478:	f1c1 0720 	rsb	r7, r1, #32
 800047c:	408b      	lsls	r3, r1
 800047e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000482:	ea4c 0c03 	orr.w	ip, ip, r3
 8000486:	fa05 f401 	lsl.w	r4, r5, r1
 800048a:	fa20 f307 	lsr.w	r3, r0, r7
 800048e:	40fd      	lsrs	r5, r7
 8000490:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000494:	4323      	orrs	r3, r4
 8000496:	fbb5 f8f9 	udiv	r8, r5, r9
 800049a:	fa1f fe8c 	uxth.w	lr, ip
 800049e:	fb09 5518 	mls	r5, r9, r8, r5
 80004a2:	0c1c      	lsrs	r4, r3, #16
 80004a4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80004a8:	fb08 f50e 	mul.w	r5, r8, lr
 80004ac:	42a5      	cmp	r5, r4
 80004ae:	fa02 f201 	lsl.w	r2, r2, r1
 80004b2:	fa00 f001 	lsl.w	r0, r0, r1
 80004b6:	d90b      	bls.n	80004d0 <__udivmoddi4+0x1b0>
 80004b8:	eb1c 0404 	adds.w	r4, ip, r4
 80004bc:	f108 3aff 	add.w	sl, r8, #4294967295
 80004c0:	f080 8088 	bcs.w	80005d4 <__udivmoddi4+0x2b4>
 80004c4:	42a5      	cmp	r5, r4
 80004c6:	f240 8085 	bls.w	80005d4 <__udivmoddi4+0x2b4>
 80004ca:	f1a8 0802 	sub.w	r8, r8, #2
 80004ce:	4464      	add	r4, ip
 80004d0:	1b64      	subs	r4, r4, r5
 80004d2:	b29d      	uxth	r5, r3
 80004d4:	fbb4 f3f9 	udiv	r3, r4, r9
 80004d8:	fb09 4413 	mls	r4, r9, r3, r4
 80004dc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004e0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004e4:	45a6      	cmp	lr, r4
 80004e6:	d908      	bls.n	80004fa <__udivmoddi4+0x1da>
 80004e8:	eb1c 0404 	adds.w	r4, ip, r4
 80004ec:	f103 35ff 	add.w	r5, r3, #4294967295
 80004f0:	d26c      	bcs.n	80005cc <__udivmoddi4+0x2ac>
 80004f2:	45a6      	cmp	lr, r4
 80004f4:	d96a      	bls.n	80005cc <__udivmoddi4+0x2ac>
 80004f6:	3b02      	subs	r3, #2
 80004f8:	4464      	add	r4, ip
 80004fa:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004fe:	fba3 9502 	umull	r9, r5, r3, r2
 8000502:	eba4 040e 	sub.w	r4, r4, lr
 8000506:	42ac      	cmp	r4, r5
 8000508:	46c8      	mov	r8, r9
 800050a:	46ae      	mov	lr, r5
 800050c:	d356      	bcc.n	80005bc <__udivmoddi4+0x29c>
 800050e:	d053      	beq.n	80005b8 <__udivmoddi4+0x298>
 8000510:	b156      	cbz	r6, 8000528 <__udivmoddi4+0x208>
 8000512:	ebb0 0208 	subs.w	r2, r0, r8
 8000516:	eb64 040e 	sbc.w	r4, r4, lr
 800051a:	fa04 f707 	lsl.w	r7, r4, r7
 800051e:	40ca      	lsrs	r2, r1
 8000520:	40cc      	lsrs	r4, r1
 8000522:	4317      	orrs	r7, r2
 8000524:	e9c6 7400 	strd	r7, r4, [r6]
 8000528:	4618      	mov	r0, r3
 800052a:	2100      	movs	r1, #0
 800052c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000530:	f1c3 0120 	rsb	r1, r3, #32
 8000534:	fa02 fc03 	lsl.w	ip, r2, r3
 8000538:	fa20 f201 	lsr.w	r2, r0, r1
 800053c:	fa25 f101 	lsr.w	r1, r5, r1
 8000540:	409d      	lsls	r5, r3
 8000542:	432a      	orrs	r2, r5
 8000544:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000548:	fa1f fe8c 	uxth.w	lr, ip
 800054c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000550:	fb07 1510 	mls	r5, r7, r0, r1
 8000554:	0c11      	lsrs	r1, r2, #16
 8000556:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800055a:	fb00 f50e 	mul.w	r5, r0, lr
 800055e:	428d      	cmp	r5, r1
 8000560:	fa04 f403 	lsl.w	r4, r4, r3
 8000564:	d908      	bls.n	8000578 <__udivmoddi4+0x258>
 8000566:	eb1c 0101 	adds.w	r1, ip, r1
 800056a:	f100 38ff 	add.w	r8, r0, #4294967295
 800056e:	d22f      	bcs.n	80005d0 <__udivmoddi4+0x2b0>
 8000570:	428d      	cmp	r5, r1
 8000572:	d92d      	bls.n	80005d0 <__udivmoddi4+0x2b0>
 8000574:	3802      	subs	r0, #2
 8000576:	4461      	add	r1, ip
 8000578:	1b49      	subs	r1, r1, r5
 800057a:	b292      	uxth	r2, r2
 800057c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000580:	fb07 1115 	mls	r1, r7, r5, r1
 8000584:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000588:	fb05 f10e 	mul.w	r1, r5, lr
 800058c:	4291      	cmp	r1, r2
 800058e:	d908      	bls.n	80005a2 <__udivmoddi4+0x282>
 8000590:	eb1c 0202 	adds.w	r2, ip, r2
 8000594:	f105 38ff 	add.w	r8, r5, #4294967295
 8000598:	d216      	bcs.n	80005c8 <__udivmoddi4+0x2a8>
 800059a:	4291      	cmp	r1, r2
 800059c:	d914      	bls.n	80005c8 <__udivmoddi4+0x2a8>
 800059e:	3d02      	subs	r5, #2
 80005a0:	4462      	add	r2, ip
 80005a2:	1a52      	subs	r2, r2, r1
 80005a4:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80005a8:	e738      	b.n	800041c <__udivmoddi4+0xfc>
 80005aa:	4631      	mov	r1, r6
 80005ac:	4630      	mov	r0, r6
 80005ae:	e708      	b.n	80003c2 <__udivmoddi4+0xa2>
 80005b0:	4639      	mov	r1, r7
 80005b2:	e6e6      	b.n	8000382 <__udivmoddi4+0x62>
 80005b4:	4610      	mov	r0, r2
 80005b6:	e6fb      	b.n	80003b0 <__udivmoddi4+0x90>
 80005b8:	4548      	cmp	r0, r9
 80005ba:	d2a9      	bcs.n	8000510 <__udivmoddi4+0x1f0>
 80005bc:	ebb9 0802 	subs.w	r8, r9, r2
 80005c0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80005c4:	3b01      	subs	r3, #1
 80005c6:	e7a3      	b.n	8000510 <__udivmoddi4+0x1f0>
 80005c8:	4645      	mov	r5, r8
 80005ca:	e7ea      	b.n	80005a2 <__udivmoddi4+0x282>
 80005cc:	462b      	mov	r3, r5
 80005ce:	e794      	b.n	80004fa <__udivmoddi4+0x1da>
 80005d0:	4640      	mov	r0, r8
 80005d2:	e7d1      	b.n	8000578 <__udivmoddi4+0x258>
 80005d4:	46d0      	mov	r8, sl
 80005d6:	e77b      	b.n	80004d0 <__udivmoddi4+0x1b0>
 80005d8:	3d02      	subs	r5, #2
 80005da:	4462      	add	r2, ip
 80005dc:	e732      	b.n	8000444 <__udivmoddi4+0x124>
 80005de:	4608      	mov	r0, r1
 80005e0:	e70a      	b.n	80003f8 <__udivmoddi4+0xd8>
 80005e2:	4464      	add	r4, ip
 80005e4:	3802      	subs	r0, #2
 80005e6:	e742      	b.n	800046e <__udivmoddi4+0x14e>

080005e8 <__aeabi_idiv0>:
 80005e8:	4770      	bx	lr
 80005ea:	bf00      	nop

080005ec <MX_ADC1_Init>:
/* USER CODE END 0 */

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void) {
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b084      	sub	sp, #16
 80005f0:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC1_Init 0 */

	/* USER CODE END ADC1_Init 0 */

	ADC_ChannelConfTypeDef sConfig = { 0 };
 80005f2:	463b      	mov	r3, r7
 80005f4:	2200      	movs	r2, #0
 80005f6:	601a      	str	r2, [r3, #0]
 80005f8:	605a      	str	r2, [r3, #4]
 80005fa:	609a      	str	r2, [r3, #8]
 80005fc:	60da      	str	r2, [r3, #12]
	/* USER CODE BEGIN ADC1_Init 1 */

	/* USER CODE END ADC1_Init 1 */
	/** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
	 */
	hadc1.Instance = ADC1;
 80005fe:	4b21      	ldr	r3, [pc, #132]	; (8000684 <MX_ADC1_Init+0x98>)
 8000600:	4a21      	ldr	r2, [pc, #132]	; (8000688 <MX_ADC1_Init+0x9c>)
 8000602:	601a      	str	r2, [r3, #0]
	hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000604:	4b1f      	ldr	r3, [pc, #124]	; (8000684 <MX_ADC1_Init+0x98>)
 8000606:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800060a:	605a      	str	r2, [r3, #4]
	hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800060c:	4b1d      	ldr	r3, [pc, #116]	; (8000684 <MX_ADC1_Init+0x98>)
 800060e:	2200      	movs	r2, #0
 8000610:	609a      	str	r2, [r3, #8]
	hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000612:	4b1c      	ldr	r3, [pc, #112]	; (8000684 <MX_ADC1_Init+0x98>)
 8000614:	2200      	movs	r2, #0
 8000616:	611a      	str	r2, [r3, #16]
	hadc1.Init.ContinuousConvMode = DISABLE;
 8000618:	4b1a      	ldr	r3, [pc, #104]	; (8000684 <MX_ADC1_Init+0x98>)
 800061a:	2200      	movs	r2, #0
 800061c:	619a      	str	r2, [r3, #24]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 800061e:	4b19      	ldr	r3, [pc, #100]	; (8000684 <MX_ADC1_Init+0x98>)
 8000620:	2200      	movs	r2, #0
 8000622:	f883 2020 	strb.w	r2, [r3, #32]
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000626:	4b17      	ldr	r3, [pc, #92]	; (8000684 <MX_ADC1_Init+0x98>)
 8000628:	2200      	movs	r2, #0
 800062a:	62da      	str	r2, [r3, #44]	; 0x2c
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800062c:	4b15      	ldr	r3, [pc, #84]	; (8000684 <MX_ADC1_Init+0x98>)
 800062e:	4a17      	ldr	r2, [pc, #92]	; (800068c <MX_ADC1_Init+0xa0>)
 8000630:	629a      	str	r2, [r3, #40]	; 0x28
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000632:	4b14      	ldr	r3, [pc, #80]	; (8000684 <MX_ADC1_Init+0x98>)
 8000634:	2200      	movs	r2, #0
 8000636:	60da      	str	r2, [r3, #12]
	hadc1.Init.NbrOfConversion = 1;
 8000638:	4b12      	ldr	r3, [pc, #72]	; (8000684 <MX_ADC1_Init+0x98>)
 800063a:	2201      	movs	r2, #1
 800063c:	61da      	str	r2, [r3, #28]
	hadc1.Init.DMAContinuousRequests = DISABLE;
 800063e:	4b11      	ldr	r3, [pc, #68]	; (8000684 <MX_ADC1_Init+0x98>)
 8000640:	2200      	movs	r2, #0
 8000642:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000646:	4b0f      	ldr	r3, [pc, #60]	; (8000684 <MX_ADC1_Init+0x98>)
 8000648:	2201      	movs	r2, #1
 800064a:	615a      	str	r2, [r3, #20]
	if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 800064c:	480d      	ldr	r0, [pc, #52]	; (8000684 <MX_ADC1_Init+0x98>)
 800064e:	f002 fbc5 	bl	8002ddc <HAL_ADC_Init>
 8000652:	4603      	mov	r3, r0
 8000654:	2b00      	cmp	r3, #0
 8000656:	d001      	beq.n	800065c <MX_ADC1_Init+0x70>
		Error_Handler();
 8000658:	f000 ff5c 	bl	8001514 <Error_Handler>
	}
	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_0;
 800065c:	2300      	movs	r3, #0
 800065e:	603b      	str	r3, [r7, #0]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8000660:	2301      	movs	r3, #1
 8000662:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000664:	2300      	movs	r3, #0
 8000666:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8000668:	463b      	mov	r3, r7
 800066a:	4619      	mov	r1, r3
 800066c:	4805      	ldr	r0, [pc, #20]	; (8000684 <MX_ADC1_Init+0x98>)
 800066e:	f002 fbf9 	bl	8002e64 <HAL_ADC_ConfigChannel>
 8000672:	4603      	mov	r3, r0
 8000674:	2b00      	cmp	r3, #0
 8000676:	d001      	beq.n	800067c <MX_ADC1_Init+0x90>
		Error_Handler();
 8000678:	f000 ff4c 	bl	8001514 <Error_Handler>
	}
	/* USER CODE BEGIN ADC1_Init 2 */

	/* USER CODE END ADC1_Init 2 */

}
 800067c:	bf00      	nop
 800067e:	3710      	adds	r7, #16
 8000680:	46bd      	mov	sp, r7
 8000682:	bd80      	pop	{r7, pc}
 8000684:	20000210 	.word	0x20000210
 8000688:	40012000 	.word	0x40012000
 800068c:	0f000001 	.word	0x0f000001

08000690 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef *adcHandle) {
 8000690:	b580      	push	{r7, lr}
 8000692:	b08a      	sub	sp, #40	; 0x28
 8000694:	af00      	add	r7, sp, #0
 8000696:	6078      	str	r0, [r7, #4]

	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000698:	f107 0314 	add.w	r3, r7, #20
 800069c:	2200      	movs	r2, #0
 800069e:	601a      	str	r2, [r3, #0]
 80006a0:	605a      	str	r2, [r3, #4]
 80006a2:	609a      	str	r2, [r3, #8]
 80006a4:	60da      	str	r2, [r3, #12]
 80006a6:	611a      	str	r2, [r3, #16]
	if (adcHandle->Instance == ADC1) {
 80006a8:	687b      	ldr	r3, [r7, #4]
 80006aa:	681b      	ldr	r3, [r3, #0]
 80006ac:	4a15      	ldr	r2, [pc, #84]	; (8000704 <HAL_ADC_MspInit+0x74>)
 80006ae:	4293      	cmp	r3, r2
 80006b0:	d123      	bne.n	80006fa <HAL_ADC_MspInit+0x6a>
		/* USER CODE BEGIN ADC1_MspInit 0 */

		/* USER CODE END ADC1_MspInit 0 */
		/* ADC1 clock enable */
		__HAL_RCC_ADC1_CLK_ENABLE();
 80006b2:	4b15      	ldr	r3, [pc, #84]	; (8000708 <HAL_ADC_MspInit+0x78>)
 80006b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80006b6:	4a14      	ldr	r2, [pc, #80]	; (8000708 <HAL_ADC_MspInit+0x78>)
 80006b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80006bc:	6453      	str	r3, [r2, #68]	; 0x44
 80006be:	4b12      	ldr	r3, [pc, #72]	; (8000708 <HAL_ADC_MspInit+0x78>)
 80006c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80006c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80006c6:	613b      	str	r3, [r7, #16]
 80006c8:	693b      	ldr	r3, [r7, #16]

		__HAL_RCC_GPIOA_CLK_ENABLE();
 80006ca:	4b0f      	ldr	r3, [pc, #60]	; (8000708 <HAL_ADC_MspInit+0x78>)
 80006cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ce:	4a0e      	ldr	r2, [pc, #56]	; (8000708 <HAL_ADC_MspInit+0x78>)
 80006d0:	f043 0301 	orr.w	r3, r3, #1
 80006d4:	6313      	str	r3, [r2, #48]	; 0x30
 80006d6:	4b0c      	ldr	r3, [pc, #48]	; (8000708 <HAL_ADC_MspInit+0x78>)
 80006d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006da:	f003 0301 	and.w	r3, r3, #1
 80006de:	60fb      	str	r3, [r7, #12]
 80006e0:	68fb      	ldr	r3, [r7, #12]
		/**ADC1 GPIO Configuration
		 PA0/WKUP     ------> ADC1_IN0
		 */
		GPIO_InitStruct.Pin = GPIO_PIN_0;
 80006e2:	2301      	movs	r3, #1
 80006e4:	617b      	str	r3, [r7, #20]
		GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80006e6:	2303      	movs	r3, #3
 80006e8:	61bb      	str	r3, [r7, #24]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ea:	2300      	movs	r3, #0
 80006ec:	61fb      	str	r3, [r7, #28]
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006ee:	f107 0314 	add.w	r3, r7, #20
 80006f2:	4619      	mov	r1, r3
 80006f4:	4805      	ldr	r0, [pc, #20]	; (800070c <HAL_ADC_MspInit+0x7c>)
 80006f6:	f002 ff0b 	bl	8003510 <HAL_GPIO_Init>

		/* USER CODE BEGIN ADC1_MspInit 1 */

		/* USER CODE END ADC1_MspInit 1 */
	}
}
 80006fa:	bf00      	nop
 80006fc:	3728      	adds	r7, #40	; 0x28
 80006fe:	46bd      	mov	sp, r7
 8000700:	bd80      	pop	{r7, pc}
 8000702:	bf00      	nop
 8000704:	40012000 	.word	0x40012000
 8000708:	40023800 	.word	0x40023800
 800070c:	40020000 	.word	0x40020000

08000710 <MX_GPIO_Init>:
 PC5   ------> ETH_RXD1
 PB13   ------> ETH_TXD1
 PG11   ------> ETH_TX_EN
 PG13   ------> ETH_TXD0
 */
void MX_GPIO_Init(void) {
 8000710:	b580      	push	{r7, lr}
 8000712:	b08e      	sub	sp, #56	; 0x38
 8000714:	af00      	add	r7, sp, #0

	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000716:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800071a:	2200      	movs	r2, #0
 800071c:	601a      	str	r2, [r3, #0]
 800071e:	605a      	str	r2, [r3, #4]
 8000720:	609a      	str	r2, [r3, #8]
 8000722:	60da      	str	r2, [r3, #12]
 8000724:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOE_CLK_ENABLE();
 8000726:	4b8d      	ldr	r3, [pc, #564]	; (800095c <MX_GPIO_Init+0x24c>)
 8000728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800072a:	4a8c      	ldr	r2, [pc, #560]	; (800095c <MX_GPIO_Init+0x24c>)
 800072c:	f043 0310 	orr.w	r3, r3, #16
 8000730:	6313      	str	r3, [r2, #48]	; 0x30
 8000732:	4b8a      	ldr	r3, [pc, #552]	; (800095c <MX_GPIO_Init+0x24c>)
 8000734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000736:	f003 0310 	and.w	r3, r3, #16
 800073a:	623b      	str	r3, [r7, #32]
 800073c:	6a3b      	ldr	r3, [r7, #32]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 800073e:	4b87      	ldr	r3, [pc, #540]	; (800095c <MX_GPIO_Init+0x24c>)
 8000740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000742:	4a86      	ldr	r2, [pc, #536]	; (800095c <MX_GPIO_Init+0x24c>)
 8000744:	f043 0304 	orr.w	r3, r3, #4
 8000748:	6313      	str	r3, [r2, #48]	; 0x30
 800074a:	4b84      	ldr	r3, [pc, #528]	; (800095c <MX_GPIO_Init+0x24c>)
 800074c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800074e:	f003 0304 	and.w	r3, r3, #4
 8000752:	61fb      	str	r3, [r7, #28]
 8000754:	69fb      	ldr	r3, [r7, #28]
	__HAL_RCC_GPIOF_CLK_ENABLE();
 8000756:	4b81      	ldr	r3, [pc, #516]	; (800095c <MX_GPIO_Init+0x24c>)
 8000758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800075a:	4a80      	ldr	r2, [pc, #512]	; (800095c <MX_GPIO_Init+0x24c>)
 800075c:	f043 0320 	orr.w	r3, r3, #32
 8000760:	6313      	str	r3, [r2, #48]	; 0x30
 8000762:	4b7e      	ldr	r3, [pc, #504]	; (800095c <MX_GPIO_Init+0x24c>)
 8000764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000766:	f003 0320 	and.w	r3, r3, #32
 800076a:	61bb      	str	r3, [r7, #24]
 800076c:	69bb      	ldr	r3, [r7, #24]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 800076e:	4b7b      	ldr	r3, [pc, #492]	; (800095c <MX_GPIO_Init+0x24c>)
 8000770:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000772:	4a7a      	ldr	r2, [pc, #488]	; (800095c <MX_GPIO_Init+0x24c>)
 8000774:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000778:	6313      	str	r3, [r2, #48]	; 0x30
 800077a:	4b78      	ldr	r3, [pc, #480]	; (800095c <MX_GPIO_Init+0x24c>)
 800077c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800077e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000782:	617b      	str	r3, [r7, #20]
 8000784:	697b      	ldr	r3, [r7, #20]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000786:	4b75      	ldr	r3, [pc, #468]	; (800095c <MX_GPIO_Init+0x24c>)
 8000788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800078a:	4a74      	ldr	r2, [pc, #464]	; (800095c <MX_GPIO_Init+0x24c>)
 800078c:	f043 0301 	orr.w	r3, r3, #1
 8000790:	6313      	str	r3, [r2, #48]	; 0x30
 8000792:	4b72      	ldr	r3, [pc, #456]	; (800095c <MX_GPIO_Init+0x24c>)
 8000794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000796:	f003 0301 	and.w	r3, r3, #1
 800079a:	613b      	str	r3, [r7, #16]
 800079c:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800079e:	4b6f      	ldr	r3, [pc, #444]	; (800095c <MX_GPIO_Init+0x24c>)
 80007a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007a2:	4a6e      	ldr	r2, [pc, #440]	; (800095c <MX_GPIO_Init+0x24c>)
 80007a4:	f043 0302 	orr.w	r3, r3, #2
 80007a8:	6313      	str	r3, [r2, #48]	; 0x30
 80007aa:	4b6c      	ldr	r3, [pc, #432]	; (800095c <MX_GPIO_Init+0x24c>)
 80007ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ae:	f003 0302 	and.w	r3, r3, #2
 80007b2:	60fb      	str	r3, [r7, #12]
 80007b4:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 80007b6:	4b69      	ldr	r3, [pc, #420]	; (800095c <MX_GPIO_Init+0x24c>)
 80007b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ba:	4a68      	ldr	r2, [pc, #416]	; (800095c <MX_GPIO_Init+0x24c>)
 80007bc:	f043 0308 	orr.w	r3, r3, #8
 80007c0:	6313      	str	r3, [r2, #48]	; 0x30
 80007c2:	4b66      	ldr	r3, [pc, #408]	; (800095c <MX_GPIO_Init+0x24c>)
 80007c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007c6:	f003 0308 	and.w	r3, r3, #8
 80007ca:	60bb      	str	r3, [r7, #8]
 80007cc:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOG_CLK_ENABLE();
 80007ce:	4b63      	ldr	r3, [pc, #396]	; (800095c <MX_GPIO_Init+0x24c>)
 80007d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007d2:	4a62      	ldr	r2, [pc, #392]	; (800095c <MX_GPIO_Init+0x24c>)
 80007d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80007d8:	6313      	str	r3, [r2, #48]	; 0x30
 80007da:	4b60      	ldr	r3, [pc, #384]	; (800095c <MX_GPIO_Init+0x24c>)
 80007dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80007e2:	607b      	str	r3, [r7, #4]
 80007e4:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOE, T_CLK_Pin | T_MOSI_Pin | T_CS_Pin, GPIO_PIN_RESET);
 80007e6:	2200      	movs	r2, #0
 80007e8:	2168      	movs	r1, #104	; 0x68
 80007ea:	485d      	ldr	r0, [pc, #372]	; (8000960 <MX_GPIO_Init+0x250>)
 80007ec:	f003 f854 	bl	8003898 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, LD3_Pin | LD2_Pin, GPIO_PIN_RESET);
 80007f0:	2200      	movs	r2, #0
 80007f2:	f44f 4181 	mov.w	r1, #16512	; 0x4080
 80007f6:	485b      	ldr	r0, [pc, #364]	; (8000964 <MX_GPIO_Init+0x254>)
 80007f8:	f003 f84e 	bl	8003898 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin,
 80007fc:	2200      	movs	r2, #0
 80007fe:	2140      	movs	r1, #64	; 0x40
 8000800:	4859      	ldr	r0, [pc, #356]	; (8000968 <MX_GPIO_Init+0x258>)
 8000802:	f003 f849 	bl	8003898 <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC, CS_Pin | DC_Pin | RST_Pin, GPIO_PIN_RESET);
 8000806:	2200      	movs	r2, #0
 8000808:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 800080c:	4857      	ldr	r0, [pc, #348]	; (800096c <MX_GPIO_Init+0x25c>)
 800080e:	f003 f843 	bl	8003898 <HAL_GPIO_WritePin>

	/*Configure GPIO pins : PEPin PEPin */
	GPIO_InitStruct.Pin = T_IRQ_Pin | T_MISO_Pin;
 8000812:	2314      	movs	r3, #20
 8000814:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000816:	2300      	movs	r3, #0
 8000818:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800081a:	2300      	movs	r3, #0
 800081c:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800081e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000822:	4619      	mov	r1, r3
 8000824:	484e      	ldr	r0, [pc, #312]	; (8000960 <MX_GPIO_Init+0x250>)
 8000826:	f002 fe73 	bl	8003510 <HAL_GPIO_Init>

	/*Configure GPIO pins : PEPin PEPin PEPin */
	GPIO_InitStruct.Pin = T_CLK_Pin | T_MOSI_Pin | T_CS_Pin;
 800082a:	2368      	movs	r3, #104	; 0x68
 800082c:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800082e:	2301      	movs	r3, #1
 8000830:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000832:	2300      	movs	r3, #0
 8000834:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000836:	2303      	movs	r3, #3
 8000838:	633b      	str	r3, [r7, #48]	; 0x30
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800083a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800083e:	4619      	mov	r1, r3
 8000840:	4847      	ldr	r0, [pc, #284]	; (8000960 <MX_GPIO_Init+0x250>)
 8000842:	f002 fe65 	bl	8003510 <HAL_GPIO_Init>

	/*Configure GPIO pin : PtPin */
	GPIO_InitStruct.Pin = User_Blue_Button_Pin;
 8000846:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800084a:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800084c:	2300      	movs	r3, #0
 800084e:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000850:	2300      	movs	r3, #0
 8000852:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(User_Blue_Button_GPIO_Port, &GPIO_InitStruct);
 8000854:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000858:	4619      	mov	r1, r3
 800085a:	4844      	ldr	r0, [pc, #272]	; (800096c <MX_GPIO_Init+0x25c>)
 800085c:	f002 fe58 	bl	8003510 <HAL_GPIO_Init>

	/*Configure GPIO pins : PCPin PCPin PCPin */
	GPIO_InitStruct.Pin = RMII_MDC_Pin | RMII_RXD0_Pin | RMII_RXD1_Pin;
 8000860:	2332      	movs	r3, #50	; 0x32
 8000862:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000864:	2302      	movs	r3, #2
 8000866:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000868:	2300      	movs	r3, #0
 800086a:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800086c:	2303      	movs	r3, #3
 800086e:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000870:	230b      	movs	r3, #11
 8000872:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000874:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000878:	4619      	mov	r1, r3
 800087a:	483c      	ldr	r0, [pc, #240]	; (800096c <MX_GPIO_Init+0x25c>)
 800087c:	f002 fe48 	bl	8003510 <HAL_GPIO_Init>

	/*Configure GPIO pins : PAPin PAPin PAPin */
	GPIO_InitStruct.Pin = RMII_REF_CLK_Pin | RMII_MDIO_Pin | RMII_CRS_DV_Pin;
 8000880:	2386      	movs	r3, #134	; 0x86
 8000882:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000884:	2302      	movs	r3, #2
 8000886:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000888:	2300      	movs	r3, #0
 800088a:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800088c:	2303      	movs	r3, #3
 800088e:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000890:	230b      	movs	r3, #11
 8000892:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000894:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000898:	4619      	mov	r1, r3
 800089a:	4835      	ldr	r0, [pc, #212]	; (8000970 <MX_GPIO_Init+0x260>)
 800089c:	f002 fe38 	bl	8003510 <HAL_GPIO_Init>

	/*Configure GPIO pin : PtPin */
	GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 80008a0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80008a4:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008a6:	2302      	movs	r3, #2
 80008a8:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008aa:	2300      	movs	r3, #0
 80008ac:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008ae:	2303      	movs	r3, #3
 80008b0:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80008b2:	230b      	movs	r3, #11
 80008b4:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80008b6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008ba:	4619      	mov	r1, r3
 80008bc:	4829      	ldr	r0, [pc, #164]	; (8000964 <MX_GPIO_Init+0x254>)
 80008be:	f002 fe27 	bl	8003510 <HAL_GPIO_Init>

	/*Configure GPIO pins : PBPin PBPin */
	GPIO_InitStruct.Pin = LD3_Pin | LD2_Pin;
 80008c2:	f44f 4381 	mov.w	r3, #16512	; 0x4080
 80008c6:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008c8:	2301      	movs	r3, #1
 80008ca:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008cc:	2300      	movs	r3, #0
 80008ce:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008d0:	2300      	movs	r3, #0
 80008d2:	633b      	str	r3, [r7, #48]	; 0x30
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008d4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008d8:	4619      	mov	r1, r3
 80008da:	4822      	ldr	r0, [pc, #136]	; (8000964 <MX_GPIO_Init+0x254>)
 80008dc:	f002 fe18 	bl	8003510 <HAL_GPIO_Init>

	/*Configure GPIO pin : PtPin */
	GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80008e0:	2340      	movs	r3, #64	; 0x40
 80008e2:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008e4:	2301      	movs	r3, #1
 80008e6:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e8:	2300      	movs	r3, #0
 80008ea:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008ec:	2300      	movs	r3, #0
 80008ee:	633b      	str	r3, [r7, #48]	; 0x30
	HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80008f0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008f4:	4619      	mov	r1, r3
 80008f6:	481c      	ldr	r0, [pc, #112]	; (8000968 <MX_GPIO_Init+0x258>)
 80008f8:	f002 fe0a 	bl	8003510 <HAL_GPIO_Init>

	/*Configure GPIO pin : PtPin */
	GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80008fc:	2380      	movs	r3, #128	; 0x80
 80008fe:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000900:	2300      	movs	r3, #0
 8000902:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000904:	2300      	movs	r3, #0
 8000906:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000908:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800090c:	4619      	mov	r1, r3
 800090e:	4816      	ldr	r0, [pc, #88]	; (8000968 <MX_GPIO_Init+0x258>)
 8000910:	f002 fdfe 	bl	8003510 <HAL_GPIO_Init>

	/*Configure GPIO pins : PCPin PCPin PCPin */
	GPIO_InitStruct.Pin = CS_Pin | DC_Pin | RST_Pin;
 8000914:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8000918:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800091a:	2301      	movs	r3, #1
 800091c:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800091e:	2300      	movs	r3, #0
 8000920:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000922:	2303      	movs	r3, #3
 8000924:	633b      	str	r3, [r7, #48]	; 0x30
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000926:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800092a:	4619      	mov	r1, r3
 800092c:	480f      	ldr	r0, [pc, #60]	; (800096c <MX_GPIO_Init+0x25c>)
 800092e:	f002 fdef 	bl	8003510 <HAL_GPIO_Init>

	/*Configure GPIO pins : PGPin PGPin */
	GPIO_InitStruct.Pin = RMII_TX_EN_Pin | RMII_TXD0_Pin;
 8000932:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000936:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000938:	2302      	movs	r3, #2
 800093a:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800093c:	2300      	movs	r3, #0
 800093e:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000940:	2303      	movs	r3, #3
 8000942:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000944:	230b      	movs	r3, #11
 8000946:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000948:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800094c:	4619      	mov	r1, r3
 800094e:	4806      	ldr	r0, [pc, #24]	; (8000968 <MX_GPIO_Init+0x258>)
 8000950:	f002 fdde 	bl	8003510 <HAL_GPIO_Init>

}
 8000954:	bf00      	nop
 8000956:	3738      	adds	r7, #56	; 0x38
 8000958:	46bd      	mov	sp, r7
 800095a:	bd80      	pop	{r7, pc}
 800095c:	40023800 	.word	0x40023800
 8000960:	40021000 	.word	0x40021000
 8000964:	40020400 	.word	0x40020400
 8000968:	40021800 	.word	0x40021800
 800096c:	40020800 	.word	0x40020800
 8000970:	40020000 	.word	0x40020000

08000974 <MX_I2C1_Init>:
/* USER CODE END 0 */

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void) {
 8000974:	b580      	push	{r7, lr}
 8000976:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 8000978:	4b1b      	ldr	r3, [pc, #108]	; (80009e8 <MX_I2C1_Init+0x74>)
 800097a:	4a1c      	ldr	r2, [pc, #112]	; (80009ec <MX_I2C1_Init+0x78>)
 800097c:	601a      	str	r2, [r3, #0]
	hi2c1.Init.Timing = 0x00C0EAFF;
 800097e:	4b1a      	ldr	r3, [pc, #104]	; (80009e8 <MX_I2C1_Init+0x74>)
 8000980:	4a1b      	ldr	r2, [pc, #108]	; (80009f0 <MX_I2C1_Init+0x7c>)
 8000982:	605a      	str	r2, [r3, #4]
	hi2c1.Init.OwnAddress1 = 0;
 8000984:	4b18      	ldr	r3, [pc, #96]	; (80009e8 <MX_I2C1_Init+0x74>)
 8000986:	2200      	movs	r2, #0
 8000988:	609a      	str	r2, [r3, #8]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800098a:	4b17      	ldr	r3, [pc, #92]	; (80009e8 <MX_I2C1_Init+0x74>)
 800098c:	2201      	movs	r2, #1
 800098e:	60da      	str	r2, [r3, #12]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000990:	4b15      	ldr	r3, [pc, #84]	; (80009e8 <MX_I2C1_Init+0x74>)
 8000992:	2200      	movs	r2, #0
 8000994:	611a      	str	r2, [r3, #16]
	hi2c1.Init.OwnAddress2 = 0;
 8000996:	4b14      	ldr	r3, [pc, #80]	; (80009e8 <MX_I2C1_Init+0x74>)
 8000998:	2200      	movs	r2, #0
 800099a:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800099c:	4b12      	ldr	r3, [pc, #72]	; (80009e8 <MX_I2C1_Init+0x74>)
 800099e:	2200      	movs	r2, #0
 80009a0:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80009a2:	4b11      	ldr	r3, [pc, #68]	; (80009e8 <MX_I2C1_Init+0x74>)
 80009a4:	2200      	movs	r2, #0
 80009a6:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80009a8:	4b0f      	ldr	r3, [pc, #60]	; (80009e8 <MX_I2C1_Init+0x74>)
 80009aa:	2200      	movs	r2, #0
 80009ac:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 80009ae:	480e      	ldr	r0, [pc, #56]	; (80009e8 <MX_I2C1_Init+0x74>)
 80009b0:	f002 ff8c 	bl	80038cc <HAL_I2C_Init>
 80009b4:	4603      	mov	r3, r0
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	d001      	beq.n	80009be <MX_I2C1_Init+0x4a>
		Error_Handler();
 80009ba:	f000 fdab 	bl	8001514 <Error_Handler>
	}
	/** Configure Analogue filter
	 */
	if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE)
 80009be:	2100      	movs	r1, #0
 80009c0:	4809      	ldr	r0, [pc, #36]	; (80009e8 <MX_I2C1_Init+0x74>)
 80009c2:	f003 fbdd 	bl	8004180 <HAL_I2CEx_ConfigAnalogFilter>
 80009c6:	4603      	mov	r3, r0
 80009c8:	2b00      	cmp	r3, #0
 80009ca:	d001      	beq.n	80009d0 <MX_I2C1_Init+0x5c>
			!= HAL_OK) {
		Error_Handler();
 80009cc:	f000 fda2 	bl	8001514 <Error_Handler>
	}
	/** Configure Digital filter
	 */
	if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK) {
 80009d0:	2100      	movs	r1, #0
 80009d2:	4805      	ldr	r0, [pc, #20]	; (80009e8 <MX_I2C1_Init+0x74>)
 80009d4:	f003 fc1f 	bl	8004216 <HAL_I2CEx_ConfigDigitalFilter>
 80009d8:	4603      	mov	r3, r0
 80009da:	2b00      	cmp	r3, #0
 80009dc:	d001      	beq.n	80009e2 <MX_I2C1_Init+0x6e>
		Error_Handler();
 80009de:	f000 fd99 	bl	8001514 <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 80009e2:	bf00      	nop
 80009e4:	bd80      	pop	{r7, pc}
 80009e6:	bf00      	nop
 80009e8:	20000258 	.word	0x20000258
 80009ec:	40005400 	.word	0x40005400
 80009f0:	00c0eaff 	.word	0x00c0eaff

080009f4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef *i2cHandle) {
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b08a      	sub	sp, #40	; 0x28
 80009f8:	af00      	add	r7, sp, #0
 80009fa:	6078      	str	r0, [r7, #4]

	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 80009fc:	f107 0314 	add.w	r3, r7, #20
 8000a00:	2200      	movs	r2, #0
 8000a02:	601a      	str	r2, [r3, #0]
 8000a04:	605a      	str	r2, [r3, #4]
 8000a06:	609a      	str	r2, [r3, #8]
 8000a08:	60da      	str	r2, [r3, #12]
 8000a0a:	611a      	str	r2, [r3, #16]
	if (i2cHandle->Instance == I2C1) {
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	681b      	ldr	r3, [r3, #0]
 8000a10:	4a17      	ldr	r2, [pc, #92]	; (8000a70 <HAL_I2C_MspInit+0x7c>)
 8000a12:	4293      	cmp	r3, r2
 8000a14:	d128      	bne.n	8000a68 <HAL_I2C_MspInit+0x74>
		/* USER CODE BEGIN I2C1_MspInit 0 */

		/* USER CODE END I2C1_MspInit 0 */

		__HAL_RCC_GPIOB_CLK_ENABLE();
 8000a16:	4b17      	ldr	r3, [pc, #92]	; (8000a74 <HAL_I2C_MspInit+0x80>)
 8000a18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a1a:	4a16      	ldr	r2, [pc, #88]	; (8000a74 <HAL_I2C_MspInit+0x80>)
 8000a1c:	f043 0302 	orr.w	r3, r3, #2
 8000a20:	6313      	str	r3, [r2, #48]	; 0x30
 8000a22:	4b14      	ldr	r3, [pc, #80]	; (8000a74 <HAL_I2C_MspInit+0x80>)
 8000a24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a26:	f003 0302 	and.w	r3, r3, #2
 8000a2a:	613b      	str	r3, [r7, #16]
 8000a2c:	693b      	ldr	r3, [r7, #16]
		/**I2C1 GPIO Configuration
		 PB8     ------> I2C1_SCL
		 PB9     ------> I2C1_SDA
		 */
		GPIO_InitStruct.Pin = GPIO_PIN_8 | GPIO_PIN_9;
 8000a2e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000a32:	617b      	str	r3, [r7, #20]
		GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a34:	2312      	movs	r3, #18
 8000a36:	61bb      	str	r3, [r7, #24]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a38:	2300      	movs	r3, #0
 8000a3a:	61fb      	str	r3, [r7, #28]
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a3c:	2303      	movs	r3, #3
 8000a3e:	623b      	str	r3, [r7, #32]
		GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000a40:	2304      	movs	r3, #4
 8000a42:	627b      	str	r3, [r7, #36]	; 0x24
		HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a44:	f107 0314 	add.w	r3, r7, #20
 8000a48:	4619      	mov	r1, r3
 8000a4a:	480b      	ldr	r0, [pc, #44]	; (8000a78 <HAL_I2C_MspInit+0x84>)
 8000a4c:	f002 fd60 	bl	8003510 <HAL_GPIO_Init>

		/* I2C1 clock enable */
		__HAL_RCC_I2C1_CLK_ENABLE();
 8000a50:	4b08      	ldr	r3, [pc, #32]	; (8000a74 <HAL_I2C_MspInit+0x80>)
 8000a52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a54:	4a07      	ldr	r2, [pc, #28]	; (8000a74 <HAL_I2C_MspInit+0x80>)
 8000a56:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000a5a:	6413      	str	r3, [r2, #64]	; 0x40
 8000a5c:	4b05      	ldr	r3, [pc, #20]	; (8000a74 <HAL_I2C_MspInit+0x80>)
 8000a5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a60:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000a64:	60fb      	str	r3, [r7, #12]
 8000a66:	68fb      	ldr	r3, [r7, #12]
		/* USER CODE BEGIN I2C1_MspInit 1 */

		/* USER CODE END I2C1_MspInit 1 */
	}
}
 8000a68:	bf00      	nop
 8000a6a:	3728      	adds	r7, #40	; 0x28
 8000a6c:	46bd      	mov	sp, r7
 8000a6e:	bd80      	pop	{r7, pc}
 8000a70:	40005400 	.word	0x40005400
 8000a74:	40023800 	.word	0x40023800
 8000a78:	40020400 	.word	0x40020400

08000a7c <SCB_EnableICache>:
/**
  \brief   Enable I-Cache
  \details Turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
 8000a7c:	b480      	push	{r7}
 8000a7e:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000a80:	f3bf 8f4f 	dsb	sy
}
 8000a84:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000a86:	f3bf 8f6f 	isb	sy
}
 8000a8a:	bf00      	nop
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000a8c:	4b0d      	ldr	r3, [pc, #52]	; (8000ac4 <SCB_EnableICache+0x48>)
 8000a8e:	2200      	movs	r2, #0
 8000a90:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000a94:	f3bf 8f4f 	dsb	sy
}
 8000a98:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000a9a:	f3bf 8f6f 	isb	sy
}
 8000a9e:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000aa0:	4b08      	ldr	r3, [pc, #32]	; (8000ac4 <SCB_EnableICache+0x48>)
 8000aa2:	695b      	ldr	r3, [r3, #20]
 8000aa4:	4a07      	ldr	r2, [pc, #28]	; (8000ac4 <SCB_EnableICache+0x48>)
 8000aa6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000aaa:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000aac:	f3bf 8f4f 	dsb	sy
}
 8000ab0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000ab2:	f3bf 8f6f 	isb	sy
}
 8000ab6:	bf00      	nop
    __DSB();
    __ISB();
  #endif
}
 8000ab8:	bf00      	nop
 8000aba:	46bd      	mov	sp, r7
 8000abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac0:	4770      	bx	lr
 8000ac2:	bf00      	nop
 8000ac4:	e000ed00 	.word	0xe000ed00

08000ac8 <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
 8000ac8:	b480      	push	{r7}
 8000aca:	b085      	sub	sp, #20
 8000acc:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8000ace:	4b1f      	ldr	r3, [pc, #124]	; (8000b4c <SCB_EnableDCache+0x84>)
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000ad6:	f3bf 8f4f 	dsb	sy
}
 8000ada:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8000adc:	4b1b      	ldr	r3, [pc, #108]	; (8000b4c <SCB_EnableDCache+0x84>)
 8000ade:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000ae2:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	0b5b      	lsrs	r3, r3, #13
 8000ae8:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000aec:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	08db      	lsrs	r3, r3, #3
 8000af2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000af6:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000af8:	68fb      	ldr	r3, [r7, #12]
 8000afa:	015a      	lsls	r2, r3, #5
 8000afc:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8000b00:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8000b02:	68ba      	ldr	r2, [r7, #8]
 8000b04:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000b06:	4911      	ldr	r1, [pc, #68]	; (8000b4c <SCB_EnableDCache+0x84>)
 8000b08:	4313      	orrs	r3, r2
 8000b0a:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8000b0e:	68bb      	ldr	r3, [r7, #8]
 8000b10:	1e5a      	subs	r2, r3, #1
 8000b12:	60ba      	str	r2, [r7, #8]
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	d1ef      	bne.n	8000af8 <SCB_EnableDCache+0x30>
    } while(sets-- != 0U);
 8000b18:	68fb      	ldr	r3, [r7, #12]
 8000b1a:	1e5a      	subs	r2, r3, #1
 8000b1c:	60fa      	str	r2, [r7, #12]
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	d1e5      	bne.n	8000aee <SCB_EnableDCache+0x26>
  __ASM volatile ("dsb 0xF":::"memory");
 8000b22:	f3bf 8f4f 	dsb	sy
}
 8000b26:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000b28:	4b08      	ldr	r3, [pc, #32]	; (8000b4c <SCB_EnableDCache+0x84>)
 8000b2a:	695b      	ldr	r3, [r3, #20]
 8000b2c:	4a07      	ldr	r2, [pc, #28]	; (8000b4c <SCB_EnableDCache+0x84>)
 8000b2e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000b32:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000b34:	f3bf 8f4f 	dsb	sy
}
 8000b38:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000b3a:	f3bf 8f6f 	isb	sy
}
 8000b3e:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 8000b40:	bf00      	nop
 8000b42:	3714      	adds	r7, #20
 8000b44:	46bd      	mov	sp, r7
 8000b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b4a:	4770      	bx	lr
 8000b4c:	e000ed00 	.word	0xe000ed00

08000b50 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000b50:	b580      	push	{r7, lr}
 8000b52:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN 1 */

	/* USER CODE END 1 */

	/* Enable I-Cache---------------------------------------------------------*/
	SCB_EnableICache();
 8000b54:	f7ff ff92 	bl	8000a7c <SCB_EnableICache>

	/* Enable D-Cache---------------------------------------------------------*/
	SCB_EnableDCache();
 8000b58:	f7ff ffb6 	bl	8000ac8 <SCB_EnableDCache>

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000b5c:	f002 f8ae 	bl	8002cbc <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000b60:	f000 f84e 	bl	8000c00 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000b64:	f7ff fdd4 	bl	8000710 <MX_GPIO_Init>
	MX_USART3_UART_Init();
 8000b68:	f000 ff9e 	bl	8001aa8 <MX_USART3_UART_Init>
	MX_SPI5_Init();
 8000b6c:	f000 fd0a 	bl	8001584 <MX_SPI5_Init>
	MX_TIM1_Init();
 8000b70:	f000 fec0 	bl	80018f4 <MX_TIM1_Init>
	MX_RNG_Init();
 8000b74:	f000 fcd2 	bl	800151c <MX_RNG_Init>
	MX_I2C1_Init();
 8000b78:	f7ff fefc 	bl	8000974 <MX_I2C1_Init>
	MX_TIM2_Init();
 8000b7c:	f000 ff0e 	bl	800199c <MX_TIM2_Init>
	MX_ADC1_Init();
 8000b80:	f7ff fd34 	bl	80005ec <MX_ADC1_Init>
	/* USER CODE BEGIN 2 */
	ILI9341_Init(); //initial driver setup to drive ili9341
 8000b84:	f001 fc5c 	bl	8002440 <ILI9341_Init>
	cmdBuffer[0] = 0x03;
 8000b88:	4b17      	ldr	r3, [pc, #92]	; (8000be8 <main+0x98>)
 8000b8a:	2203      	movs	r2, #3
 8000b8c:	701a      	strb	r2, [r3, #0]
	cmdBuffer[1] = 0x00;
 8000b8e:	4b16      	ldr	r3, [pc, #88]	; (8000be8 <main+0x98>)
 8000b90:	2200      	movs	r2, #0
 8000b92:	705a      	strb	r2, [r3, #1]
	cmdBuffer[2] = 0x04;
 8000b94:	4b14      	ldr	r3, [pc, #80]	; (8000be8 <main+0x98>)
 8000b96:	2204      	movs	r2, #4
 8000b98:	709a      	strb	r2, [r3, #2]
	ILI9341_Fill_Screen(bgCode);
 8000b9a:	4b14      	ldr	r3, [pc, #80]	; (8000bec <main+0x9c>)
 8000b9c:	881b      	ldrh	r3, [r3, #0]
 8000b9e:	4618      	mov	r0, r3
 8000ba0:	f001 fdfa 	bl	8002798 <ILI9341_Fill_Screen>
	HAL_TIM_Base_Start_IT(&htim2);
 8000ba4:	4812      	ldr	r0, [pc, #72]	; (8000bf0 <main+0xa0>)
 8000ba6:	f005 f8db 	bl	8005d60 <HAL_TIM_Base_Start_IT>
//			bgCode = ((int) (31.0 / 100.0 * bg) << 11)
//					+ ((int) (63.0 / 100.0 * bg) << 5)
//					+ ((int) (31.0 / 100.0 * bg));
//			ILI9341_Fill_Screen(bgCode);
//		}
		if (state == 1) {
 8000baa:	4b12      	ldr	r3, [pc, #72]	; (8000bf4 <main+0xa4>)
 8000bac:	681b      	ldr	r3, [r3, #0]
 8000bae:	2b01      	cmp	r3, #1
 8000bb0:	d102      	bne.n	8000bb8 <main+0x68>
			display1();
 8000bb2:	f000 f8fd 	bl	8000db0 <display1>
 8000bb6:	e7f8      	b.n	8000baa <main+0x5a>
		} else if (state == 2) {
 8000bb8:	4b0e      	ldr	r3, [pc, #56]	; (8000bf4 <main+0xa4>)
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	2b02      	cmp	r3, #2
 8000bbe:	d1f4      	bne.n	8000baa <main+0x5a>
			display2();
 8000bc0:	f000 fc3e 	bl	8001440 <display2>
			if (count - startTime > 5000) {
 8000bc4:	4b0c      	ldr	r3, [pc, #48]	; (8000bf8 <main+0xa8>)
 8000bc6:	681a      	ldr	r2, [r3, #0]
 8000bc8:	4b0c      	ldr	r3, [pc, #48]	; (8000bfc <main+0xac>)
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	1ad3      	subs	r3, r2, r3
 8000bce:	f241 3288 	movw	r2, #5000	; 0x1388
 8000bd2:	4293      	cmp	r3, r2
 8000bd4:	d9e9      	bls.n	8000baa <main+0x5a>
				state = 1;
 8000bd6:	4b07      	ldr	r3, [pc, #28]	; (8000bf4 <main+0xa4>)
 8000bd8:	2201      	movs	r2, #1
 8000bda:	601a      	str	r2, [r3, #0]
				ILI9341_Fill_Screen(bgCode);
 8000bdc:	4b03      	ldr	r3, [pc, #12]	; (8000bec <main+0x9c>)
 8000bde:	881b      	ldrh	r3, [r3, #0]
 8000be0:	4618      	mov	r0, r3
 8000be2:	f001 fdd9 	bl	8002798 <ILI9341_Fill_Screen>
		if (state == 1) {
 8000be6:	e7e0      	b.n	8000baa <main+0x5a>
 8000be8:	200002ac 	.word	0x200002ac
 8000bec:	20000014 	.word	0x20000014
 8000bf0:	20000384 	.word	0x20000384
 8000bf4:	20000018 	.word	0x20000018
 8000bf8:	200002a4 	.word	0x200002a4
 8000bfc:	200002b8 	.word	0x200002b8

08000c00 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b0b8      	sub	sp, #224	; 0xe0
 8000c04:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000c06:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000c0a:	2234      	movs	r2, #52	; 0x34
 8000c0c:	2100      	movs	r1, #0
 8000c0e:	4618      	mov	r0, r3
 8000c10:	f006 fe95 	bl	800793e <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000c14:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8000c18:	2200      	movs	r2, #0
 8000c1a:	601a      	str	r2, [r3, #0]
 8000c1c:	605a      	str	r2, [r3, #4]
 8000c1e:	609a      	str	r2, [r3, #8]
 8000c20:	60da      	str	r2, [r3, #12]
 8000c22:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = { 0 };
 8000c24:	f107 0308 	add.w	r3, r7, #8
 8000c28:	2290      	movs	r2, #144	; 0x90
 8000c2a:	2100      	movs	r1, #0
 8000c2c:	4618      	mov	r0, r3
 8000c2e:	f006 fe86 	bl	800793e <memset>

	/** Configure LSE Drive Capability
	 */
	HAL_PWR_EnableBkUpAccess();
 8000c32:	f003 fb3d 	bl	80042b0 <HAL_PWR_EnableBkUpAccess>
	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8000c36:	4b3c      	ldr	r3, [pc, #240]	; (8000d28 <SystemClock_Config+0x128>)
 8000c38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c3a:	4a3b      	ldr	r2, [pc, #236]	; (8000d28 <SystemClock_Config+0x128>)
 8000c3c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c40:	6413      	str	r3, [r2, #64]	; 0x40
 8000c42:	4b39      	ldr	r3, [pc, #228]	; (8000d28 <SystemClock_Config+0x128>)
 8000c44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c4a:	607b      	str	r3, [r7, #4]
 8000c4c:	687b      	ldr	r3, [r7, #4]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000c4e:	4b37      	ldr	r3, [pc, #220]	; (8000d2c <SystemClock_Config+0x12c>)
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	4a36      	ldr	r2, [pc, #216]	; (8000d2c <SystemClock_Config+0x12c>)
 8000c54:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000c58:	6013      	str	r3, [r2, #0]
 8000c5a:	4b34      	ldr	r3, [pc, #208]	; (8000d2c <SystemClock_Config+0x12c>)
 8000c5c:	681b      	ldr	r3, [r3, #0]
 8000c5e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000c62:	603b      	str	r3, [r7, #0]
 8000c64:	683b      	ldr	r3, [r7, #0]
	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000c66:	2301      	movs	r3, #1
 8000c68:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
	RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000c6c:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000c70:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c74:	2302      	movs	r3, #2
 8000c76:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000c7a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000c7e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
	RCC_OscInitStruct.PLL.PLLM = 4;
 8000c82:	2304      	movs	r3, #4
 8000c84:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
	RCC_OscInitStruct.PLL.PLLN = 200;
 8000c88:	23c8      	movs	r3, #200	; 0xc8
 8000c8a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000c8e:	2302      	movs	r3, #2
 8000c90:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
	RCC_OscInitStruct.PLL.PLLQ = 9;
 8000c94:	2309      	movs	r3, #9
 8000c96:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
	RCC_OscInitStruct.PLL.PLLR = 2;
 8000c9a:	2302      	movs	r3, #2
 8000c9c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000ca0:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000ca4:	4618      	mov	r0, r3
 8000ca6:	f003 fb63 	bl	8004370 <HAL_RCC_OscConfig>
 8000caa:	4603      	mov	r3, r0
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	d001      	beq.n	8000cb4 <SystemClock_Config+0xb4>
		Error_Handler();
 8000cb0:	f000 fc30 	bl	8001514 <Error_Handler>
	}
	/** Activate the Over-Drive mode
	 */
	if (HAL_PWREx_EnableOverDrive() != HAL_OK) {
 8000cb4:	f003 fb0c 	bl	80042d0 <HAL_PWREx_EnableOverDrive>
 8000cb8:	4603      	mov	r3, r0
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d001      	beq.n	8000cc2 <SystemClock_Config+0xc2>
		Error_Handler();
 8000cbe:	f000 fc29 	bl	8001514 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000cc2:	230f      	movs	r3, #15
 8000cc4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000cc8:	2302      	movs	r3, #2
 8000cca:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000cce:	2300      	movs	r3, #0
 8000cd0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000cd4:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000cd8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000cdc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ce0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK) {
 8000ce4:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8000ce8:	2106      	movs	r1, #6
 8000cea:	4618      	mov	r0, r3
 8000cec:	f003 fdee 	bl	80048cc <HAL_RCC_ClockConfig>
 8000cf0:	4603      	mov	r3, r0
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d001      	beq.n	8000cfa <SystemClock_Config+0xfa>
		Error_Handler();
 8000cf6:	f000 fc0d 	bl	8001514 <Error_Handler>
	}
	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3
 8000cfa:	4b0d      	ldr	r3, [pc, #52]	; (8000d30 <SystemClock_Config+0x130>)
 8000cfc:	60bb      	str	r3, [r7, #8]
			| RCC_PERIPHCLK_I2C1 | RCC_PERIPHCLK_CLK48;
	PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000cfe:	2300      	movs	r3, #0
 8000d00:	657b      	str	r3, [r7, #84]	; 0x54
	PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000d02:	2300      	movs	r3, #0
 8000d04:	66fb      	str	r3, [r7, #108]	; 0x6c
	PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8000d06:	2300      	movs	r3, #0
 8000d08:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK) {
 8000d0c:	f107 0308 	add.w	r3, r7, #8
 8000d10:	4618      	mov	r0, r3
 8000d12:	f004 f801 	bl	8004d18 <HAL_RCCEx_PeriphCLKConfig>
 8000d16:	4603      	mov	r3, r0
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	d001      	beq.n	8000d20 <SystemClock_Config+0x120>
		Error_Handler();
 8000d1c:	f000 fbfa 	bl	8001514 <Error_Handler>
	}
}
 8000d20:	bf00      	nop
 8000d22:	37e0      	adds	r7, #224	; 0xe0
 8000d24:	46bd      	mov	sp, r7
 8000d26:	bd80      	pop	{r7, pc}
 8000d28:	40023800 	.word	0x40023800
 8000d2c:	40007000 	.word	0x40007000
 8000d30:	00204100 	.word	0x00204100

08000d34 <CRC16_2>:

	i = (i == 15 ? 0 : i + 1);

	return totle >> 4;
}
uint16_t CRC16_2(uint8_t *ptr, uint8_t lenght) {
 8000d34:	b480      	push	{r7}
 8000d36:	b085      	sub	sp, #20
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	6078      	str	r0, [r7, #4]
 8000d3c:	460b      	mov	r3, r1
 8000d3e:	70fb      	strb	r3, [r7, #3]
	uint16_t crc = 0xFFFF;
 8000d40:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000d44:	81fb      	strh	r3, [r7, #14]
	uint8_t s = 0x00;
 8000d46:	2300      	movs	r3, #0
 8000d48:	737b      	strb	r3, [r7, #13]

	while (lenght--) {
 8000d4a:	e023      	b.n	8000d94 <CRC16_2+0x60>
		crc ^= *ptr++;
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	1c5a      	adds	r2, r3, #1
 8000d50:	607a      	str	r2, [r7, #4]
 8000d52:	781b      	ldrb	r3, [r3, #0]
 8000d54:	b29a      	uxth	r2, r3
 8000d56:	89fb      	ldrh	r3, [r7, #14]
 8000d58:	4053      	eors	r3, r2
 8000d5a:	81fb      	strh	r3, [r7, #14]
		for (s = 0; s < 8; s++) {
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	737b      	strb	r3, [r7, #13]
 8000d60:	e015      	b.n	8000d8e <CRC16_2+0x5a>
			if ((crc & 0x01) != 0) {
 8000d62:	89fb      	ldrh	r3, [r7, #14]
 8000d64:	f003 0301 	and.w	r3, r3, #1
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	d00a      	beq.n	8000d82 <CRC16_2+0x4e>
				crc >>= 1;
 8000d6c:	89fb      	ldrh	r3, [r7, #14]
 8000d6e:	085b      	lsrs	r3, r3, #1
 8000d70:	81fb      	strh	r3, [r7, #14]
				crc ^= 0xA001;
 8000d72:	89fb      	ldrh	r3, [r7, #14]
 8000d74:	f483 43bf 	eor.w	r3, r3, #24448	; 0x5f80
 8000d78:	f083 037e 	eor.w	r3, r3, #126	; 0x7e
 8000d7c:	43db      	mvns	r3, r3
 8000d7e:	81fb      	strh	r3, [r7, #14]
 8000d80:	e002      	b.n	8000d88 <CRC16_2+0x54>
			} else {
				crc >>= 1;
 8000d82:	89fb      	ldrh	r3, [r7, #14]
 8000d84:	085b      	lsrs	r3, r3, #1
 8000d86:	81fb      	strh	r3, [r7, #14]
		for (s = 0; s < 8; s++) {
 8000d88:	7b7b      	ldrb	r3, [r7, #13]
 8000d8a:	3301      	adds	r3, #1
 8000d8c:	737b      	strb	r3, [r7, #13]
 8000d8e:	7b7b      	ldrb	r3, [r7, #13]
 8000d90:	2b07      	cmp	r3, #7
 8000d92:	d9e6      	bls.n	8000d62 <CRC16_2+0x2e>
	while (lenght--) {
 8000d94:	78fb      	ldrb	r3, [r7, #3]
 8000d96:	1e5a      	subs	r2, r3, #1
 8000d98:	70fa      	strb	r2, [r7, #3]
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d1d6      	bne.n	8000d4c <CRC16_2+0x18>
			}
		}
	}
	return crc;
 8000d9e:	89fb      	ldrh	r3, [r7, #14]
}
 8000da0:	4618      	mov	r0, r3
 8000da2:	3714      	adds	r7, #20
 8000da4:	46bd      	mov	sp, r7
 8000da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000daa:	4770      	bx	lr
 8000dac:	0000      	movs	r0, r0
	...

08000db0 <display1>:

void display1() {
 8000db0:	b580      	push	{r7, lr}
 8000db2:	ed2d 8b02 	vpush	{d8}
 8000db6:	b08c      	sub	sp, #48	; 0x30
 8000db8:	af02      	add	r7, sp, #8
	HAL_I2C_Master_Transmit(&hi2c1, 0x5c << 1, cmdBuffer, 3, 200);
 8000dba:	23c8      	movs	r3, #200	; 0xc8
 8000dbc:	9300      	str	r3, [sp, #0]
 8000dbe:	2303      	movs	r3, #3
 8000dc0:	4a28      	ldr	r2, [pc, #160]	; (8000e64 <display1+0xb4>)
 8000dc2:	21b8      	movs	r1, #184	; 0xb8
 8000dc4:	4828      	ldr	r0, [pc, #160]	; (8000e68 <display1+0xb8>)
 8000dc6:	f002 fe11 	bl	80039ec <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Transmit(&hi2c1, 0x5c << 1, cmdBuffer, 3, 200);
 8000dca:	23c8      	movs	r3, #200	; 0xc8
 8000dcc:	9300      	str	r3, [sp, #0]
 8000dce:	2303      	movs	r3, #3
 8000dd0:	4a24      	ldr	r2, [pc, #144]	; (8000e64 <display1+0xb4>)
 8000dd2:	21b8      	movs	r1, #184	; 0xb8
 8000dd4:	4824      	ldr	r0, [pc, #144]	; (8000e68 <display1+0xb8>)
 8000dd6:	f002 fe09 	bl	80039ec <HAL_I2C_Master_Transmit>
	HAL_Delay(1);
 8000dda:	2001      	movs	r0, #1
 8000ddc:	f001 ffda 	bl	8002d94 <HAL_Delay>
	HAL_I2C_Master_Receive(&hi2c1, 0x5c << 1, dataBuffer, 8, 200);
 8000de0:	23c8      	movs	r3, #200	; 0xc8
 8000de2:	9300      	str	r3, [sp, #0]
 8000de4:	2308      	movs	r3, #8
 8000de6:	4a21      	ldr	r2, [pc, #132]	; (8000e6c <display1+0xbc>)
 8000de8:	21b8      	movs	r1, #184	; 0xb8
 8000dea:	481f      	ldr	r0, [pc, #124]	; (8000e68 <display1+0xb8>)
 8000dec:	f002 fef2 	bl	8003bd4 <HAL_I2C_Master_Receive>
	uint16_t Rcrc = dataBuffer[7] << 8;
 8000df0:	4b1e      	ldr	r3, [pc, #120]	; (8000e6c <display1+0xbc>)
 8000df2:	79db      	ldrb	r3, [r3, #7]
 8000df4:	b29b      	uxth	r3, r3
 8000df6:	021b      	lsls	r3, r3, #8
 8000df8:	84fb      	strh	r3, [r7, #38]	; 0x26
	Rcrc += dataBuffer[6];
 8000dfa:	4b1c      	ldr	r3, [pc, #112]	; (8000e6c <display1+0xbc>)
 8000dfc:	799b      	ldrb	r3, [r3, #6]
 8000dfe:	b29a      	uxth	r2, r3
 8000e00:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000e02:	4413      	add	r3, r2
 8000e04:	84fb      	strh	r3, [r7, #38]	; 0x26
	if (Rcrc == CRC16_2(dataBuffer, 6)) {
 8000e06:	2106      	movs	r1, #6
 8000e08:	4818      	ldr	r0, [pc, #96]	; (8000e6c <display1+0xbc>)
 8000e0a:	f7ff ff93 	bl	8000d34 <CRC16_2>
 8000e0e:	4603      	mov	r3, r0
 8000e10:	461a      	mov	r2, r3
 8000e12:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000e14:	4293      	cmp	r3, r2
 8000e16:	d14b      	bne.n	8000eb0 <display1+0x100>
		uint16_t temp = ((dataBuffer[4] & 0x7F) << 8) + dataBuffer[5];
 8000e18:	4b14      	ldr	r3, [pc, #80]	; (8000e6c <display1+0xbc>)
 8000e1a:	791b      	ldrb	r3, [r3, #4]
 8000e1c:	021b      	lsls	r3, r3, #8
 8000e1e:	b29b      	uxth	r3, r3
 8000e20:	f403 43fe 	and.w	r3, r3, #32512	; 0x7f00
 8000e24:	b29a      	uxth	r2, r3
 8000e26:	4b11      	ldr	r3, [pc, #68]	; (8000e6c <display1+0xbc>)
 8000e28:	795b      	ldrb	r3, [r3, #5]
 8000e2a:	b29b      	uxth	r3, r3
 8000e2c:	4413      	add	r3, r2
 8000e2e:	84bb      	strh	r3, [r7, #36]	; 0x24
		t = temp / 10.0;
 8000e30:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000e32:	ee07 3a90 	vmov	s15, r3
 8000e36:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8000e3a:	eeb2 5b04 	vmov.f64	d5, #36	; 0x41200000  10.0
 8000e3e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000e42:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000e46:	4b0a      	ldr	r3, [pc, #40]	; (8000e70 <display1+0xc0>)
 8000e48:	edc3 7a00 	vstr	s15, [r3]
		t = (((dataBuffer[4] & 0x80) >> 7) == 1) ? (t * (-1)) : t;
 8000e4c:	4b07      	ldr	r3, [pc, #28]	; (8000e6c <display1+0xbc>)
 8000e4e:	791b      	ldrb	r3, [r3, #4]
 8000e50:	09db      	lsrs	r3, r3, #7
 8000e52:	b2db      	uxtb	r3, r3
 8000e54:	2b01      	cmp	r3, #1
 8000e56:	d10d      	bne.n	8000e74 <display1+0xc4>
 8000e58:	4b05      	ldr	r3, [pc, #20]	; (8000e70 <display1+0xc0>)
 8000e5a:	edd3 7a00 	vldr	s15, [r3]
 8000e5e:	eef1 7a67 	vneg.f32	s15, s15
 8000e62:	e00a      	b.n	8000e7a <display1+0xca>
 8000e64:	200002ac 	.word	0x200002ac
 8000e68:	20000258 	.word	0x20000258
 8000e6c:	200002b0 	.word	0x200002b0
 8000e70:	20000000 	.word	0x20000000
 8000e74:	4bcd      	ldr	r3, [pc, #820]	; (80011ac <display1+0x3fc>)
 8000e76:	edd3 7a00 	vldr	s15, [r3]
 8000e7a:	4bcc      	ldr	r3, [pc, #816]	; (80011ac <display1+0x3fc>)
 8000e7c:	edc3 7a00 	vstr	s15, [r3]

		uint16_t humi = (dataBuffer[2] << 8) + dataBuffer[3];
 8000e80:	4bcb      	ldr	r3, [pc, #812]	; (80011b0 <display1+0x400>)
 8000e82:	789b      	ldrb	r3, [r3, #2]
 8000e84:	b29b      	uxth	r3, r3
 8000e86:	021b      	lsls	r3, r3, #8
 8000e88:	b29a      	uxth	r2, r3
 8000e8a:	4bc9      	ldr	r3, [pc, #804]	; (80011b0 <display1+0x400>)
 8000e8c:	78db      	ldrb	r3, [r3, #3]
 8000e8e:	b29b      	uxth	r3, r3
 8000e90:	4413      	add	r3, r2
 8000e92:	847b      	strh	r3, [r7, #34]	; 0x22
		h = humi / 10.0;
 8000e94:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8000e96:	ee07 3a90 	vmov	s15, r3
 8000e9a:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8000e9e:	eeb2 5b04 	vmov.f64	d5, #36	; 0x41200000  10.0
 8000ea2:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000ea6:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000eaa:	4bc2      	ldr	r3, [pc, #776]	; (80011b4 <display1+0x404>)
 8000eac:	edc3 7a00 	vstr	s15, [r3]
	}

	ILI9341_Set_Rotation(SCREEN_HORIZONTAL_1);
 8000eb0:	2001      	movs	r0, #1
 8000eb2:	f001 fa67 	bl	8002384 <ILI9341_Set_Rotation>
	char Temp_Buffer_text[20];
	sprintf(Temp_Buffer_text, "%.1f C", t);
 8000eb6:	4bbd      	ldr	r3, [pc, #756]	; (80011ac <display1+0x3fc>)
 8000eb8:	edd3 7a00 	vldr	s15, [r3]
 8000ebc:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000ec0:	1d38      	adds	r0, r7, #4
 8000ec2:	ec53 2b17 	vmov	r2, r3, d7
 8000ec6:	49bc      	ldr	r1, [pc, #752]	; (80011b8 <display1+0x408>)
 8000ec8:	f006 fcd6 	bl	8007878 <siprintf>
	ILI9341_Draw_Text(Temp_Buffer_text, 15, 20, BLACK, 2, bgCode);
 8000ecc:	4bbb      	ldr	r3, [pc, #748]	; (80011bc <display1+0x40c>)
 8000ece:	881b      	ldrh	r3, [r3, #0]
 8000ed0:	1d38      	adds	r0, r7, #4
 8000ed2:	9301      	str	r3, [sp, #4]
 8000ed4:	2302      	movs	r3, #2
 8000ed6:	9300      	str	r3, [sp, #0]
 8000ed8:	2300      	movs	r3, #0
 8000eda:	2214      	movs	r2, #20
 8000edc:	210f      	movs	r1, #15
 8000ede:	f000 ffa3 	bl	8001e28 <ILI9341_Draw_Text>
	sprintf(Temp_Buffer_text, "%.1f %%RH", h);
 8000ee2:	4bb4      	ldr	r3, [pc, #720]	; (80011b4 <display1+0x404>)
 8000ee4:	edd3 7a00 	vldr	s15, [r3]
 8000ee8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000eec:	1d38      	adds	r0, r7, #4
 8000eee:	ec53 2b17 	vmov	r2, r3, d7
 8000ef2:	49b3      	ldr	r1, [pc, #716]	; (80011c0 <display1+0x410>)
 8000ef4:	f006 fcc0 	bl	8007878 <siprintf>
	ILI9341_Draw_Text(Temp_Buffer_text, 170, 20, BLACK, 2, bgCode);
 8000ef8:	4bb0      	ldr	r3, [pc, #704]	; (80011bc <display1+0x40c>)
 8000efa:	881b      	ldrh	r3, [r3, #0]
 8000efc:	1d38      	adds	r0, r7, #4
 8000efe:	9301      	str	r3, [sp, #4]
 8000f00:	2302      	movs	r3, #2
 8000f02:	9300      	str	r3, [sp, #0]
 8000f04:	2300      	movs	r3, #0
 8000f06:	2214      	movs	r2, #20
 8000f08:	21aa      	movs	r1, #170	; 0xaa
 8000f0a:	f000 ff8d 	bl	8001e28 <ILI9341_Draw_Text>

	ILI9341_Set_Rotation(SCREEN_HORIZONTAL_2);
 8000f0e:	2003      	movs	r0, #3
 8000f10:	f001 fa38 	bl	8002384 <ILI9341_Set_Rotation>
	uint16_t position_array[2];
	if (TP_Touchpad_Pressed()) {
 8000f14:	f001 fec2 	bl	8002c9c <TP_Touchpad_Pressed>
 8000f18:	4603      	mov	r3, r0
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	f000 8127 	beq.w	800116e <display1+0x3be>
		if (TP_Read_Coordinates(position_array) == TOUCHPAD_DATA_OK) {
 8000f20:	463b      	mov	r3, r7
 8000f22:	4618      	mov	r0, r3
 8000f24:	f001 fdf8 	bl	8002b18 <TP_Read_Coordinates>
 8000f28:	4603      	mov	r3, r0
 8000f2a:	2b01      	cmp	r3, #1
 8000f2c:	f040 811f 	bne.w	800116e <display1+0x3be>
			y_pos = position_array[0];
 8000f30:	883a      	ldrh	r2, [r7, #0]
 8000f32:	4ba4      	ldr	r3, [pc, #656]	; (80011c4 <display1+0x414>)
 8000f34:	801a      	strh	r2, [r3, #0]
			x_pos = position_array[1];
 8000f36:	887a      	ldrh	r2, [r7, #2]
 8000f38:	4ba3      	ldr	r3, [pc, #652]	; (80011c8 <display1+0x418>)
 8000f3a:	801a      	strh	r2, [r3, #0]
			//ILI9341_Fill_Screen(bgCode);
			y_pos = 240-y_pos;
 8000f3c:	4ba1      	ldr	r3, [pc, #644]	; (80011c4 <display1+0x414>)
 8000f3e:	881b      	ldrh	r3, [r3, #0]
 8000f40:	f1c3 03f0 	rsb	r3, r3, #240	; 0xf0
 8000f44:	b29a      	uxth	r2, r3
 8000f46:	4b9f      	ldr	r3, [pc, #636]	; (80011c4 <display1+0x414>)
 8000f48:	801a      	strh	r2, [r3, #0]
//			sprintf(Temp_Buffer_text, "%d %d", x_pos,y_pos);
//			ILI9341_Draw_Text(Temp_Buffer_text, 10, 65, BLACK, 2, bgCode);
			if (sqrt(pow(x_pos - 30, 2) + pow(y_pos - 85, 2)) <= 22.0) {
 8000f4a:	4b9f      	ldr	r3, [pc, #636]	; (80011c8 <display1+0x418>)
 8000f4c:	881b      	ldrh	r3, [r3, #0]
 8000f4e:	3b1e      	subs	r3, #30
 8000f50:	ee07 3a90 	vmov	s15, r3
 8000f54:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000f58:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8000f5c:	eeb0 0b47 	vmov.f64	d0, d7
 8000f60:	f008 fdb6 	bl	8009ad0 <pow>
 8000f64:	eeb0 8b40 	vmov.f64	d8, d0
 8000f68:	4b96      	ldr	r3, [pc, #600]	; (80011c4 <display1+0x414>)
 8000f6a:	881b      	ldrh	r3, [r3, #0]
 8000f6c:	3b55      	subs	r3, #85	; 0x55
 8000f6e:	ee07 3a90 	vmov	s15, r3
 8000f72:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000f76:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8000f7a:	eeb0 0b47 	vmov.f64	d0, d7
 8000f7e:	f008 fda7 	bl	8009ad0 <pow>
 8000f82:	eeb0 7b40 	vmov.f64	d7, d0
 8000f86:	ee38 7b07 	vadd.f64	d7, d8, d7
 8000f8a:	eeb0 0b47 	vmov.f64	d0, d7
 8000f8e:	f008 fd4b 	bl	8009a28 <sqrt>
 8000f92:	eeb0 7b40 	vmov.f64	d7, d0
 8000f96:	eeb3 6b06 	vmov.f64	d6, #54	; 0x41b00000  22.0
 8000f9a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8000f9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000fa2:	d81c      	bhi.n	8000fde <display1+0x22e>
				R += 10.0;
 8000fa4:	4b89      	ldr	r3, [pc, #548]	; (80011cc <display1+0x41c>)
 8000fa6:	edd3 7a00 	vldr	s15, [r3]
 8000faa:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8000fae:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000fb2:	4b86      	ldr	r3, [pc, #536]	; (80011cc <display1+0x41c>)
 8000fb4:	edc3 7a00 	vstr	s15, [r3]
				if (R > 100) {
 8000fb8:	4b84      	ldr	r3, [pc, #528]	; (80011cc <display1+0x41c>)
 8000fba:	edd3 7a00 	vldr	s15, [r3]
 8000fbe:	ed9f 7a84 	vldr	s14, [pc, #528]	; 80011d0 <display1+0x420>
 8000fc2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000fc6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000fca:	dd08      	ble.n	8000fde <display1+0x22e>
					R = 0;
 8000fcc:	4b7f      	ldr	r3, [pc, #508]	; (80011cc <display1+0x41c>)
 8000fce:	f04f 0200 	mov.w	r2, #0
 8000fd2:	601a      	str	r2, [r3, #0]
					ILI9341_Fill_Screen(bgCode);
 8000fd4:	4b79      	ldr	r3, [pc, #484]	; (80011bc <display1+0x40c>)
 8000fd6:	881b      	ldrh	r3, [r3, #0]
 8000fd8:	4618      	mov	r0, r3
 8000fda:	f001 fbdd 	bl	8002798 <ILI9341_Fill_Screen>
				}
			}
			if (sqrt(pow(x_pos - 30, 2) + pow(y_pos - 145, 2)) <= 22.0) {
 8000fde:	4b7a      	ldr	r3, [pc, #488]	; (80011c8 <display1+0x418>)
 8000fe0:	881b      	ldrh	r3, [r3, #0]
 8000fe2:	3b1e      	subs	r3, #30
 8000fe4:	ee07 3a90 	vmov	s15, r3
 8000fe8:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000fec:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8000ff0:	eeb0 0b47 	vmov.f64	d0, d7
 8000ff4:	f008 fd6c 	bl	8009ad0 <pow>
 8000ff8:	eeb0 8b40 	vmov.f64	d8, d0
 8000ffc:	4b71      	ldr	r3, [pc, #452]	; (80011c4 <display1+0x414>)
 8000ffe:	881b      	ldrh	r3, [r3, #0]
 8001000:	3b91      	subs	r3, #145	; 0x91
 8001002:	ee07 3a90 	vmov	s15, r3
 8001006:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800100a:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 800100e:	eeb0 0b47 	vmov.f64	d0, d7
 8001012:	f008 fd5d 	bl	8009ad0 <pow>
 8001016:	eeb0 7b40 	vmov.f64	d7, d0
 800101a:	ee38 7b07 	vadd.f64	d7, d8, d7
 800101e:	eeb0 0b47 	vmov.f64	d0, d7
 8001022:	f008 fd01 	bl	8009a28 <sqrt>
 8001026:	eeb0 7b40 	vmov.f64	d7, d0
 800102a:	eeb3 6b06 	vmov.f64	d6, #54	; 0x41b00000  22.0
 800102e:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8001032:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001036:	d81c      	bhi.n	8001072 <display1+0x2c2>
				G += 10.0;
 8001038:	4b66      	ldr	r3, [pc, #408]	; (80011d4 <display1+0x424>)
 800103a:	edd3 7a00 	vldr	s15, [r3]
 800103e:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001042:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001046:	4b63      	ldr	r3, [pc, #396]	; (80011d4 <display1+0x424>)
 8001048:	edc3 7a00 	vstr	s15, [r3]
				if (G > 100) {
 800104c:	4b61      	ldr	r3, [pc, #388]	; (80011d4 <display1+0x424>)
 800104e:	edd3 7a00 	vldr	s15, [r3]
 8001052:	ed9f 7a5f 	vldr	s14, [pc, #380]	; 80011d0 <display1+0x420>
 8001056:	eef4 7ac7 	vcmpe.f32	s15, s14
 800105a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800105e:	dd08      	ble.n	8001072 <display1+0x2c2>
					G = 0;
 8001060:	4b5c      	ldr	r3, [pc, #368]	; (80011d4 <display1+0x424>)
 8001062:	f04f 0200 	mov.w	r2, #0
 8001066:	601a      	str	r2, [r3, #0]
					ILI9341_Fill_Screen(bgCode);
 8001068:	4b54      	ldr	r3, [pc, #336]	; (80011bc <display1+0x40c>)
 800106a:	881b      	ldrh	r3, [r3, #0]
 800106c:	4618      	mov	r0, r3
 800106e:	f001 fb93 	bl	8002798 <ILI9341_Fill_Screen>
				}
			}
			if (sqrt(pow(x_pos - 30, 2) + pow(y_pos - 205, 2)) <= 22.0) {
 8001072:	4b55      	ldr	r3, [pc, #340]	; (80011c8 <display1+0x418>)
 8001074:	881b      	ldrh	r3, [r3, #0]
 8001076:	3b1e      	subs	r3, #30
 8001078:	ee07 3a90 	vmov	s15, r3
 800107c:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001080:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8001084:	eeb0 0b47 	vmov.f64	d0, d7
 8001088:	f008 fd22 	bl	8009ad0 <pow>
 800108c:	eeb0 8b40 	vmov.f64	d8, d0
 8001090:	4b4c      	ldr	r3, [pc, #304]	; (80011c4 <display1+0x414>)
 8001092:	881b      	ldrh	r3, [r3, #0]
 8001094:	3bcd      	subs	r3, #205	; 0xcd
 8001096:	ee07 3a90 	vmov	s15, r3
 800109a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800109e:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 80010a2:	eeb0 0b47 	vmov.f64	d0, d7
 80010a6:	f008 fd13 	bl	8009ad0 <pow>
 80010aa:	eeb0 7b40 	vmov.f64	d7, d0
 80010ae:	ee38 7b07 	vadd.f64	d7, d8, d7
 80010b2:	eeb0 0b47 	vmov.f64	d0, d7
 80010b6:	f008 fcb7 	bl	8009a28 <sqrt>
 80010ba:	eeb0 7b40 	vmov.f64	d7, d0
 80010be:	eeb3 6b06 	vmov.f64	d6, #54	; 0x41b00000  22.0
 80010c2:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80010c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010ca:	d81c      	bhi.n	8001106 <display1+0x356>
				B += 10.0;
 80010cc:	4b42      	ldr	r3, [pc, #264]	; (80011d8 <display1+0x428>)
 80010ce:	edd3 7a00 	vldr	s15, [r3]
 80010d2:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80010d6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80010da:	4b3f      	ldr	r3, [pc, #252]	; (80011d8 <display1+0x428>)
 80010dc:	edc3 7a00 	vstr	s15, [r3]
				if (B > 100) {
 80010e0:	4b3d      	ldr	r3, [pc, #244]	; (80011d8 <display1+0x428>)
 80010e2:	edd3 7a00 	vldr	s15, [r3]
 80010e6:	ed9f 7a3a 	vldr	s14, [pc, #232]	; 80011d0 <display1+0x420>
 80010ea:	eef4 7ac7 	vcmpe.f32	s15, s14
 80010ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010f2:	dd08      	ble.n	8001106 <display1+0x356>
					B = 0;
 80010f4:	4b38      	ldr	r3, [pc, #224]	; (80011d8 <display1+0x428>)
 80010f6:	f04f 0200 	mov.w	r2, #0
 80010fa:	601a      	str	r2, [r3, #0]
					ILI9341_Fill_Screen(bgCode);
 80010fc:	4b2f      	ldr	r3, [pc, #188]	; (80011bc <display1+0x40c>)
 80010fe:	881b      	ldrh	r3, [r3, #0]
 8001100:	4618      	mov	r0, r3
 8001102:	f001 fb49 	bl	8002798 <ILI9341_Fill_Screen>
				}
			}
			if (sqrt(pow(x_pos - 130, 2) + pow(y_pos - 32, 2)) <= 25.0) {
 8001106:	4b30      	ldr	r3, [pc, #192]	; (80011c8 <display1+0x418>)
 8001108:	881b      	ldrh	r3, [r3, #0]
 800110a:	3b82      	subs	r3, #130	; 0x82
 800110c:	ee07 3a90 	vmov	s15, r3
 8001110:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001114:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8001118:	eeb0 0b47 	vmov.f64	d0, d7
 800111c:	f008 fcd8 	bl	8009ad0 <pow>
 8001120:	eeb0 8b40 	vmov.f64	d8, d0
 8001124:	4b27      	ldr	r3, [pc, #156]	; (80011c4 <display1+0x414>)
 8001126:	881b      	ldrh	r3, [r3, #0]
 8001128:	3b20      	subs	r3, #32
 800112a:	ee07 3a90 	vmov	s15, r3
 800112e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001132:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8001136:	eeb0 0b47 	vmov.f64	d0, d7
 800113a:	f008 fcc9 	bl	8009ad0 <pow>
 800113e:	eeb0 7b40 	vmov.f64	d7, d0
 8001142:	ee38 7b07 	vadd.f64	d7, d8, d7
 8001146:	eeb0 0b47 	vmov.f64	d0, d7
 800114a:	f008 fc6d 	bl	8009a28 <sqrt>
 800114e:	eeb0 7b40 	vmov.f64	d7, d0
 8001152:	eeb3 6b09 	vmov.f64	d6, #57	; 0x41c80000  25.0
 8001156:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800115a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800115e:	d806      	bhi.n	800116e <display1+0x3be>
				state = 2;
 8001160:	4b1e      	ldr	r3, [pc, #120]	; (80011dc <display1+0x42c>)
 8001162:	2202      	movs	r2, #2
 8001164:	601a      	str	r2, [r3, #0]
				startTime = count;
 8001166:	4b1e      	ldr	r3, [pc, #120]	; (80011e0 <display1+0x430>)
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	4a1e      	ldr	r2, [pc, #120]	; (80011e4 <display1+0x434>)
 800116c:	6013      	str	r3, [r2, #0]
			}

		}
	}
	ILI9341_Set_Rotation(SCREEN_HORIZONTAL_1);
 800116e:	2001      	movs	r0, #1
 8001170:	f001 f908 	bl	8002384 <ILI9341_Set_Rotation>
	ILI9341_Draw_Filled_Circle(30, 85, 22, RED); //x y
 8001174:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001178:	2216      	movs	r2, #22
 800117a:	2155      	movs	r1, #85	; 0x55
 800117c:	201e      	movs	r0, #30
 800117e:	f000 fd30 	bl	8001be2 <ILI9341_Draw_Filled_Circle>
	ILI9341_Draw_Filled_Circle(30, 145, 22, GREEN);
 8001182:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8001186:	2216      	movs	r2, #22
 8001188:	2191      	movs	r1, #145	; 0x91
 800118a:	201e      	movs	r0, #30
 800118c:	f000 fd29 	bl	8001be2 <ILI9341_Draw_Filled_Circle>
	ILI9341_Draw_Filled_Circle(30, 205, 22, BLUE);
 8001190:	231f      	movs	r3, #31
 8001192:	2216      	movs	r2, #22
 8001194:	21cd      	movs	r1, #205	; 0xcd
 8001196:	201e      	movs	r0, #30
 8001198:	f000 fd23 	bl	8001be2 <ILI9341_Draw_Filled_Circle>

	mixColor = (((int) (31.0 * R / 100.0)) << 11)
 800119c:	4b0b      	ldr	r3, [pc, #44]	; (80011cc <display1+0x41c>)
 800119e:	edd3 7a00 	vldr	s15, [r3]
 80011a2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80011a6:	eeb3 6b0f 	vmov.f64	d6, #63	; 0x41f80000  31.0
 80011aa:	e01d      	b.n	80011e8 <display1+0x438>
 80011ac:	20000000 	.word	0x20000000
 80011b0:	200002b0 	.word	0x200002b0
 80011b4:	20000004 	.word	0x20000004
 80011b8:	0800a070 	.word	0x0800a070
 80011bc:	20000014 	.word	0x20000014
 80011c0:	0800a078 	.word	0x0800a078
 80011c4:	200002aa 	.word	0x200002aa
 80011c8:	200002a8 	.word	0x200002a8
 80011cc:	20000008 	.word	0x20000008
 80011d0:	42c80000 	.word	0x42c80000
 80011d4:	2000000c 	.word	0x2000000c
 80011d8:	20000010 	.word	0x20000010
 80011dc:	20000018 	.word	0x20000018
 80011e0:	200002a4 	.word	0x200002a4
 80011e4:	200002b8 	.word	0x200002b8
 80011e8:	ee27 6b06 	vmul.f64	d6, d7, d6
 80011ec:	ed9f 5b86 	vldr	d5, [pc, #536]	; 8001408 <display1+0x658>
 80011f0:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80011f4:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 80011f8:	ee17 3a90 	vmov	r3, s15
 80011fc:	b29b      	uxth	r3, r3
 80011fe:	02db      	lsls	r3, r3, #11
 8001200:	b29a      	uxth	r2, r3
			+ (((int) (63.0 * G / 100.0)) << 5) + (((int) (31.0 * B / 100.0)));
 8001202:	4b87      	ldr	r3, [pc, #540]	; (8001420 <display1+0x670>)
 8001204:	edd3 7a00 	vldr	s15, [r3]
 8001208:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800120c:	ed9f 6b80 	vldr	d6, [pc, #512]	; 8001410 <display1+0x660>
 8001210:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001214:	ed9f 5b7c 	vldr	d5, [pc, #496]	; 8001408 <display1+0x658>
 8001218:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800121c:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8001220:	ee17 3a90 	vmov	r3, s15
 8001224:	b29b      	uxth	r3, r3
 8001226:	015b      	lsls	r3, r3, #5
 8001228:	b29b      	uxth	r3, r3
 800122a:	4413      	add	r3, r2
 800122c:	b29a      	uxth	r2, r3
 800122e:	4b7d      	ldr	r3, [pc, #500]	; (8001424 <display1+0x674>)
 8001230:	edd3 7a00 	vldr	s15, [r3]
 8001234:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001238:	eeb3 6b0f 	vmov.f64	d6, #63	; 0x41f80000  31.0
 800123c:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001240:	ed9f 5b71 	vldr	d5, [pc, #452]	; 8001408 <display1+0x658>
 8001244:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001248:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 800124c:	ee17 3a90 	vmov	r3, s15
 8001250:	b29b      	uxth	r3, r3
 8001252:	4413      	add	r3, r2
 8001254:	b29a      	uxth	r2, r3
	mixColor = (((int) (31.0 * R / 100.0)) << 11)
 8001256:	4b74      	ldr	r3, [pc, #464]	; (8001428 <display1+0x678>)
 8001258:	801a      	strh	r2, [r3, #0]
	ILI9341_Draw_Filled_Circle(130, 32, 25, mixColor);
 800125a:	4b73      	ldr	r3, [pc, #460]	; (8001428 <display1+0x678>)
 800125c:	881b      	ldrh	r3, [r3, #0]
 800125e:	2219      	movs	r2, #25
 8001260:	2120      	movs	r1, #32
 8001262:	2082      	movs	r0, #130	; 0x82
 8001264:	f000 fcbd 	bl	8001be2 <ILI9341_Draw_Filled_Circle>

	int w1, w2;
	w1 = (int) (R * 1.35);
 8001268:	4b70      	ldr	r3, [pc, #448]	; (800142c <display1+0x67c>)
 800126a:	edd3 7a00 	vldr	s15, [r3]
 800126e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001272:	ed9f 6b69 	vldr	d6, [pc, #420]	; 8001418 <display1+0x668>
 8001276:	ee27 7b06 	vmul.f64	d7, d7, d6
 800127a:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 800127e:	ee17 3a90 	vmov	r3, s15
 8001282:	61fb      	str	r3, [r7, #28]
	w2 = 135 - w1;
 8001284:	69fb      	ldr	r3, [r7, #28]
 8001286:	f1c3 0387 	rsb	r3, r3, #135	; 0x87
 800128a:	61bb      	str	r3, [r7, #24]
	ILI9341_Draw_Rectangle(60, 70, w1, 30, RED);
 800128c:	69fb      	ldr	r3, [r7, #28]
 800128e:	b29a      	uxth	r2, r3
 8001290:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001294:	9300      	str	r3, [sp, #0]
 8001296:	231e      	movs	r3, #30
 8001298:	2146      	movs	r1, #70	; 0x46
 800129a:	203c      	movs	r0, #60	; 0x3c
 800129c:	f001 fb7c 	bl	8002998 <ILI9341_Draw_Rectangle>
	ILI9341_Draw_Rectangle(60 + w1, 70, w2, 30, 0xFC10);
 80012a0:	69fb      	ldr	r3, [r7, #28]
 80012a2:	b29b      	uxth	r3, r3
 80012a4:	333c      	adds	r3, #60	; 0x3c
 80012a6:	b298      	uxth	r0, r3
 80012a8:	69bb      	ldr	r3, [r7, #24]
 80012aa:	b29a      	uxth	r2, r3
 80012ac:	f64f 4310 	movw	r3, #64528	; 0xfc10
 80012b0:	9300      	str	r3, [sp, #0]
 80012b2:	231e      	movs	r3, #30
 80012b4:	2146      	movs	r1, #70	; 0x46
 80012b6:	f001 fb6f 	bl	8002998 <ILI9341_Draw_Rectangle>
	sprintf(Temp_Buffer_text, "%.0f %%", R);
 80012ba:	4b5c      	ldr	r3, [pc, #368]	; (800142c <display1+0x67c>)
 80012bc:	edd3 7a00 	vldr	s15, [r3]
 80012c0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80012c4:	1d38      	adds	r0, r7, #4
 80012c6:	ec53 2b17 	vmov	r2, r3, d7
 80012ca:	4959      	ldr	r1, [pc, #356]	; (8001430 <display1+0x680>)
 80012cc:	f006 fad4 	bl	8007878 <siprintf>
	ILI9341_Draw_Text(Temp_Buffer_text, 205, 77, BLACK, 2, bgCode);
 80012d0:	4b58      	ldr	r3, [pc, #352]	; (8001434 <display1+0x684>)
 80012d2:	881b      	ldrh	r3, [r3, #0]
 80012d4:	1d38      	adds	r0, r7, #4
 80012d6:	9301      	str	r3, [sp, #4]
 80012d8:	2302      	movs	r3, #2
 80012da:	9300      	str	r3, [sp, #0]
 80012dc:	2300      	movs	r3, #0
 80012de:	224d      	movs	r2, #77	; 0x4d
 80012e0:	21cd      	movs	r1, #205	; 0xcd
 80012e2:	f000 fda1 	bl	8001e28 <ILI9341_Draw_Text>

	w1 = (int) (G * 1.35);
 80012e6:	4b4e      	ldr	r3, [pc, #312]	; (8001420 <display1+0x670>)
 80012e8:	edd3 7a00 	vldr	s15, [r3]
 80012ec:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80012f0:	ed9f 6b49 	vldr	d6, [pc, #292]	; 8001418 <display1+0x668>
 80012f4:	ee27 7b06 	vmul.f64	d7, d7, d6
 80012f8:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 80012fc:	ee17 3a90 	vmov	r3, s15
 8001300:	61fb      	str	r3, [r7, #28]
	w2 = 135 - w1;
 8001302:	69fb      	ldr	r3, [r7, #28]
 8001304:	f1c3 0387 	rsb	r3, r3, #135	; 0x87
 8001308:	61bb      	str	r3, [r7, #24]
	ILI9341_Draw_Rectangle(60, 130, w1, 30, GREEN);
 800130a:	69fb      	ldr	r3, [r7, #28]
 800130c:	b29a      	uxth	r2, r3
 800130e:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8001312:	9300      	str	r3, [sp, #0]
 8001314:	231e      	movs	r3, #30
 8001316:	2182      	movs	r1, #130	; 0x82
 8001318:	203c      	movs	r0, #60	; 0x3c
 800131a:	f001 fb3d 	bl	8002998 <ILI9341_Draw_Rectangle>
	ILI9341_Draw_Rectangle(60 + w1, 130, w2, 30, 0x87F0);
 800131e:	69fb      	ldr	r3, [r7, #28]
 8001320:	b29b      	uxth	r3, r3
 8001322:	333c      	adds	r3, #60	; 0x3c
 8001324:	b298      	uxth	r0, r3
 8001326:	69bb      	ldr	r3, [r7, #24]
 8001328:	b29a      	uxth	r2, r3
 800132a:	f248 73f0 	movw	r3, #34800	; 0x87f0
 800132e:	9300      	str	r3, [sp, #0]
 8001330:	231e      	movs	r3, #30
 8001332:	2182      	movs	r1, #130	; 0x82
 8001334:	f001 fb30 	bl	8002998 <ILI9341_Draw_Rectangle>
	sprintf(Temp_Buffer_text, "%.0f %%", G);
 8001338:	4b39      	ldr	r3, [pc, #228]	; (8001420 <display1+0x670>)
 800133a:	edd3 7a00 	vldr	s15, [r3]
 800133e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001342:	1d38      	adds	r0, r7, #4
 8001344:	ec53 2b17 	vmov	r2, r3, d7
 8001348:	4939      	ldr	r1, [pc, #228]	; (8001430 <display1+0x680>)
 800134a:	f006 fa95 	bl	8007878 <siprintf>
	ILI9341_Draw_Text(Temp_Buffer_text, 205, 137, BLACK, 2, bgCode);
 800134e:	4b39      	ldr	r3, [pc, #228]	; (8001434 <display1+0x684>)
 8001350:	881b      	ldrh	r3, [r3, #0]
 8001352:	1d38      	adds	r0, r7, #4
 8001354:	9301      	str	r3, [sp, #4]
 8001356:	2302      	movs	r3, #2
 8001358:	9300      	str	r3, [sp, #0]
 800135a:	2300      	movs	r3, #0
 800135c:	2289      	movs	r2, #137	; 0x89
 800135e:	21cd      	movs	r1, #205	; 0xcd
 8001360:	f000 fd62 	bl	8001e28 <ILI9341_Draw_Text>

	w1 = (int) (B * 1.35);
 8001364:	4b2f      	ldr	r3, [pc, #188]	; (8001424 <display1+0x674>)
 8001366:	edd3 7a00 	vldr	s15, [r3]
 800136a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800136e:	ed9f 6b2a 	vldr	d6, [pc, #168]	; 8001418 <display1+0x668>
 8001372:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001376:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 800137a:	ee17 3a90 	vmov	r3, s15
 800137e:	61fb      	str	r3, [r7, #28]
	w2 = 135 - w1;
 8001380:	69fb      	ldr	r3, [r7, #28]
 8001382:	f1c3 0387 	rsb	r3, r3, #135	; 0x87
 8001386:	61bb      	str	r3, [r7, #24]
	ILI9341_Draw_Rectangle(60, 190, w1, 30, BLUE);
 8001388:	69fb      	ldr	r3, [r7, #28]
 800138a:	b29a      	uxth	r2, r3
 800138c:	231f      	movs	r3, #31
 800138e:	9300      	str	r3, [sp, #0]
 8001390:	231e      	movs	r3, #30
 8001392:	21be      	movs	r1, #190	; 0xbe
 8001394:	203c      	movs	r0, #60	; 0x3c
 8001396:	f001 faff 	bl	8002998 <ILI9341_Draw_Rectangle>
	ILI9341_Draw_Rectangle(60 + w1, 190, w2, 30, 0x841F);
 800139a:	69fb      	ldr	r3, [r7, #28]
 800139c:	b29b      	uxth	r3, r3
 800139e:	333c      	adds	r3, #60	; 0x3c
 80013a0:	b298      	uxth	r0, r3
 80013a2:	69bb      	ldr	r3, [r7, #24]
 80013a4:	b29a      	uxth	r2, r3
 80013a6:	f248 431f 	movw	r3, #33823	; 0x841f
 80013aa:	9300      	str	r3, [sp, #0]
 80013ac:	231e      	movs	r3, #30
 80013ae:	21be      	movs	r1, #190	; 0xbe
 80013b0:	f001 faf2 	bl	8002998 <ILI9341_Draw_Rectangle>
	sprintf(Temp_Buffer_text, "%.0f %%", B);
 80013b4:	4b1b      	ldr	r3, [pc, #108]	; (8001424 <display1+0x674>)
 80013b6:	edd3 7a00 	vldr	s15, [r3]
 80013ba:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80013be:	1d38      	adds	r0, r7, #4
 80013c0:	ec53 2b17 	vmov	r2, r3, d7
 80013c4:	491a      	ldr	r1, [pc, #104]	; (8001430 <display1+0x680>)
 80013c6:	f006 fa57 	bl	8007878 <siprintf>
	ILI9341_Draw_Text(Temp_Buffer_text, 205, 197, BLACK, 2, bgCode);
 80013ca:	4b1a      	ldr	r3, [pc, #104]	; (8001434 <display1+0x684>)
 80013cc:	881b      	ldrh	r3, [r3, #0]
 80013ce:	1d38      	adds	r0, r7, #4
 80013d0:	9301      	str	r3, [sp, #4]
 80013d2:	2302      	movs	r3, #2
 80013d4:	9300      	str	r3, [sp, #0]
 80013d6:	2300      	movs	r3, #0
 80013d8:	22c5      	movs	r2, #197	; 0xc5
 80013da:	21cd      	movs	r1, #205	; 0xcd
 80013dc:	f000 fd24 	bl	8001e28 <ILI9341_Draw_Text>
	if (state == 2) {
 80013e0:	4b15      	ldr	r3, [pc, #84]	; (8001438 <display1+0x688>)
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	2b02      	cmp	r3, #2
 80013e6:	d108      	bne.n	80013fa <display1+0x64a>
		ILI9341_Fill_Screen(bgCode);
 80013e8:	4b12      	ldr	r3, [pc, #72]	; (8001434 <display1+0x684>)
 80013ea:	881b      	ldrh	r3, [r3, #0]
 80013ec:	4618      	mov	r0, r3
 80013ee:	f001 f9d3 	bl	8002798 <ILI9341_Fill_Screen>
		ILI9341_Draw_Image((const char*) img_view, SCREEN_VERTICAL_1);
 80013f2:	2100      	movs	r1, #0
 80013f4:	4811      	ldr	r0, [pc, #68]	; (800143c <display1+0x68c>)
 80013f6:	f000 fd47 	bl	8001e88 <ILI9341_Draw_Image>
	}
}
 80013fa:	bf00      	nop
 80013fc:	3728      	adds	r7, #40	; 0x28
 80013fe:	46bd      	mov	sp, r7
 8001400:	ecbd 8b02 	vpop	{d8}
 8001404:	bd80      	pop	{r7, pc}
 8001406:	bf00      	nop
 8001408:	00000000 	.word	0x00000000
 800140c:	40590000 	.word	0x40590000
 8001410:	00000000 	.word	0x00000000
 8001414:	404f8000 	.word	0x404f8000
 8001418:	9999999a 	.word	0x9999999a
 800141c:	3ff59999 	.word	0x3ff59999
 8001420:	2000000c 	.word	0x2000000c
 8001424:	20000010 	.word	0x20000010
 8001428:	200002bc 	.word	0x200002bc
 800142c:	20000008 	.word	0x20000008
 8001430:	0800a084 	.word	0x0800a084
 8001434:	20000014 	.word	0x20000014
 8001438:	20000018 	.word	0x20000018
 800143c:	0800a0bc 	.word	0x0800a0bc

08001440 <display2>:
void display2() {
 8001440:	b580      	push	{r7, lr}
 8001442:	b082      	sub	sp, #8
 8001444:	af02      	add	r7, sp, #8
	ILI9341_Set_Rotation(SCREEN_HORIZONTAL_1);
 8001446:	2001      	movs	r0, #1
 8001448:	f000 ff9c 	bl	8002384 <ILI9341_Set_Rotation>
//	ILI9341_Draw_Image((const char*) img_view, SCREEN_VERTICAL_1);
	ILI9341_Set_Rotation(SCREEN_HORIZONTAL_1);
 800144c:	2001      	movs	r0, #1
 800144e:	f000 ff99 	bl	8002384 <ILI9341_Set_Rotation>
	//ILI9341_Draw_Rectangle(150, 50, 300, 300, 0xFFFF);
	ILI9341_Draw_Text("Group No.16", 130, 100, mixColor, 2, bgCode);
 8001452:	4b28      	ldr	r3, [pc, #160]	; (80014f4 <display2+0xb4>)
 8001454:	881a      	ldrh	r2, [r3, #0]
 8001456:	4b28      	ldr	r3, [pc, #160]	; (80014f8 <display2+0xb8>)
 8001458:	881b      	ldrh	r3, [r3, #0]
 800145a:	9301      	str	r3, [sp, #4]
 800145c:	2302      	movs	r3, #2
 800145e:	9300      	str	r3, [sp, #0]
 8001460:	4613      	mov	r3, r2
 8001462:	2264      	movs	r2, #100	; 0x64
 8001464:	2182      	movs	r1, #130	; 0x82
 8001466:	4825      	ldr	r0, [pc, #148]	; (80014fc <display2+0xbc>)
 8001468:	f000 fcde 	bl	8001e28 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("Anawin", 130, 120, mixColor, 2, bgCode);
 800146c:	4b21      	ldr	r3, [pc, #132]	; (80014f4 <display2+0xb4>)
 800146e:	881a      	ldrh	r2, [r3, #0]
 8001470:	4b21      	ldr	r3, [pc, #132]	; (80014f8 <display2+0xb8>)
 8001472:	881b      	ldrh	r3, [r3, #0]
 8001474:	9301      	str	r3, [sp, #4]
 8001476:	2302      	movs	r3, #2
 8001478:	9300      	str	r3, [sp, #0]
 800147a:	4613      	mov	r3, r2
 800147c:	2278      	movs	r2, #120	; 0x78
 800147e:	2182      	movs	r1, #130	; 0x82
 8001480:	481f      	ldr	r0, [pc, #124]	; (8001500 <display2+0xc0>)
 8001482:	f000 fcd1 	bl	8001e28 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("Thamja", 130, 140, mixColor, 2, bgCode);
 8001486:	4b1b      	ldr	r3, [pc, #108]	; (80014f4 <display2+0xb4>)
 8001488:	881a      	ldrh	r2, [r3, #0]
 800148a:	4b1b      	ldr	r3, [pc, #108]	; (80014f8 <display2+0xb8>)
 800148c:	881b      	ldrh	r3, [r3, #0]
 800148e:	9301      	str	r3, [sp, #4]
 8001490:	2302      	movs	r3, #2
 8001492:	9300      	str	r3, [sp, #0]
 8001494:	4613      	mov	r3, r2
 8001496:	228c      	movs	r2, #140	; 0x8c
 8001498:	2182      	movs	r1, #130	; 0x82
 800149a:	481a      	ldr	r0, [pc, #104]	; (8001504 <display2+0xc4>)
 800149c:	f000 fcc4 	bl	8001e28 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("roentip", 130, 160, mixColor, 2, bgCode);
 80014a0:	4b14      	ldr	r3, [pc, #80]	; (80014f4 <display2+0xb4>)
 80014a2:	881a      	ldrh	r2, [r3, #0]
 80014a4:	4b14      	ldr	r3, [pc, #80]	; (80014f8 <display2+0xb8>)
 80014a6:	881b      	ldrh	r3, [r3, #0]
 80014a8:	9301      	str	r3, [sp, #4]
 80014aa:	2302      	movs	r3, #2
 80014ac:	9300      	str	r3, [sp, #0]
 80014ae:	4613      	mov	r3, r2
 80014b0:	22a0      	movs	r2, #160	; 0xa0
 80014b2:	2182      	movs	r1, #130	; 0x82
 80014b4:	4814      	ldr	r0, [pc, #80]	; (8001508 <display2+0xc8>)
 80014b6:	f000 fcb7 	bl	8001e28 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("64010965", 130, 180, mixColor, 2, bgCode);
 80014ba:	4b0e      	ldr	r3, [pc, #56]	; (80014f4 <display2+0xb4>)
 80014bc:	881a      	ldrh	r2, [r3, #0]
 80014be:	4b0e      	ldr	r3, [pc, #56]	; (80014f8 <display2+0xb8>)
 80014c0:	881b      	ldrh	r3, [r3, #0]
 80014c2:	9301      	str	r3, [sp, #4]
 80014c4:	2302      	movs	r3, #2
 80014c6:	9300      	str	r3, [sp, #0]
 80014c8:	4613      	mov	r3, r2
 80014ca:	22b4      	movs	r2, #180	; 0xb4
 80014cc:	2182      	movs	r1, #130	; 0x82
 80014ce:	480f      	ldr	r0, [pc, #60]	; (800150c <display2+0xcc>)
 80014d0:	f000 fcaa 	bl	8001e28 <ILI9341_Draw_Text>
	if (TP_Touchpad_Pressed()) {
 80014d4:	f001 fbe2 	bl	8002c9c <TP_Touchpad_Pressed>
 80014d8:	4603      	mov	r3, r0
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d007      	beq.n	80014ee <display2+0xae>
		state = 1;
 80014de:	4b0c      	ldr	r3, [pc, #48]	; (8001510 <display2+0xd0>)
 80014e0:	2201      	movs	r2, #1
 80014e2:	601a      	str	r2, [r3, #0]
		ILI9341_Fill_Screen(bgCode);
 80014e4:	4b04      	ldr	r3, [pc, #16]	; (80014f8 <display2+0xb8>)
 80014e6:	881b      	ldrh	r3, [r3, #0]
 80014e8:	4618      	mov	r0, r3
 80014ea:	f001 f955 	bl	8002798 <ILI9341_Fill_Screen>
	}
}
 80014ee:	bf00      	nop
 80014f0:	46bd      	mov	sp, r7
 80014f2:	bd80      	pop	{r7, pc}
 80014f4:	200002bc 	.word	0x200002bc
 80014f8:	20000014 	.word	0x20000014
 80014fc:	0800a08c 	.word	0x0800a08c
 8001500:	0800a098 	.word	0x0800a098
 8001504:	0800a0a0 	.word	0x0800a0a0
 8001508:	0800a0a8 	.word	0x0800a0a8
 800150c:	0800a0b0 	.word	0x0800a0b0
 8001510:	20000018 	.word	0x20000018

08001514 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8001514:	b480      	push	{r7}
 8001516:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	while (1) {
 8001518:	e7fe      	b.n	8001518 <Error_Handler+0x4>
	...

0800151c <MX_RNG_Init>:
/* USER CODE END 0 */

RNG_HandleTypeDef hrng;

/* RNG init function */
void MX_RNG_Init(void) {
 800151c:	b580      	push	{r7, lr}
 800151e:	af00      	add	r7, sp, #0
	/* USER CODE END RNG_Init 0 */

	/* USER CODE BEGIN RNG_Init 1 */

	/* USER CODE END RNG_Init 1 */
	hrng.Instance = RNG;
 8001520:	4b06      	ldr	r3, [pc, #24]	; (800153c <MX_RNG_Init+0x20>)
 8001522:	4a07      	ldr	r2, [pc, #28]	; (8001540 <MX_RNG_Init+0x24>)
 8001524:	601a      	str	r2, [r3, #0]
	if (HAL_RNG_Init(&hrng) != HAL_OK) {
 8001526:	4805      	ldr	r0, [pc, #20]	; (800153c <MX_RNG_Init+0x20>)
 8001528:	f004 f81e 	bl	8005568 <HAL_RNG_Init>
 800152c:	4603      	mov	r3, r0
 800152e:	2b00      	cmp	r3, #0
 8001530:	d001      	beq.n	8001536 <MX_RNG_Init+0x1a>
		Error_Handler();
 8001532:	f7ff ffef 	bl	8001514 <Error_Handler>
	}
	/* USER CODE BEGIN RNG_Init 2 */

	/* USER CODE END RNG_Init 2 */

}
 8001536:	bf00      	nop
 8001538:	bd80      	pop	{r7, pc}
 800153a:	bf00      	nop
 800153c:	200002c0 	.word	0x200002c0
 8001540:	50060800 	.word	0x50060800

08001544 <HAL_RNG_MspInit>:

void HAL_RNG_MspInit(RNG_HandleTypeDef *rngHandle) {
 8001544:	b480      	push	{r7}
 8001546:	b085      	sub	sp, #20
 8001548:	af00      	add	r7, sp, #0
 800154a:	6078      	str	r0, [r7, #4]

	if (rngHandle->Instance == RNG) {
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	4a0a      	ldr	r2, [pc, #40]	; (800157c <HAL_RNG_MspInit+0x38>)
 8001552:	4293      	cmp	r3, r2
 8001554:	d10b      	bne.n	800156e <HAL_RNG_MspInit+0x2a>
		/* USER CODE BEGIN RNG_MspInit 0 */

		/* USER CODE END RNG_MspInit 0 */
		/* RNG clock enable */
		__HAL_RCC_RNG_CLK_ENABLE();
 8001556:	4b0a      	ldr	r3, [pc, #40]	; (8001580 <HAL_RNG_MspInit+0x3c>)
 8001558:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800155a:	4a09      	ldr	r2, [pc, #36]	; (8001580 <HAL_RNG_MspInit+0x3c>)
 800155c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001560:	6353      	str	r3, [r2, #52]	; 0x34
 8001562:	4b07      	ldr	r3, [pc, #28]	; (8001580 <HAL_RNG_MspInit+0x3c>)
 8001564:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001566:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800156a:	60fb      	str	r3, [r7, #12]
 800156c:	68fb      	ldr	r3, [r7, #12]
		/* USER CODE BEGIN RNG_MspInit 1 */

		/* USER CODE END RNG_MspInit 1 */
	}
}
 800156e:	bf00      	nop
 8001570:	3714      	adds	r7, #20
 8001572:	46bd      	mov	sp, r7
 8001574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001578:	4770      	bx	lr
 800157a:	bf00      	nop
 800157c:	50060800 	.word	0x50060800
 8001580:	40023800 	.word	0x40023800

08001584 <MX_SPI5_Init>:
/* USER CODE END 0 */

SPI_HandleTypeDef hspi5;

/* SPI5 init function */
void MX_SPI5_Init(void) {
 8001584:	b580      	push	{r7, lr}
 8001586:	af00      	add	r7, sp, #0
	/* USER CODE END SPI5_Init 0 */

	/* USER CODE BEGIN SPI5_Init 1 */

	/* USER CODE END SPI5_Init 1 */
	hspi5.Instance = SPI5;
 8001588:	4b1b      	ldr	r3, [pc, #108]	; (80015f8 <MX_SPI5_Init+0x74>)
 800158a:	4a1c      	ldr	r2, [pc, #112]	; (80015fc <MX_SPI5_Init+0x78>)
 800158c:	601a      	str	r2, [r3, #0]
	hspi5.Init.Mode = SPI_MODE_MASTER;
 800158e:	4b1a      	ldr	r3, [pc, #104]	; (80015f8 <MX_SPI5_Init+0x74>)
 8001590:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001594:	605a      	str	r2, [r3, #4]
	hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 8001596:	4b18      	ldr	r3, [pc, #96]	; (80015f8 <MX_SPI5_Init+0x74>)
 8001598:	2200      	movs	r2, #0
 800159a:	609a      	str	r2, [r3, #8]
	hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 800159c:	4b16      	ldr	r3, [pc, #88]	; (80015f8 <MX_SPI5_Init+0x74>)
 800159e:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80015a2:	60da      	str	r2, [r3, #12]
	hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 80015a4:	4b14      	ldr	r3, [pc, #80]	; (80015f8 <MX_SPI5_Init+0x74>)
 80015a6:	2200      	movs	r2, #0
 80015a8:	611a      	str	r2, [r3, #16]
	hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 80015aa:	4b13      	ldr	r3, [pc, #76]	; (80015f8 <MX_SPI5_Init+0x74>)
 80015ac:	2200      	movs	r2, #0
 80015ae:	615a      	str	r2, [r3, #20]
	hspi5.Init.NSS = SPI_NSS_SOFT;
 80015b0:	4b11      	ldr	r3, [pc, #68]	; (80015f8 <MX_SPI5_Init+0x74>)
 80015b2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80015b6:	619a      	str	r2, [r3, #24]
	hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80015b8:	4b0f      	ldr	r3, [pc, #60]	; (80015f8 <MX_SPI5_Init+0x74>)
 80015ba:	2200      	movs	r2, #0
 80015bc:	61da      	str	r2, [r3, #28]
	hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80015be:	4b0e      	ldr	r3, [pc, #56]	; (80015f8 <MX_SPI5_Init+0x74>)
 80015c0:	2200      	movs	r2, #0
 80015c2:	621a      	str	r2, [r3, #32]
	hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 80015c4:	4b0c      	ldr	r3, [pc, #48]	; (80015f8 <MX_SPI5_Init+0x74>)
 80015c6:	2200      	movs	r2, #0
 80015c8:	625a      	str	r2, [r3, #36]	; 0x24
	hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80015ca:	4b0b      	ldr	r3, [pc, #44]	; (80015f8 <MX_SPI5_Init+0x74>)
 80015cc:	2200      	movs	r2, #0
 80015ce:	629a      	str	r2, [r3, #40]	; 0x28
	hspi5.Init.CRCPolynomial = 7;
 80015d0:	4b09      	ldr	r3, [pc, #36]	; (80015f8 <MX_SPI5_Init+0x74>)
 80015d2:	2207      	movs	r2, #7
 80015d4:	62da      	str	r2, [r3, #44]	; 0x2c
	hspi5.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80015d6:	4b08      	ldr	r3, [pc, #32]	; (80015f8 <MX_SPI5_Init+0x74>)
 80015d8:	2200      	movs	r2, #0
 80015da:	631a      	str	r2, [r3, #48]	; 0x30
	hspi5.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80015dc:	4b06      	ldr	r3, [pc, #24]	; (80015f8 <MX_SPI5_Init+0x74>)
 80015de:	2200      	movs	r2, #0
 80015e0:	635a      	str	r2, [r3, #52]	; 0x34
	if (HAL_SPI_Init(&hspi5) != HAL_OK) {
 80015e2:	4805      	ldr	r0, [pc, #20]	; (80015f8 <MX_SPI5_Init+0x74>)
 80015e4:	f003 ffea 	bl	80055bc <HAL_SPI_Init>
 80015e8:	4603      	mov	r3, r0
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d001      	beq.n	80015f2 <MX_SPI5_Init+0x6e>
		Error_Handler();
 80015ee:	f7ff ff91 	bl	8001514 <Error_Handler>
	}
	/* USER CODE BEGIN SPI5_Init 2 */

	/* USER CODE END SPI5_Init 2 */

}
 80015f2:	bf00      	nop
 80015f4:	bd80      	pop	{r7, pc}
 80015f6:	bf00      	nop
 80015f8:	200002d0 	.word	0x200002d0
 80015fc:	40015000 	.word	0x40015000

08001600 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef *spiHandle) {
 8001600:	b580      	push	{r7, lr}
 8001602:	b08a      	sub	sp, #40	; 0x28
 8001604:	af00      	add	r7, sp, #0
 8001606:	6078      	str	r0, [r7, #4]

	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8001608:	f107 0314 	add.w	r3, r7, #20
 800160c:	2200      	movs	r2, #0
 800160e:	601a      	str	r2, [r3, #0]
 8001610:	605a      	str	r2, [r3, #4]
 8001612:	609a      	str	r2, [r3, #8]
 8001614:	60da      	str	r2, [r3, #12]
 8001616:	611a      	str	r2, [r3, #16]
	if (spiHandle->Instance == SPI5) {
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	4a17      	ldr	r2, [pc, #92]	; (800167c <HAL_SPI_MspInit+0x7c>)
 800161e:	4293      	cmp	r3, r2
 8001620:	d128      	bne.n	8001674 <HAL_SPI_MspInit+0x74>
		/* USER CODE BEGIN SPI5_MspInit 0 */

		/* USER CODE END SPI5_MspInit 0 */
		/* SPI5 clock enable */
		__HAL_RCC_SPI5_CLK_ENABLE();
 8001622:	4b17      	ldr	r3, [pc, #92]	; (8001680 <HAL_SPI_MspInit+0x80>)
 8001624:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001626:	4a16      	ldr	r2, [pc, #88]	; (8001680 <HAL_SPI_MspInit+0x80>)
 8001628:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800162c:	6453      	str	r3, [r2, #68]	; 0x44
 800162e:	4b14      	ldr	r3, [pc, #80]	; (8001680 <HAL_SPI_MspInit+0x80>)
 8001630:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001632:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001636:	613b      	str	r3, [r7, #16]
 8001638:	693b      	ldr	r3, [r7, #16]

		__HAL_RCC_GPIOF_CLK_ENABLE();
 800163a:	4b11      	ldr	r3, [pc, #68]	; (8001680 <HAL_SPI_MspInit+0x80>)
 800163c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800163e:	4a10      	ldr	r2, [pc, #64]	; (8001680 <HAL_SPI_MspInit+0x80>)
 8001640:	f043 0320 	orr.w	r3, r3, #32
 8001644:	6313      	str	r3, [r2, #48]	; 0x30
 8001646:	4b0e      	ldr	r3, [pc, #56]	; (8001680 <HAL_SPI_MspInit+0x80>)
 8001648:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800164a:	f003 0320 	and.w	r3, r3, #32
 800164e:	60fb      	str	r3, [r7, #12]
 8001650:	68fb      	ldr	r3, [r7, #12]
		/**SPI5 GPIO Configuration
		 PF7     ------> SPI5_SCK
		 PF8     ------> SPI5_MISO
		 PF9     ------> SPI5_MOSI
		 */
		GPIO_InitStruct.Pin = GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_9;
 8001652:	f44f 7360 	mov.w	r3, #896	; 0x380
 8001656:	617b      	str	r3, [r7, #20]
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001658:	2302      	movs	r3, #2
 800165a:	61bb      	str	r3, [r7, #24]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 800165c:	2300      	movs	r3, #0
 800165e:	61fb      	str	r3, [r7, #28]
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001660:	2303      	movs	r3, #3
 8001662:	623b      	str	r3, [r7, #32]
		GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8001664:	2305      	movs	r3, #5
 8001666:	627b      	str	r3, [r7, #36]	; 0x24
		HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001668:	f107 0314 	add.w	r3, r7, #20
 800166c:	4619      	mov	r1, r3
 800166e:	4805      	ldr	r0, [pc, #20]	; (8001684 <HAL_SPI_MspInit+0x84>)
 8001670:	f001 ff4e 	bl	8003510 <HAL_GPIO_Init>

		/* USER CODE BEGIN SPI5_MspInit 1 */

		/* USER CODE END SPI5_MspInit 1 */
	}
}
 8001674:	bf00      	nop
 8001676:	3728      	adds	r7, #40	; 0x28
 8001678:	46bd      	mov	sp, r7
 800167a:	bd80      	pop	{r7, pc}
 800167c:	40015000 	.word	0x40015000
 8001680:	40023800 	.word	0x40023800
 8001684:	40021400 	.word	0x40021400

08001688 <HAL_MspInit>:

/* USER CODE END 0 */
/**
 * Initializes the Global MSP.
 */
void HAL_MspInit(void) {
 8001688:	b480      	push	{r7}
 800168a:	b083      	sub	sp, #12
 800168c:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN MspInit 0 */

	/* USER CODE END MspInit 0 */

	__HAL_RCC_PWR_CLK_ENABLE();
 800168e:	4b0f      	ldr	r3, [pc, #60]	; (80016cc <HAL_MspInit+0x44>)
 8001690:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001692:	4a0e      	ldr	r2, [pc, #56]	; (80016cc <HAL_MspInit+0x44>)
 8001694:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001698:	6413      	str	r3, [r2, #64]	; 0x40
 800169a:	4b0c      	ldr	r3, [pc, #48]	; (80016cc <HAL_MspInit+0x44>)
 800169c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800169e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016a2:	607b      	str	r3, [r7, #4]
 80016a4:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_SYSCFG_CLK_ENABLE();
 80016a6:	4b09      	ldr	r3, [pc, #36]	; (80016cc <HAL_MspInit+0x44>)
 80016a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016aa:	4a08      	ldr	r2, [pc, #32]	; (80016cc <HAL_MspInit+0x44>)
 80016ac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80016b0:	6453      	str	r3, [r2, #68]	; 0x44
 80016b2:	4b06      	ldr	r3, [pc, #24]	; (80016cc <HAL_MspInit+0x44>)
 80016b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80016ba:	603b      	str	r3, [r7, #0]
 80016bc:	683b      	ldr	r3, [r7, #0]
	/* System interrupt init*/

	/* USER CODE BEGIN MspInit 1 */

	/* USER CODE END MspInit 1 */
}
 80016be:	bf00      	nop
 80016c0:	370c      	adds	r7, #12
 80016c2:	46bd      	mov	sp, r7
 80016c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c8:	4770      	bx	lr
 80016ca:	bf00      	nop
 80016cc:	40023800 	.word	0x40023800

080016d0 <SysTick_Handler>:
/*           Cortex-M7 Processor Interruption and Exception Handlers          */
/******************************************************************************/
/**
 * @brief This function handles System tick timer.
 */
void SysTick_Handler(void) {
 80016d0:	b580      	push	{r7, lr}
 80016d2:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN SysTick_IRQn 0 */

	/* USER CODE END SysTick_IRQn 0 */
	HAL_IncTick();
 80016d4:	f001 fb3e 	bl	8002d54 <HAL_IncTick>
	/* USER CODE BEGIN SysTick_IRQn 1 */

	/* USER CODE END SysTick_IRQn 1 */
}
 80016d8:	bf00      	nop
 80016da:	bd80      	pop	{r7, pc}

080016dc <TIM2_IRQHandler>:
/******************************************************************************/

/**
 * @brief This function handles TIM2 global interrupt.
 */
void TIM2_IRQHandler(void) {
 80016dc:	b580      	push	{r7, lr}
 80016de:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN TIM2_IRQn 0 */

	/* USER CODE END TIM2_IRQn 0 */
	HAL_TIM_IRQHandler(&htim2);
 80016e0:	4804      	ldr	r0, [pc, #16]	; (80016f4 <TIM2_IRQHandler+0x18>)
 80016e2:	f004 fbb5 	bl	8005e50 <HAL_TIM_IRQHandler>
	/* USER CODE BEGIN TIM2_IRQn 1 */
	count++;
 80016e6:	4b04      	ldr	r3, [pc, #16]	; (80016f8 <TIM2_IRQHandler+0x1c>)
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	3301      	adds	r3, #1
 80016ec:	4a02      	ldr	r2, [pc, #8]	; (80016f8 <TIM2_IRQHandler+0x1c>)
 80016ee:	6013      	str	r3, [r2, #0]
	/* USER CODE END TIM2_IRQn 1 */
}
 80016f0:	bf00      	nop
 80016f2:	bd80      	pop	{r7, pc}
 80016f4:	20000384 	.word	0x20000384
 80016f8:	200002a4 	.word	0x200002a4

080016fc <_getpid>:

/* Functions */
void initialise_monitor_handles() {
}

int _getpid(void) {
 80016fc:	b480      	push	{r7}
 80016fe:	af00      	add	r7, sp, #0
	return 1;
 8001700:	2301      	movs	r3, #1
}
 8001702:	4618      	mov	r0, r3
 8001704:	46bd      	mov	sp, r7
 8001706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170a:	4770      	bx	lr

0800170c <_kill>:

int _kill(int pid, int sig) {
 800170c:	b580      	push	{r7, lr}
 800170e:	b082      	sub	sp, #8
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]
 8001714:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001716:	f006 f965 	bl	80079e4 <__errno>
 800171a:	4603      	mov	r3, r0
 800171c:	2216      	movs	r2, #22
 800171e:	601a      	str	r2, [r3, #0]
	return -1;
 8001720:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001724:	4618      	mov	r0, r3
 8001726:	3708      	adds	r7, #8
 8001728:	46bd      	mov	sp, r7
 800172a:	bd80      	pop	{r7, pc}

0800172c <_exit>:

void _exit(int status) {
 800172c:	b580      	push	{r7, lr}
 800172e:	b082      	sub	sp, #8
 8001730:	af00      	add	r7, sp, #0
 8001732:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001734:	f04f 31ff 	mov.w	r1, #4294967295
 8001738:	6878      	ldr	r0, [r7, #4]
 800173a:	f7ff ffe7 	bl	800170c <_kill>
	while (1) {
 800173e:	e7fe      	b.n	800173e <_exit+0x12>

08001740 <_read>:
	} /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len) {
 8001740:	b580      	push	{r7, lr}
 8001742:	b086      	sub	sp, #24
 8001744:	af00      	add	r7, sp, #0
 8001746:	60f8      	str	r0, [r7, #12]
 8001748:	60b9      	str	r1, [r7, #8]
 800174a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 800174c:	2300      	movs	r3, #0
 800174e:	617b      	str	r3, [r7, #20]
 8001750:	e00a      	b.n	8001768 <_read+0x28>
		*ptr++ = __io_getchar();
 8001752:	f3af 8000 	nop.w
 8001756:	4601      	mov	r1, r0
 8001758:	68bb      	ldr	r3, [r7, #8]
 800175a:	1c5a      	adds	r2, r3, #1
 800175c:	60ba      	str	r2, [r7, #8]
 800175e:	b2ca      	uxtb	r2, r1
 8001760:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8001762:	697b      	ldr	r3, [r7, #20]
 8001764:	3301      	adds	r3, #1
 8001766:	617b      	str	r3, [r7, #20]
 8001768:	697a      	ldr	r2, [r7, #20]
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	429a      	cmp	r2, r3
 800176e:	dbf0      	blt.n	8001752 <_read+0x12>
	}

	return len;
 8001770:	687b      	ldr	r3, [r7, #4]
}
 8001772:	4618      	mov	r0, r3
 8001774:	3718      	adds	r7, #24
 8001776:	46bd      	mov	sp, r7
 8001778:	bd80      	pop	{r7, pc}

0800177a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len) {
 800177a:	b580      	push	{r7, lr}
 800177c:	b086      	sub	sp, #24
 800177e:	af00      	add	r7, sp, #0
 8001780:	60f8      	str	r0, [r7, #12]
 8001782:	60b9      	str	r1, [r7, #8]
 8001784:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8001786:	2300      	movs	r3, #0
 8001788:	617b      	str	r3, [r7, #20]
 800178a:	e009      	b.n	80017a0 <_write+0x26>
		__io_putchar(*ptr++);
 800178c:	68bb      	ldr	r3, [r7, #8]
 800178e:	1c5a      	adds	r2, r3, #1
 8001790:	60ba      	str	r2, [r7, #8]
 8001792:	781b      	ldrb	r3, [r3, #0]
 8001794:	4618      	mov	r0, r3
 8001796:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 800179a:	697b      	ldr	r3, [r7, #20]
 800179c:	3301      	adds	r3, #1
 800179e:	617b      	str	r3, [r7, #20]
 80017a0:	697a      	ldr	r2, [r7, #20]
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	429a      	cmp	r2, r3
 80017a6:	dbf1      	blt.n	800178c <_write+0x12>
	}
	return len;
 80017a8:	687b      	ldr	r3, [r7, #4]
}
 80017aa:	4618      	mov	r0, r3
 80017ac:	3718      	adds	r7, #24
 80017ae:	46bd      	mov	sp, r7
 80017b0:	bd80      	pop	{r7, pc}

080017b2 <_close>:

int _close(int file) {
 80017b2:	b480      	push	{r7}
 80017b4:	b083      	sub	sp, #12
 80017b6:	af00      	add	r7, sp, #0
 80017b8:	6078      	str	r0, [r7, #4]
	return -1;
 80017ba:	f04f 33ff 	mov.w	r3, #4294967295
}
 80017be:	4618      	mov	r0, r3
 80017c0:	370c      	adds	r7, #12
 80017c2:	46bd      	mov	sp, r7
 80017c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c8:	4770      	bx	lr

080017ca <_fstat>:

int _fstat(int file, struct stat *st) {
 80017ca:	b480      	push	{r7}
 80017cc:	b083      	sub	sp, #12
 80017ce:	af00      	add	r7, sp, #0
 80017d0:	6078      	str	r0, [r7, #4]
 80017d2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80017d4:	683b      	ldr	r3, [r7, #0]
 80017d6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80017da:	605a      	str	r2, [r3, #4]
	return 0;
 80017dc:	2300      	movs	r3, #0
}
 80017de:	4618      	mov	r0, r3
 80017e0:	370c      	adds	r7, #12
 80017e2:	46bd      	mov	sp, r7
 80017e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e8:	4770      	bx	lr

080017ea <_isatty>:

int _isatty(int file) {
 80017ea:	b480      	push	{r7}
 80017ec:	b083      	sub	sp, #12
 80017ee:	af00      	add	r7, sp, #0
 80017f0:	6078      	str	r0, [r7, #4]
	return 1;
 80017f2:	2301      	movs	r3, #1
}
 80017f4:	4618      	mov	r0, r3
 80017f6:	370c      	adds	r7, #12
 80017f8:	46bd      	mov	sp, r7
 80017fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fe:	4770      	bx	lr

08001800 <_lseek>:

int _lseek(int file, int ptr, int dir) {
 8001800:	b480      	push	{r7}
 8001802:	b085      	sub	sp, #20
 8001804:	af00      	add	r7, sp, #0
 8001806:	60f8      	str	r0, [r7, #12]
 8001808:	60b9      	str	r1, [r7, #8]
 800180a:	607a      	str	r2, [r7, #4]
	return 0;
 800180c:	2300      	movs	r3, #0
}
 800180e:	4618      	mov	r0, r3
 8001810:	3714      	adds	r7, #20
 8001812:	46bd      	mov	sp, r7
 8001814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001818:	4770      	bx	lr
	...

0800181c <_sbrk>:
 * reserved size, please increase the '_Min_Stack_Size'.
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void* _sbrk(ptrdiff_t incr) {
 800181c:	b580      	push	{r7, lr}
 800181e:	b086      	sub	sp, #24
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]
	extern uint8_t _end; /* Symbol defined in the linker script */
	extern uint8_t _estack; /* Symbol defined in the linker script */
	extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
	const uint32_t stack_limit = (uint32_t) &_estack
 8001824:	4a14      	ldr	r2, [pc, #80]	; (8001878 <_sbrk+0x5c>)
			- (uint32_t) &_Min_Stack_Size;
 8001826:	4b15      	ldr	r3, [pc, #84]	; (800187c <_sbrk+0x60>)
	const uint32_t stack_limit = (uint32_t) &_estack
 8001828:	1ad3      	subs	r3, r2, r3
 800182a:	617b      	str	r3, [r7, #20]
	const uint8_t *max_heap = (uint8_t*) stack_limit;
 800182c:	697b      	ldr	r3, [r7, #20]
 800182e:	613b      	str	r3, [r7, #16]
	uint8_t *prev_heap_end;

	/* Initialize heap end at first call */
	if (NULL == __sbrk_heap_end) {
 8001830:	4b13      	ldr	r3, [pc, #76]	; (8001880 <_sbrk+0x64>)
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	2b00      	cmp	r3, #0
 8001836:	d102      	bne.n	800183e <_sbrk+0x22>
		__sbrk_heap_end = &_end;
 8001838:	4b11      	ldr	r3, [pc, #68]	; (8001880 <_sbrk+0x64>)
 800183a:	4a12      	ldr	r2, [pc, #72]	; (8001884 <_sbrk+0x68>)
 800183c:	601a      	str	r2, [r3, #0]
	}

	/* Protect heap from growing into the reserved MSP stack */
	if (__sbrk_heap_end + incr > max_heap) {
 800183e:	4b10      	ldr	r3, [pc, #64]	; (8001880 <_sbrk+0x64>)
 8001840:	681a      	ldr	r2, [r3, #0]
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	4413      	add	r3, r2
 8001846:	693a      	ldr	r2, [r7, #16]
 8001848:	429a      	cmp	r2, r3
 800184a:	d207      	bcs.n	800185c <_sbrk+0x40>
		errno = ENOMEM;
 800184c:	f006 f8ca 	bl	80079e4 <__errno>
 8001850:	4603      	mov	r3, r0
 8001852:	220c      	movs	r2, #12
 8001854:	601a      	str	r2, [r3, #0]
		return (void*) -1;
 8001856:	f04f 33ff 	mov.w	r3, #4294967295
 800185a:	e009      	b.n	8001870 <_sbrk+0x54>
	}

	prev_heap_end = __sbrk_heap_end;
 800185c:	4b08      	ldr	r3, [pc, #32]	; (8001880 <_sbrk+0x64>)
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	60fb      	str	r3, [r7, #12]
	__sbrk_heap_end += incr;
 8001862:	4b07      	ldr	r3, [pc, #28]	; (8001880 <_sbrk+0x64>)
 8001864:	681a      	ldr	r2, [r3, #0]
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	4413      	add	r3, r2
 800186a:	4a05      	ldr	r2, [pc, #20]	; (8001880 <_sbrk+0x64>)
 800186c:	6013      	str	r3, [r2, #0]

	return (void*) prev_heap_end;
 800186e:	68fb      	ldr	r3, [r7, #12]
}
 8001870:	4618      	mov	r0, r3
 8001872:	3718      	adds	r7, #24
 8001874:	46bd      	mov	sp, r7
 8001876:	bd80      	pop	{r7, pc}
 8001878:	20080000 	.word	0x20080000
 800187c:	00000400 	.word	0x00000400
 8001880:	20000334 	.word	0x20000334
 8001884:	200005a8 	.word	0x200005a8

08001888 <SystemInit>:
 *         Initialize the Embedded Flash Interface, the PLL and update the 
 *         SystemFrequency variable.
 * @param  None
 * @retval None
 */
void SystemInit(void) {
 8001888:	b480      	push	{r7}
 800188a:	af00      	add	r7, sp, #0
	/* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
	SCB->CPACR |= ((3UL << 10 * 2) | (3UL << 11 * 2)); /* set CP10 and CP11 Full Access */
 800188c:	4b15      	ldr	r3, [pc, #84]	; (80018e4 <SystemInit+0x5c>)
 800188e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001892:	4a14      	ldr	r2, [pc, #80]	; (80018e4 <SystemInit+0x5c>)
 8001894:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001898:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
	/* Reset the RCC clock configuration to the default reset state ------------*/
	/* Set HSION bit */
	RCC->CR |= (uint32_t) 0x00000001;
 800189c:	4b12      	ldr	r3, [pc, #72]	; (80018e8 <SystemInit+0x60>)
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	4a11      	ldr	r2, [pc, #68]	; (80018e8 <SystemInit+0x60>)
 80018a2:	f043 0301 	orr.w	r3, r3, #1
 80018a6:	6013      	str	r3, [r2, #0]

	/* Reset CFGR register */
	RCC->CFGR = 0x00000000;
 80018a8:	4b0f      	ldr	r3, [pc, #60]	; (80018e8 <SystemInit+0x60>)
 80018aa:	2200      	movs	r2, #0
 80018ac:	609a      	str	r2, [r3, #8]

	/* Reset HSEON, CSSON and PLLON bits */
	RCC->CR &= (uint32_t) 0xFEF6FFFF;
 80018ae:	4b0e      	ldr	r3, [pc, #56]	; (80018e8 <SystemInit+0x60>)
 80018b0:	681a      	ldr	r2, [r3, #0]
 80018b2:	490d      	ldr	r1, [pc, #52]	; (80018e8 <SystemInit+0x60>)
 80018b4:	4b0d      	ldr	r3, [pc, #52]	; (80018ec <SystemInit+0x64>)
 80018b6:	4013      	ands	r3, r2
 80018b8:	600b      	str	r3, [r1, #0]

	/* Reset PLLCFGR register */
	RCC->PLLCFGR = 0x24003010;
 80018ba:	4b0b      	ldr	r3, [pc, #44]	; (80018e8 <SystemInit+0x60>)
 80018bc:	4a0c      	ldr	r2, [pc, #48]	; (80018f0 <SystemInit+0x68>)
 80018be:	605a      	str	r2, [r3, #4]

	/* Reset HSEBYP bit */
	RCC->CR &= (uint32_t) 0xFFFBFFFF;
 80018c0:	4b09      	ldr	r3, [pc, #36]	; (80018e8 <SystemInit+0x60>)
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	4a08      	ldr	r2, [pc, #32]	; (80018e8 <SystemInit+0x60>)
 80018c6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80018ca:	6013      	str	r3, [r2, #0]

	/* Disable all interrupts */
	RCC->CIR = 0x00000000;
 80018cc:	4b06      	ldr	r3, [pc, #24]	; (80018e8 <SystemInit+0x60>)
 80018ce:	2200      	movs	r2, #0
 80018d0:	60da      	str	r2, [r3, #12]

	/* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
	SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80018d2:	4b04      	ldr	r3, [pc, #16]	; (80018e4 <SystemInit+0x5c>)
 80018d4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80018d8:	609a      	str	r2, [r3, #8]
#endif
}
 80018da:	bf00      	nop
 80018dc:	46bd      	mov	sp, r7
 80018de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e2:	4770      	bx	lr
 80018e4:	e000ed00 	.word	0xe000ed00
 80018e8:	40023800 	.word	0x40023800
 80018ec:	fef6ffff 	.word	0xfef6ffff
 80018f0:	24003010 	.word	0x24003010

080018f4 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim2;

/* TIM1 init function */
void MX_TIM1_Init(void) {
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b088      	sub	sp, #32
 80018f8:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM1_Init 0 */

	/* USER CODE END TIM1_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 80018fa:	f107 0310 	add.w	r3, r7, #16
 80018fe:	2200      	movs	r2, #0
 8001900:	601a      	str	r2, [r3, #0]
 8001902:	605a      	str	r2, [r3, #4]
 8001904:	609a      	str	r2, [r3, #8]
 8001906:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8001908:	1d3b      	adds	r3, r7, #4
 800190a:	2200      	movs	r2, #0
 800190c:	601a      	str	r2, [r3, #0]
 800190e:	605a      	str	r2, [r3, #4]
 8001910:	609a      	str	r2, [r3, #8]

	/* USER CODE BEGIN TIM1_Init 1 */

	/* USER CODE END TIM1_Init 1 */
	htim1.Instance = TIM1;
 8001912:	4b20      	ldr	r3, [pc, #128]	; (8001994 <MX_TIM1_Init+0xa0>)
 8001914:	4a20      	ldr	r2, [pc, #128]	; (8001998 <MX_TIM1_Init+0xa4>)
 8001916:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 10000 - 1;
 8001918:	4b1e      	ldr	r3, [pc, #120]	; (8001994 <MX_TIM1_Init+0xa0>)
 800191a:	f242 720f 	movw	r2, #9999	; 0x270f
 800191e:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001920:	4b1c      	ldr	r3, [pc, #112]	; (8001994 <MX_TIM1_Init+0xa0>)
 8001922:	2200      	movs	r2, #0
 8001924:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 0;
 8001926:	4b1b      	ldr	r3, [pc, #108]	; (8001994 <MX_TIM1_Init+0xa0>)
 8001928:	2200      	movs	r2, #0
 800192a:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV2;
 800192c:	4b19      	ldr	r3, [pc, #100]	; (8001994 <MX_TIM1_Init+0xa0>)
 800192e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001932:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 8001934:	4b17      	ldr	r3, [pc, #92]	; (8001994 <MX_TIM1_Init+0xa0>)
 8001936:	2200      	movs	r2, #0
 8001938:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800193a:	4b16      	ldr	r3, [pc, #88]	; (8001994 <MX_TIM1_Init+0xa0>)
 800193c:	2200      	movs	r2, #0
 800193e:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim1) != HAL_OK) {
 8001940:	4814      	ldr	r0, [pc, #80]	; (8001994 <MX_TIM1_Init+0xa0>)
 8001942:	f004 f9b5 	bl	8005cb0 <HAL_TIM_Base_Init>
 8001946:	4603      	mov	r3, r0
 8001948:	2b00      	cmp	r3, #0
 800194a:	d001      	beq.n	8001950 <MX_TIM1_Init+0x5c>
		Error_Handler();
 800194c:	f7ff fde2 	bl	8001514 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001950:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001954:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK) {
 8001956:	f107 0310 	add.w	r3, r7, #16
 800195a:	4619      	mov	r1, r3
 800195c:	480d      	ldr	r0, [pc, #52]	; (8001994 <MX_TIM1_Init+0xa0>)
 800195e:	f004 fb97 	bl	8006090 <HAL_TIM_ConfigClockSource>
 8001962:	4603      	mov	r3, r0
 8001964:	2b00      	cmp	r3, #0
 8001966:	d001      	beq.n	800196c <MX_TIM1_Init+0x78>
		Error_Handler();
 8001968:	f7ff fdd4 	bl	8001514 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800196c:	2300      	movs	r3, #0
 800196e:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001970:	2300      	movs	r3, #0
 8001972:	60bb      	str	r3, [r7, #8]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001974:	2300      	movs	r3, #0
 8001976:	60fb      	str	r3, [r7, #12]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig)
 8001978:	1d3b      	adds	r3, r7, #4
 800197a:	4619      	mov	r1, r3
 800197c:	4805      	ldr	r0, [pc, #20]	; (8001994 <MX_TIM1_Init+0xa0>)
 800197e:	f004 fdb9 	bl	80064f4 <HAL_TIMEx_MasterConfigSynchronization>
 8001982:	4603      	mov	r3, r0
 8001984:	2b00      	cmp	r3, #0
 8001986:	d001      	beq.n	800198c <MX_TIM1_Init+0x98>
			!= HAL_OK) {
		Error_Handler();
 8001988:	f7ff fdc4 	bl	8001514 <Error_Handler>
	}
	/* USER CODE BEGIN TIM1_Init 2 */

	/* USER CODE END TIM1_Init 2 */

}
 800198c:	bf00      	nop
 800198e:	3720      	adds	r7, #32
 8001990:	46bd      	mov	sp, r7
 8001992:	bd80      	pop	{r7, pc}
 8001994:	20000338 	.word	0x20000338
 8001998:	40010000 	.word	0x40010000

0800199c <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void) {
 800199c:	b580      	push	{r7, lr}
 800199e:	b088      	sub	sp, #32
 80019a0:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 80019a2:	f107 0310 	add.w	r3, r7, #16
 80019a6:	2200      	movs	r2, #0
 80019a8:	601a      	str	r2, [r3, #0]
 80019aa:	605a      	str	r2, [r3, #4]
 80019ac:	609a      	str	r2, [r3, #8]
 80019ae:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80019b0:	1d3b      	adds	r3, r7, #4
 80019b2:	2200      	movs	r2, #0
 80019b4:	601a      	str	r2, [r3, #0]
 80019b6:	605a      	str	r2, [r3, #4]
 80019b8:	609a      	str	r2, [r3, #8]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 80019ba:	4b1e      	ldr	r3, [pc, #120]	; (8001a34 <MX_TIM2_Init+0x98>)
 80019bc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80019c0:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 1000 - 1;
 80019c2:	4b1c      	ldr	r3, [pc, #112]	; (8001a34 <MX_TIM2_Init+0x98>)
 80019c4:	f240 32e7 	movw	r2, #999	; 0x3e7
 80019c8:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019ca:	4b1a      	ldr	r3, [pc, #104]	; (8001a34 <MX_TIM2_Init+0x98>)
 80019cc:	2200      	movs	r2, #0
 80019ce:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 100 - 1;
 80019d0:	4b18      	ldr	r3, [pc, #96]	; (8001a34 <MX_TIM2_Init+0x98>)
 80019d2:	2263      	movs	r2, #99	; 0x63
 80019d4:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80019d6:	4b17      	ldr	r3, [pc, #92]	; (8001a34 <MX_TIM2_Init+0x98>)
 80019d8:	2200      	movs	r2, #0
 80019da:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80019dc:	4b15      	ldr	r3, [pc, #84]	; (8001a34 <MX_TIM2_Init+0x98>)
 80019de:	2200      	movs	r2, #0
 80019e0:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK) {
 80019e2:	4814      	ldr	r0, [pc, #80]	; (8001a34 <MX_TIM2_Init+0x98>)
 80019e4:	f004 f964 	bl	8005cb0 <HAL_TIM_Base_Init>
 80019e8:	4603      	mov	r3, r0
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d001      	beq.n	80019f2 <MX_TIM2_Init+0x56>
		Error_Handler();
 80019ee:	f7ff fd91 	bl	8001514 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80019f2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80019f6:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK) {
 80019f8:	f107 0310 	add.w	r3, r7, #16
 80019fc:	4619      	mov	r1, r3
 80019fe:	480d      	ldr	r0, [pc, #52]	; (8001a34 <MX_TIM2_Init+0x98>)
 8001a00:	f004 fb46 	bl	8006090 <HAL_TIM_ConfigClockSource>
 8001a04:	4603      	mov	r3, r0
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d001      	beq.n	8001a0e <MX_TIM2_Init+0x72>
		Error_Handler();
 8001a0a:	f7ff fd83 	bl	8001514 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a0e:	2300      	movs	r3, #0
 8001a10:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a12:	2300      	movs	r3, #0
 8001a14:	60fb      	str	r3, [r7, #12]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig)
 8001a16:	1d3b      	adds	r3, r7, #4
 8001a18:	4619      	mov	r1, r3
 8001a1a:	4806      	ldr	r0, [pc, #24]	; (8001a34 <MX_TIM2_Init+0x98>)
 8001a1c:	f004 fd6a 	bl	80064f4 <HAL_TIMEx_MasterConfigSynchronization>
 8001a20:	4603      	mov	r3, r0
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d001      	beq.n	8001a2a <MX_TIM2_Init+0x8e>
			!= HAL_OK) {
		Error_Handler();
 8001a26:	f7ff fd75 	bl	8001514 <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */

}
 8001a2a:	bf00      	nop
 8001a2c:	3720      	adds	r7, #32
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	bd80      	pop	{r7, pc}
 8001a32:	bf00      	nop
 8001a34:	20000384 	.word	0x20000384

08001a38 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *tim_baseHandle) {
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b084      	sub	sp, #16
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]

	if (tim_baseHandle->Instance == TIM1) {
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	4a16      	ldr	r2, [pc, #88]	; (8001aa0 <HAL_TIM_Base_MspInit+0x68>)
 8001a46:	4293      	cmp	r3, r2
 8001a48:	d10c      	bne.n	8001a64 <HAL_TIM_Base_MspInit+0x2c>
		/* USER CODE BEGIN TIM1_MspInit 0 */

		/* USER CODE END TIM1_MspInit 0 */
		/* TIM1 clock enable */
		__HAL_RCC_TIM1_CLK_ENABLE();
 8001a4a:	4b16      	ldr	r3, [pc, #88]	; (8001aa4 <HAL_TIM_Base_MspInit+0x6c>)
 8001a4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a4e:	4a15      	ldr	r2, [pc, #84]	; (8001aa4 <HAL_TIM_Base_MspInit+0x6c>)
 8001a50:	f043 0301 	orr.w	r3, r3, #1
 8001a54:	6453      	str	r3, [r2, #68]	; 0x44
 8001a56:	4b13      	ldr	r3, [pc, #76]	; (8001aa4 <HAL_TIM_Base_MspInit+0x6c>)
 8001a58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a5a:	f003 0301 	and.w	r3, r3, #1
 8001a5e:	60fb      	str	r3, [r7, #12]
 8001a60:	68fb      	ldr	r3, [r7, #12]
		HAL_NVIC_EnableIRQ(TIM2_IRQn);
		/* USER CODE BEGIN TIM2_MspInit 1 */

		/* USER CODE END TIM2_MspInit 1 */
	}
}
 8001a62:	e018      	b.n	8001a96 <HAL_TIM_Base_MspInit+0x5e>
	} else if (tim_baseHandle->Instance == TIM2) {
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001a6c:	d113      	bne.n	8001a96 <HAL_TIM_Base_MspInit+0x5e>
		__HAL_RCC_TIM2_CLK_ENABLE();
 8001a6e:	4b0d      	ldr	r3, [pc, #52]	; (8001aa4 <HAL_TIM_Base_MspInit+0x6c>)
 8001a70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a72:	4a0c      	ldr	r2, [pc, #48]	; (8001aa4 <HAL_TIM_Base_MspInit+0x6c>)
 8001a74:	f043 0301 	orr.w	r3, r3, #1
 8001a78:	6413      	str	r3, [r2, #64]	; 0x40
 8001a7a:	4b0a      	ldr	r3, [pc, #40]	; (8001aa4 <HAL_TIM_Base_MspInit+0x6c>)
 8001a7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a7e:	f003 0301 	and.w	r3, r3, #1
 8001a82:	60bb      	str	r3, [r7, #8]
 8001a84:	68bb      	ldr	r3, [r7, #8]
		HAL_NVIC_SetPriority(TIM2_IRQn, 1, 0);
 8001a86:	2200      	movs	r2, #0
 8001a88:	2101      	movs	r1, #1
 8001a8a:	201c      	movs	r0, #28
 8001a8c:	f001 fd09 	bl	80034a2 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001a90:	201c      	movs	r0, #28
 8001a92:	f001 fd22 	bl	80034da <HAL_NVIC_EnableIRQ>
}
 8001a96:	bf00      	nop
 8001a98:	3710      	adds	r7, #16
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	bd80      	pop	{r7, pc}
 8001a9e:	bf00      	nop
 8001aa0:	40010000 	.word	0x40010000
 8001aa4:	40023800 	.word	0x40023800

08001aa8 <MX_USART3_UART_Init>:

UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void) {
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	af00      	add	r7, sp, #0
	/* USER CODE END USART3_Init 0 */

	/* USER CODE BEGIN USART3_Init 1 */

	/* USER CODE END USART3_Init 1 */
	huart3.Instance = USART3;
 8001aac:	4b14      	ldr	r3, [pc, #80]	; (8001b00 <MX_USART3_UART_Init+0x58>)
 8001aae:	4a15      	ldr	r2, [pc, #84]	; (8001b04 <MX_USART3_UART_Init+0x5c>)
 8001ab0:	601a      	str	r2, [r3, #0]
	huart3.Init.BaudRate = 115200;
 8001ab2:	4b13      	ldr	r3, [pc, #76]	; (8001b00 <MX_USART3_UART_Init+0x58>)
 8001ab4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001ab8:	605a      	str	r2, [r3, #4]
	huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001aba:	4b11      	ldr	r3, [pc, #68]	; (8001b00 <MX_USART3_UART_Init+0x58>)
 8001abc:	2200      	movs	r2, #0
 8001abe:	609a      	str	r2, [r3, #8]
	huart3.Init.StopBits = UART_STOPBITS_1;
 8001ac0:	4b0f      	ldr	r3, [pc, #60]	; (8001b00 <MX_USART3_UART_Init+0x58>)
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	60da      	str	r2, [r3, #12]
	huart3.Init.Parity = UART_PARITY_NONE;
 8001ac6:	4b0e      	ldr	r3, [pc, #56]	; (8001b00 <MX_USART3_UART_Init+0x58>)
 8001ac8:	2200      	movs	r2, #0
 8001aca:	611a      	str	r2, [r3, #16]
	huart3.Init.Mode = UART_MODE_TX_RX;
 8001acc:	4b0c      	ldr	r3, [pc, #48]	; (8001b00 <MX_USART3_UART_Init+0x58>)
 8001ace:	220c      	movs	r2, #12
 8001ad0:	615a      	str	r2, [r3, #20]
	huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ad2:	4b0b      	ldr	r3, [pc, #44]	; (8001b00 <MX_USART3_UART_Init+0x58>)
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	619a      	str	r2, [r3, #24]
	huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ad8:	4b09      	ldr	r3, [pc, #36]	; (8001b00 <MX_USART3_UART_Init+0x58>)
 8001ada:	2200      	movs	r2, #0
 8001adc:	61da      	str	r2, [r3, #28]
	huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001ade:	4b08      	ldr	r3, [pc, #32]	; (8001b00 <MX_USART3_UART_Init+0x58>)
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	621a      	str	r2, [r3, #32]
	huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001ae4:	4b06      	ldr	r3, [pc, #24]	; (8001b00 <MX_USART3_UART_Init+0x58>)
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_UART_Init(&huart3) != HAL_OK) {
 8001aea:	4805      	ldr	r0, [pc, #20]	; (8001b00 <MX_USART3_UART_Init+0x58>)
 8001aec:	f004 fdae 	bl	800664c <HAL_UART_Init>
 8001af0:	4603      	mov	r3, r0
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d001      	beq.n	8001afa <MX_USART3_UART_Init+0x52>
		Error_Handler();
 8001af6:	f7ff fd0d 	bl	8001514 <Error_Handler>
	}
	/* USER CODE BEGIN USART3_Init 2 */

	/* USER CODE END USART3_Init 2 */

}
 8001afa:	bf00      	nop
 8001afc:	bd80      	pop	{r7, pc}
 8001afe:	bf00      	nop
 8001b00:	200003d0 	.word	0x200003d0
 8001b04:	40004800 	.word	0x40004800

08001b08 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef *uartHandle) {
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	b08a      	sub	sp, #40	; 0x28
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	6078      	str	r0, [r7, #4]

	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8001b10:	f107 0314 	add.w	r3, r7, #20
 8001b14:	2200      	movs	r2, #0
 8001b16:	601a      	str	r2, [r3, #0]
 8001b18:	605a      	str	r2, [r3, #4]
 8001b1a:	609a      	str	r2, [r3, #8]
 8001b1c:	60da      	str	r2, [r3, #12]
 8001b1e:	611a      	str	r2, [r3, #16]
	if (uartHandle->Instance == USART3) {
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	4a17      	ldr	r2, [pc, #92]	; (8001b84 <HAL_UART_MspInit+0x7c>)
 8001b26:	4293      	cmp	r3, r2
 8001b28:	d128      	bne.n	8001b7c <HAL_UART_MspInit+0x74>
		/* USER CODE BEGIN USART3_MspInit 0 */

		/* USER CODE END USART3_MspInit 0 */
		/* USART3 clock enable */
		__HAL_RCC_USART3_CLK_ENABLE();
 8001b2a:	4b17      	ldr	r3, [pc, #92]	; (8001b88 <HAL_UART_MspInit+0x80>)
 8001b2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b2e:	4a16      	ldr	r2, [pc, #88]	; (8001b88 <HAL_UART_MspInit+0x80>)
 8001b30:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001b34:	6413      	str	r3, [r2, #64]	; 0x40
 8001b36:	4b14      	ldr	r3, [pc, #80]	; (8001b88 <HAL_UART_MspInit+0x80>)
 8001b38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b3a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001b3e:	613b      	str	r3, [r7, #16]
 8001b40:	693b      	ldr	r3, [r7, #16]

		__HAL_RCC_GPIOD_CLK_ENABLE();
 8001b42:	4b11      	ldr	r3, [pc, #68]	; (8001b88 <HAL_UART_MspInit+0x80>)
 8001b44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b46:	4a10      	ldr	r2, [pc, #64]	; (8001b88 <HAL_UART_MspInit+0x80>)
 8001b48:	f043 0308 	orr.w	r3, r3, #8
 8001b4c:	6313      	str	r3, [r2, #48]	; 0x30
 8001b4e:	4b0e      	ldr	r3, [pc, #56]	; (8001b88 <HAL_UART_MspInit+0x80>)
 8001b50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b52:	f003 0308 	and.w	r3, r3, #8
 8001b56:	60fb      	str	r3, [r7, #12]
 8001b58:	68fb      	ldr	r3, [r7, #12]
		/**USART3 GPIO Configuration
		 PD8     ------> USART3_TX
		 PD9     ------> USART3_RX
		 */
		GPIO_InitStruct.Pin = STLK_RX_Pin | STLK_TX_Pin;
 8001b5a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001b5e:	617b      	str	r3, [r7, #20]
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b60:	2302      	movs	r3, #2
 8001b62:	61bb      	str	r3, [r7, #24]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b64:	2300      	movs	r3, #0
 8001b66:	61fb      	str	r3, [r7, #28]
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b68:	2303      	movs	r3, #3
 8001b6a:	623b      	str	r3, [r7, #32]
		GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001b6c:	2307      	movs	r3, #7
 8001b6e:	627b      	str	r3, [r7, #36]	; 0x24
		HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001b70:	f107 0314 	add.w	r3, r7, #20
 8001b74:	4619      	mov	r1, r3
 8001b76:	4805      	ldr	r0, [pc, #20]	; (8001b8c <HAL_UART_MspInit+0x84>)
 8001b78:	f001 fcca 	bl	8003510 <HAL_GPIO_Init>

		/* USER CODE BEGIN USART3_MspInit 1 */

		/* USER CODE END USART3_MspInit 1 */
	}
}
 8001b7c:	bf00      	nop
 8001b7e:	3728      	adds	r7, #40	; 0x28
 8001b80:	46bd      	mov	sp, r7
 8001b82:	bd80      	pop	{r7, pc}
 8001b84:	40004800 	.word	0x40004800
 8001b88:	40023800 	.word	0x40023800
 8001b8c:	40020c00 	.word	0x40020c00

08001b90 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001b90:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001bc8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001b94:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001b96:	e003      	b.n	8001ba0 <LoopCopyDataInit>

08001b98 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001b98:	4b0c      	ldr	r3, [pc, #48]	; (8001bcc <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001b9a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001b9c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001b9e:	3104      	adds	r1, #4

08001ba0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001ba0:	480b      	ldr	r0, [pc, #44]	; (8001bd0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001ba2:	4b0c      	ldr	r3, [pc, #48]	; (8001bd4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001ba4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001ba6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001ba8:	d3f6      	bcc.n	8001b98 <CopyDataInit>
  ldr  r2, =_sbss
 8001baa:	4a0b      	ldr	r2, [pc, #44]	; (8001bd8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001bac:	e002      	b.n	8001bb4 <LoopFillZerobss>

08001bae <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001bae:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001bb0:	f842 3b04 	str.w	r3, [r2], #4

08001bb4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001bb4:	4b09      	ldr	r3, [pc, #36]	; (8001bdc <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001bb6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001bb8:	d3f9      	bcc.n	8001bae <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001bba:	f7ff fe65 	bl	8001888 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001bbe:	f005 ff17 	bl	80079f0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001bc2:	f7fe ffc5 	bl	8000b50 <main>
  bx  lr    
 8001bc6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001bc8:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 8001bcc:	08031750 	.word	0x08031750
  ldr  r0, =_sdata
 8001bd0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001bd4:	200001f4 	.word	0x200001f4
  ldr  r2, =_sbss
 8001bd8:	200001f4 	.word	0x200001f4
  ldr  r3, = _ebss
 8001bdc:	200005a4 	.word	0x200005a4

08001be0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001be0:	e7fe      	b.n	8001be0 <ADC_IRQHandler>

08001be2 <ILI9341_Draw_Filled_Circle>:
	}
}

/*Draw filled circle at X,Y location with specified radius and colour. X and Y represent circles center */
void ILI9341_Draw_Filled_Circle(uint16_t X, uint16_t Y, uint16_t Radius,
		uint16_t Colour) {
 8001be2:	b590      	push	{r4, r7, lr}
 8001be4:	b08b      	sub	sp, #44	; 0x2c
 8001be6:	af00      	add	r7, sp, #0
 8001be8:	4604      	mov	r4, r0
 8001bea:	4608      	mov	r0, r1
 8001bec:	4611      	mov	r1, r2
 8001bee:	461a      	mov	r2, r3
 8001bf0:	4623      	mov	r3, r4
 8001bf2:	80fb      	strh	r3, [r7, #6]
 8001bf4:	4603      	mov	r3, r0
 8001bf6:	80bb      	strh	r3, [r7, #4]
 8001bf8:	460b      	mov	r3, r1
 8001bfa:	807b      	strh	r3, [r7, #2]
 8001bfc:	4613      	mov	r3, r2
 8001bfe:	803b      	strh	r3, [r7, #0]

	int x = Radius;
 8001c00:	887b      	ldrh	r3, [r7, #2]
 8001c02:	627b      	str	r3, [r7, #36]	; 0x24
	int y = 0;
 8001c04:	2300      	movs	r3, #0
 8001c06:	623b      	str	r3, [r7, #32]
	int xChange = 1 - (Radius << 1);
 8001c08:	887b      	ldrh	r3, [r7, #2]
 8001c0a:	005b      	lsls	r3, r3, #1
 8001c0c:	f1c3 0301 	rsb	r3, r3, #1
 8001c10:	61fb      	str	r3, [r7, #28]
	int yChange = 0;
 8001c12:	2300      	movs	r3, #0
 8001c14:	61bb      	str	r3, [r7, #24]
	int radiusError = 0;
 8001c16:	2300      	movs	r3, #0
 8001c18:	617b      	str	r3, [r7, #20]

	while (x >= y) {
 8001c1a:	e061      	b.n	8001ce0 <ILI9341_Draw_Filled_Circle+0xfe>
		for (int i = X - x; i <= X + x; i++) {
 8001c1c:	88fa      	ldrh	r2, [r7, #6]
 8001c1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c20:	1ad3      	subs	r3, r2, r3
 8001c22:	613b      	str	r3, [r7, #16]
 8001c24:	e018      	b.n	8001c58 <ILI9341_Draw_Filled_Circle+0x76>
			ILI9341_Draw_Pixel(i, Y + y, Colour);
 8001c26:	693b      	ldr	r3, [r7, #16]
 8001c28:	b298      	uxth	r0, r3
 8001c2a:	6a3b      	ldr	r3, [r7, #32]
 8001c2c:	b29a      	uxth	r2, r3
 8001c2e:	88bb      	ldrh	r3, [r7, #4]
 8001c30:	4413      	add	r3, r2
 8001c32:	b29b      	uxth	r3, r3
 8001c34:	883a      	ldrh	r2, [r7, #0]
 8001c36:	4619      	mov	r1, r3
 8001c38:	f000 fdd4 	bl	80027e4 <ILI9341_Draw_Pixel>
			ILI9341_Draw_Pixel(i, Y - y, Colour);
 8001c3c:	693b      	ldr	r3, [r7, #16]
 8001c3e:	b298      	uxth	r0, r3
 8001c40:	6a3b      	ldr	r3, [r7, #32]
 8001c42:	b29b      	uxth	r3, r3
 8001c44:	88ba      	ldrh	r2, [r7, #4]
 8001c46:	1ad3      	subs	r3, r2, r3
 8001c48:	b29b      	uxth	r3, r3
 8001c4a:	883a      	ldrh	r2, [r7, #0]
 8001c4c:	4619      	mov	r1, r3
 8001c4e:	f000 fdc9 	bl	80027e4 <ILI9341_Draw_Pixel>
		for (int i = X - x; i <= X + x; i++) {
 8001c52:	693b      	ldr	r3, [r7, #16]
 8001c54:	3301      	adds	r3, #1
 8001c56:	613b      	str	r3, [r7, #16]
 8001c58:	88fa      	ldrh	r2, [r7, #6]
 8001c5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c5c:	4413      	add	r3, r2
 8001c5e:	693a      	ldr	r2, [r7, #16]
 8001c60:	429a      	cmp	r2, r3
 8001c62:	dde0      	ble.n	8001c26 <ILI9341_Draw_Filled_Circle+0x44>
		}
		for (int i = X - y; i <= X + y; i++) {
 8001c64:	88fa      	ldrh	r2, [r7, #6]
 8001c66:	6a3b      	ldr	r3, [r7, #32]
 8001c68:	1ad3      	subs	r3, r2, r3
 8001c6a:	60fb      	str	r3, [r7, #12]
 8001c6c:	e018      	b.n	8001ca0 <ILI9341_Draw_Filled_Circle+0xbe>
			ILI9341_Draw_Pixel(i, Y + x, Colour);
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	b298      	uxth	r0, r3
 8001c72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c74:	b29a      	uxth	r2, r3
 8001c76:	88bb      	ldrh	r3, [r7, #4]
 8001c78:	4413      	add	r3, r2
 8001c7a:	b29b      	uxth	r3, r3
 8001c7c:	883a      	ldrh	r2, [r7, #0]
 8001c7e:	4619      	mov	r1, r3
 8001c80:	f000 fdb0 	bl	80027e4 <ILI9341_Draw_Pixel>
			ILI9341_Draw_Pixel(i, Y - x, Colour);
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	b298      	uxth	r0, r3
 8001c88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c8a:	b29b      	uxth	r3, r3
 8001c8c:	88ba      	ldrh	r2, [r7, #4]
 8001c8e:	1ad3      	subs	r3, r2, r3
 8001c90:	b29b      	uxth	r3, r3
 8001c92:	883a      	ldrh	r2, [r7, #0]
 8001c94:	4619      	mov	r1, r3
 8001c96:	f000 fda5 	bl	80027e4 <ILI9341_Draw_Pixel>
		for (int i = X - y; i <= X + y; i++) {
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	3301      	adds	r3, #1
 8001c9e:	60fb      	str	r3, [r7, #12]
 8001ca0:	88fa      	ldrh	r2, [r7, #6]
 8001ca2:	6a3b      	ldr	r3, [r7, #32]
 8001ca4:	4413      	add	r3, r2
 8001ca6:	68fa      	ldr	r2, [r7, #12]
 8001ca8:	429a      	cmp	r2, r3
 8001caa:	dde0      	ble.n	8001c6e <ILI9341_Draw_Filled_Circle+0x8c>
		}

		y++;
 8001cac:	6a3b      	ldr	r3, [r7, #32]
 8001cae:	3301      	adds	r3, #1
 8001cb0:	623b      	str	r3, [r7, #32]
		radiusError += yChange;
 8001cb2:	697a      	ldr	r2, [r7, #20]
 8001cb4:	69bb      	ldr	r3, [r7, #24]
 8001cb6:	4413      	add	r3, r2
 8001cb8:	617b      	str	r3, [r7, #20]
		yChange += 2;
 8001cba:	69bb      	ldr	r3, [r7, #24]
 8001cbc:	3302      	adds	r3, #2
 8001cbe:	61bb      	str	r3, [r7, #24]
		if (((radiusError << 1) + xChange) > 0) {
 8001cc0:	697b      	ldr	r3, [r7, #20]
 8001cc2:	005a      	lsls	r2, r3, #1
 8001cc4:	69fb      	ldr	r3, [r7, #28]
 8001cc6:	4413      	add	r3, r2
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	dd09      	ble.n	8001ce0 <ILI9341_Draw_Filled_Circle+0xfe>
			x--;
 8001ccc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cce:	3b01      	subs	r3, #1
 8001cd0:	627b      	str	r3, [r7, #36]	; 0x24
			radiusError += xChange;
 8001cd2:	697a      	ldr	r2, [r7, #20]
 8001cd4:	69fb      	ldr	r3, [r7, #28]
 8001cd6:	4413      	add	r3, r2
 8001cd8:	617b      	str	r3, [r7, #20]
			xChange += 2;
 8001cda:	69fb      	ldr	r3, [r7, #28]
 8001cdc:	3302      	adds	r3, #2
 8001cde:	61fb      	str	r3, [r7, #28]
	while (x >= y) {
 8001ce0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ce2:	6a3b      	ldr	r3, [r7, #32]
 8001ce4:	429a      	cmp	r2, r3
 8001ce6:	da99      	bge.n	8001c1c <ILI9341_Draw_Filled_Circle+0x3a>
		}
	}
	//Really slow implementation, will require future overhaul
	//TODO:	https://stackoverflow.com/questions/1201200/fast-algorithm-for-drawing-filled-circles	
}
 8001ce8:	bf00      	nop
 8001cea:	bf00      	nop
 8001cec:	372c      	adds	r7, #44	; 0x2c
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	bd90      	pop	{r4, r7, pc}
	...

08001cf4 <ILI9341_Draw_Char>:
}

/*Draws a character (fonts imported from fonts.h) at X,Y location with specified font colour, size and Background colour*/
/*See fonts.h implementation of font on what is required for changing to a different font when switching fonts libraries*/
void ILI9341_Draw_Char(char Character, uint8_t X, uint8_t Y, uint16_t Colour,
		uint16_t Size, uint16_t Background_Colour) {
 8001cf4:	b590      	push	{r4, r7, lr}
 8001cf6:	b089      	sub	sp, #36	; 0x24
 8001cf8:	af02      	add	r7, sp, #8
 8001cfa:	4604      	mov	r4, r0
 8001cfc:	4608      	mov	r0, r1
 8001cfe:	4611      	mov	r1, r2
 8001d00:	461a      	mov	r2, r3
 8001d02:	4623      	mov	r3, r4
 8001d04:	71fb      	strb	r3, [r7, #7]
 8001d06:	4603      	mov	r3, r0
 8001d08:	71bb      	strb	r3, [r7, #6]
 8001d0a:	460b      	mov	r3, r1
 8001d0c:	717b      	strb	r3, [r7, #5]
 8001d0e:	4613      	mov	r3, r2
 8001d10:	807b      	strh	r3, [r7, #2]
	uint8_t function_char;
	uint8_t i, j;

	function_char = Character;
 8001d12:	79fb      	ldrb	r3, [r7, #7]
 8001d14:	75fb      	strb	r3, [r7, #23]

	if (function_char < ' ') {
 8001d16:	7dfb      	ldrb	r3, [r7, #23]
 8001d18:	2b1f      	cmp	r3, #31
 8001d1a:	d802      	bhi.n	8001d22 <ILI9341_Draw_Char+0x2e>
		Character = 0;
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	71fb      	strb	r3, [r7, #7]
 8001d20:	e002      	b.n	8001d28 <ILI9341_Draw_Char+0x34>
	} else {
		function_char -= 32;
 8001d22:	7dfb      	ldrb	r3, [r7, #23]
 8001d24:	3b20      	subs	r3, #32
 8001d26:	75fb      	strb	r3, [r7, #23]
	}

	char temp[CHAR_WIDTH];
	for (uint8_t k = 0; k < CHAR_WIDTH; k++) {
 8001d28:	2300      	movs	r3, #0
 8001d2a:	753b      	strb	r3, [r7, #20]
 8001d2c:	e012      	b.n	8001d54 <ILI9341_Draw_Char+0x60>
		temp[k] = font[function_char][k];
 8001d2e:	7dfa      	ldrb	r2, [r7, #23]
 8001d30:	7d38      	ldrb	r0, [r7, #20]
 8001d32:	7d39      	ldrb	r1, [r7, #20]
 8001d34:	4c3b      	ldr	r4, [pc, #236]	; (8001e24 <ILI9341_Draw_Char+0x130>)
 8001d36:	4613      	mov	r3, r2
 8001d38:	005b      	lsls	r3, r3, #1
 8001d3a:	4413      	add	r3, r2
 8001d3c:	005b      	lsls	r3, r3, #1
 8001d3e:	4423      	add	r3, r4
 8001d40:	4403      	add	r3, r0
 8001d42:	781a      	ldrb	r2, [r3, #0]
 8001d44:	f101 0318 	add.w	r3, r1, #24
 8001d48:	443b      	add	r3, r7
 8001d4a:	f803 2c0c 	strb.w	r2, [r3, #-12]
	for (uint8_t k = 0; k < CHAR_WIDTH; k++) {
 8001d4e:	7d3b      	ldrb	r3, [r7, #20]
 8001d50:	3301      	adds	r3, #1
 8001d52:	753b      	strb	r3, [r7, #20]
 8001d54:	7d3b      	ldrb	r3, [r7, #20]
 8001d56:	2b05      	cmp	r3, #5
 8001d58:	d9e9      	bls.n	8001d2e <ILI9341_Draw_Char+0x3a>
	}

	// Draw pixels
	ILI9341_Draw_Rectangle(X, Y, CHAR_WIDTH * Size, CHAR_HEIGHT * Size,
 8001d5a:	79bb      	ldrb	r3, [r7, #6]
 8001d5c:	b298      	uxth	r0, r3
 8001d5e:	797b      	ldrb	r3, [r7, #5]
 8001d60:	b299      	uxth	r1, r3
 8001d62:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001d64:	461a      	mov	r2, r3
 8001d66:	0052      	lsls	r2, r2, #1
 8001d68:	4413      	add	r3, r2
 8001d6a:	005b      	lsls	r3, r3, #1
 8001d6c:	b29a      	uxth	r2, r3
 8001d6e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001d70:	00db      	lsls	r3, r3, #3
 8001d72:	b29c      	uxth	r4, r3
 8001d74:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8001d76:	9300      	str	r3, [sp, #0]
 8001d78:	4623      	mov	r3, r4
 8001d7a:	f000 fe0d 	bl	8002998 <ILI9341_Draw_Rectangle>
			Background_Colour);
	for (j = 0; j < CHAR_WIDTH; j++) {
 8001d7e:	2300      	movs	r3, #0
 8001d80:	757b      	strb	r3, [r7, #21]
 8001d82:	e047      	b.n	8001e14 <ILI9341_Draw_Char+0x120>
		for (i = 0; i < CHAR_HEIGHT; i++) {
 8001d84:	2300      	movs	r3, #0
 8001d86:	75bb      	strb	r3, [r7, #22]
 8001d88:	e03e      	b.n	8001e08 <ILI9341_Draw_Char+0x114>
			if (temp[j] & (1 << i)) {
 8001d8a:	7d7b      	ldrb	r3, [r7, #21]
 8001d8c:	3318      	adds	r3, #24
 8001d8e:	443b      	add	r3, r7
 8001d90:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8001d94:	461a      	mov	r2, r3
 8001d96:	7dbb      	ldrb	r3, [r7, #22]
 8001d98:	fa42 f303 	asr.w	r3, r2, r3
 8001d9c:	f003 0301 	and.w	r3, r3, #1
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d02e      	beq.n	8001e02 <ILI9341_Draw_Char+0x10e>
				if (Size == 1) {
 8001da4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001da6:	2b01      	cmp	r3, #1
 8001da8:	d110      	bne.n	8001dcc <ILI9341_Draw_Char+0xd8>
					ILI9341_Draw_Pixel(X + j, Y + i, Colour);
 8001daa:	79bb      	ldrb	r3, [r7, #6]
 8001dac:	b29a      	uxth	r2, r3
 8001dae:	7d7b      	ldrb	r3, [r7, #21]
 8001db0:	b29b      	uxth	r3, r3
 8001db2:	4413      	add	r3, r2
 8001db4:	b298      	uxth	r0, r3
 8001db6:	797b      	ldrb	r3, [r7, #5]
 8001db8:	b29a      	uxth	r2, r3
 8001dba:	7dbb      	ldrb	r3, [r7, #22]
 8001dbc:	b29b      	uxth	r3, r3
 8001dbe:	4413      	add	r3, r2
 8001dc0:	b29b      	uxth	r3, r3
 8001dc2:	887a      	ldrh	r2, [r7, #2]
 8001dc4:	4619      	mov	r1, r3
 8001dc6:	f000 fd0d 	bl	80027e4 <ILI9341_Draw_Pixel>
 8001dca:	e01a      	b.n	8001e02 <ILI9341_Draw_Char+0x10e>
				} else {
					ILI9341_Draw_Rectangle(X + (j * Size), Y + (i * Size), Size,
 8001dcc:	79bb      	ldrb	r3, [r7, #6]
 8001dce:	b29a      	uxth	r2, r3
 8001dd0:	7d7b      	ldrb	r3, [r7, #21]
 8001dd2:	b29b      	uxth	r3, r3
 8001dd4:	8d39      	ldrh	r1, [r7, #40]	; 0x28
 8001dd6:	fb11 f303 	smulbb	r3, r1, r3
 8001dda:	b29b      	uxth	r3, r3
 8001ddc:	4413      	add	r3, r2
 8001dde:	b298      	uxth	r0, r3
 8001de0:	797b      	ldrb	r3, [r7, #5]
 8001de2:	b29a      	uxth	r2, r3
 8001de4:	7dbb      	ldrb	r3, [r7, #22]
 8001de6:	b29b      	uxth	r3, r3
 8001de8:	8d39      	ldrh	r1, [r7, #40]	; 0x28
 8001dea:	fb11 f303 	smulbb	r3, r1, r3
 8001dee:	b29b      	uxth	r3, r3
 8001df0:	4413      	add	r3, r2
 8001df2:	b299      	uxth	r1, r3
 8001df4:	8d3c      	ldrh	r4, [r7, #40]	; 0x28
 8001df6:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001df8:	887b      	ldrh	r3, [r7, #2]
 8001dfa:	9300      	str	r3, [sp, #0]
 8001dfc:	4623      	mov	r3, r4
 8001dfe:	f000 fdcb 	bl	8002998 <ILI9341_Draw_Rectangle>
		for (i = 0; i < CHAR_HEIGHT; i++) {
 8001e02:	7dbb      	ldrb	r3, [r7, #22]
 8001e04:	3301      	adds	r3, #1
 8001e06:	75bb      	strb	r3, [r7, #22]
 8001e08:	7dbb      	ldrb	r3, [r7, #22]
 8001e0a:	2b07      	cmp	r3, #7
 8001e0c:	d9bd      	bls.n	8001d8a <ILI9341_Draw_Char+0x96>
	for (j = 0; j < CHAR_WIDTH; j++) {
 8001e0e:	7d7b      	ldrb	r3, [r7, #21]
 8001e10:	3301      	adds	r3, #1
 8001e12:	757b      	strb	r3, [r7, #21]
 8001e14:	7d7b      	ldrb	r3, [r7, #21]
 8001e16:	2b05      	cmp	r3, #5
 8001e18:	d9b4      	bls.n	8001d84 <ILI9341_Draw_Char+0x90>
							Size, Colour);
				}
			}
		}
	}
}
 8001e1a:	bf00      	nop
 8001e1c:	bf00      	nop
 8001e1e:	371c      	adds	r7, #28
 8001e20:	46bd      	mov	sp, r7
 8001e22:	bd90      	pop	{r4, r7, pc}
 8001e24:	0802f8d4 	.word	0x0802f8d4

08001e28 <ILI9341_Draw_Text>:

/*Draws an array of characters (fonts imported from fonts.h) at X,Y location with specified font colour, size and Background colour*/
/*See fonts.h implementation of font on what is required for changing to a different font when switching fonts libraries*/
void ILI9341_Draw_Text(const char *Text, uint8_t X, uint8_t Y, uint16_t Colour,
		uint16_t Size, uint16_t Background_Colour) {
 8001e28:	b590      	push	{r4, r7, lr}
 8001e2a:	b085      	sub	sp, #20
 8001e2c:	af02      	add	r7, sp, #8
 8001e2e:	6078      	str	r0, [r7, #4]
 8001e30:	4608      	mov	r0, r1
 8001e32:	4611      	mov	r1, r2
 8001e34:	461a      	mov	r2, r3
 8001e36:	4603      	mov	r3, r0
 8001e38:	70fb      	strb	r3, [r7, #3]
 8001e3a:	460b      	mov	r3, r1
 8001e3c:	70bb      	strb	r3, [r7, #2]
 8001e3e:	4613      	mov	r3, r2
 8001e40:	803b      	strh	r3, [r7, #0]
	while (*Text) {
 8001e42:	e017      	b.n	8001e74 <ILI9341_Draw_Text+0x4c>
		ILI9341_Draw_Char(*Text++, X, Y, Colour, Size, Background_Colour);
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	1c5a      	adds	r2, r3, #1
 8001e48:	607a      	str	r2, [r7, #4]
 8001e4a:	7818      	ldrb	r0, [r3, #0]
 8001e4c:	883c      	ldrh	r4, [r7, #0]
 8001e4e:	78ba      	ldrb	r2, [r7, #2]
 8001e50:	78f9      	ldrb	r1, [r7, #3]
 8001e52:	8bbb      	ldrh	r3, [r7, #28]
 8001e54:	9301      	str	r3, [sp, #4]
 8001e56:	8b3b      	ldrh	r3, [r7, #24]
 8001e58:	9300      	str	r3, [sp, #0]
 8001e5a:	4623      	mov	r3, r4
 8001e5c:	f7ff ff4a 	bl	8001cf4 <ILI9341_Draw_Char>
		X += CHAR_WIDTH * Size;
 8001e60:	8b3b      	ldrh	r3, [r7, #24]
 8001e62:	b2db      	uxtb	r3, r3
 8001e64:	461a      	mov	r2, r3
 8001e66:	0052      	lsls	r2, r2, #1
 8001e68:	4413      	add	r3, r2
 8001e6a:	005b      	lsls	r3, r3, #1
 8001e6c:	b2da      	uxtb	r2, r3
 8001e6e:	78fb      	ldrb	r3, [r7, #3]
 8001e70:	4413      	add	r3, r2
 8001e72:	70fb      	strb	r3, [r7, #3]
	while (*Text) {
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	781b      	ldrb	r3, [r3, #0]
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d1e3      	bne.n	8001e44 <ILI9341_Draw_Text+0x1c>
	}
}
 8001e7c:	bf00      	nop
 8001e7e:	bf00      	nop
 8001e80:	370c      	adds	r7, #12
 8001e82:	46bd      	mov	sp, r7
 8001e84:	bd90      	pop	{r4, r7, pc}
	...

08001e88 <ILI9341_Draw_Image>:

/*Draws a full screen picture from flash. Image converted from RGB .jpeg/other to C array using online converter*/
//USING CONVERTER: http://www.digole.com/tools/PicturetoC_Hex_converter.php
//65K colour (2Bytes / Pixel)
void ILI9341_Draw_Image(const char *Image_Array, uint8_t Orientation) {
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	f5ad 7d0c 	sub.w	sp, sp, #560	; 0x230
 8001e8e:	af00      	add	r7, sp, #0
 8001e90:	f507 730c 	add.w	r3, r7, #560	; 0x230
 8001e94:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 8001e98:	6018      	str	r0, [r3, #0]
 8001e9a:	460a      	mov	r2, r1
 8001e9c:	f507 730c 	add.w	r3, r7, #560	; 0x230
 8001ea0:	f2a3 232d 	subw	r3, r3, #557	; 0x22d
 8001ea4:	701a      	strb	r2, [r3, #0]
	if (Orientation == SCREEN_HORIZONTAL_1) {
 8001ea6:	f507 730c 	add.w	r3, r7, #560	; 0x230
 8001eaa:	f2a3 232d 	subw	r3, r3, #557	; 0x22d
 8001eae:	781b      	ldrb	r3, [r3, #0]
 8001eb0:	2b01      	cmp	r3, #1
 8001eb2:	d15d      	bne.n	8001f70 <ILI9341_Draw_Image+0xe8>
		ILI9341_Set_Rotation(SCREEN_HORIZONTAL_1);
 8001eb4:	2001      	movs	r0, #1
 8001eb6:	f000 fa65 	bl	8002384 <ILI9341_Set_Rotation>
		ILI9341_Set_Address(0, 0, ILI9341_SCREEN_WIDTH, ILI9341_SCREEN_HEIGHT);
 8001eba:	23f0      	movs	r3, #240	; 0xf0
 8001ebc:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001ec0:	2100      	movs	r1, #0
 8001ec2:	2000      	movs	r0, #0
 8001ec4:	f000 f9f4 	bl	80022b0 <ILI9341_Set_Address>

		HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);
 8001ec8:	2201      	movs	r2, #1
 8001eca:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001ece:	48c3      	ldr	r0, [pc, #780]	; (80021dc <ILI9341_Draw_Image+0x354>)
 8001ed0:	f001 fce2 	bl	8003898 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001eda:	48c0      	ldr	r0, [pc, #768]	; (80021dc <ILI9341_Draw_Image+0x354>)
 8001edc:	f001 fcdc 	bl	8003898 <HAL_GPIO_WritePin>

		unsigned char Temp_small_buffer[BURST_MAX_SIZE];
		uint32_t counter = 0;
 8001ee0:	2300      	movs	r3, #0
 8001ee2:	f8c7 322c 	str.w	r3, [r7, #556]	; 0x22c
		for (uint32_t i = 0; i < 320 * 280  / BURST_MAX_SIZE; i++)//ILI9341_SCREEN_WIDTH*ILI9341_SCREEN_HEIGHT*2/BURST_MAX_SIZE
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	f8c7 3228 	str.w	r3, [r7, #552]	; 0x228
 8001eec:	e035      	b.n	8001f5a <ILI9341_Draw_Image+0xd2>
				{
			for (uint32_t k = 0; k < BURST_MAX_SIZE; k++) {
 8001eee:	2300      	movs	r3, #0
 8001ef0:	f8c7 3224 	str.w	r3, [r7, #548]	; 0x224
 8001ef4:	e019      	b.n	8001f2a <ILI9341_Draw_Image+0xa2>
				Temp_small_buffer[k] = Image_Array[counter + k];
 8001ef6:	f8d7 222c 	ldr.w	r2, [r7, #556]	; 0x22c
 8001efa:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 8001efe:	4413      	add	r3, r2
 8001f00:	f507 720c 	add.w	r2, r7, #560	; 0x230
 8001f04:	f5a2 720b 	sub.w	r2, r2, #556	; 0x22c
 8001f08:	6812      	ldr	r2, [r2, #0]
 8001f0a:	4413      	add	r3, r2
 8001f0c:	7819      	ldrb	r1, [r3, #0]
 8001f0e:	f507 730c 	add.w	r3, r7, #560	; 0x230
 8001f12:	f5a3 7209 	sub.w	r2, r3, #548	; 0x224
 8001f16:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 8001f1a:	4413      	add	r3, r2
 8001f1c:	460a      	mov	r2, r1
 8001f1e:	701a      	strb	r2, [r3, #0]
			for (uint32_t k = 0; k < BURST_MAX_SIZE; k++) {
 8001f20:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 8001f24:	3301      	adds	r3, #1
 8001f26:	f8c7 3224 	str.w	r3, [r7, #548]	; 0x224
 8001f2a:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 8001f2e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001f32:	d3e0      	bcc.n	8001ef6 <ILI9341_Draw_Image+0x6e>
			}
			HAL_SPI_Transmit(HSPI_INSTANCE, (unsigned char*) Temp_small_buffer,
 8001f34:	f107 010c 	add.w	r1, r7, #12
 8001f38:	230a      	movs	r3, #10
 8001f3a:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001f3e:	48a8      	ldr	r0, [pc, #672]	; (80021e0 <ILI9341_Draw_Image+0x358>)
 8001f40:	f003 fbe7 	bl	8005712 <HAL_SPI_Transmit>
					BURST_MAX_SIZE, 10);
			counter += BURST_MAX_SIZE;
 8001f44:	f8d7 322c 	ldr.w	r3, [r7, #556]	; 0x22c
 8001f48:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8001f4c:	f8c7 322c 	str.w	r3, [r7, #556]	; 0x22c
		for (uint32_t i = 0; i < 320 * 280  / BURST_MAX_SIZE; i++)//ILI9341_SCREEN_WIDTH*ILI9341_SCREEN_HEIGHT*2/BURST_MAX_SIZE
 8001f50:	f8d7 3228 	ldr.w	r3, [r7, #552]	; 0x228
 8001f54:	3301      	adds	r3, #1
 8001f56:	f8c7 3228 	str.w	r3, [r7, #552]	; 0x228
 8001f5a:	f8d7 3228 	ldr.w	r3, [r7, #552]	; 0x228
 8001f5e:	2bb2      	cmp	r3, #178	; 0xb2
 8001f60:	d9c5      	bls.n	8001eee <ILI9341_Draw_Image+0x66>
		}
		HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8001f62:	2201      	movs	r2, #1
 8001f64:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001f68:	489c      	ldr	r0, [pc, #624]	; (80021dc <ILI9341_Draw_Image+0x354>)
 8001f6a:	f001 fc95 	bl	8003898 <HAL_GPIO_WritePin>
					BURST_MAX_SIZE, 10);
			counter += BURST_MAX_SIZE;
		}
		HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
	}
}
 8001f6e:	e130      	b.n	80021d2 <ILI9341_Draw_Image+0x34a>
	} else if (Orientation == SCREEN_HORIZONTAL_2) {
 8001f70:	f507 730c 	add.w	r3, r7, #560	; 0x230
 8001f74:	f2a3 232d 	subw	r3, r3, #557	; 0x22d
 8001f78:	781b      	ldrb	r3, [r3, #0]
 8001f7a:	2b03      	cmp	r3, #3
 8001f7c:	d15e      	bne.n	800203c <ILI9341_Draw_Image+0x1b4>
		ILI9341_Set_Rotation(SCREEN_HORIZONTAL_2);
 8001f7e:	2003      	movs	r0, #3
 8001f80:	f000 fa00 	bl	8002384 <ILI9341_Set_Rotation>
		ILI9341_Set_Address(0, 0, ILI9341_SCREEN_WIDTH, ILI9341_SCREEN_HEIGHT);
 8001f84:	23f0      	movs	r3, #240	; 0xf0
 8001f86:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001f8a:	2100      	movs	r1, #0
 8001f8c:	2000      	movs	r0, #0
 8001f8e:	f000 f98f 	bl	80022b0 <ILI9341_Set_Address>
		HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);
 8001f92:	2201      	movs	r2, #1
 8001f94:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001f98:	4890      	ldr	r0, [pc, #576]	; (80021dc <ILI9341_Draw_Image+0x354>)
 8001f9a:	f001 fc7d 	bl	8003898 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001fa4:	488d      	ldr	r0, [pc, #564]	; (80021dc <ILI9341_Draw_Image+0x354>)
 8001fa6:	f001 fc77 	bl	8003898 <HAL_GPIO_WritePin>
		uint32_t counter = 0;
 8001faa:	2300      	movs	r3, #0
 8001fac:	f8c7 3220 	str.w	r3, [r7, #544]	; 0x220
		for (uint32_t i = 0;
 8001fb0:	2300      	movs	r3, #0
 8001fb2:	f8c7 321c 	str.w	r3, [r7, #540]	; 0x21c
 8001fb6:	e035      	b.n	8002024 <ILI9341_Draw_Image+0x19c>
			for (uint32_t k = 0; k < BURST_MAX_SIZE; k++) {
 8001fb8:	2300      	movs	r3, #0
 8001fba:	f8c7 3218 	str.w	r3, [r7, #536]	; 0x218
 8001fbe:	e019      	b.n	8001ff4 <ILI9341_Draw_Image+0x16c>
				Temp_small_buffer[k] = Image_Array[counter + k];
 8001fc0:	f8d7 2220 	ldr.w	r2, [r7, #544]	; 0x220
 8001fc4:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8001fc8:	4413      	add	r3, r2
 8001fca:	f507 720c 	add.w	r2, r7, #560	; 0x230
 8001fce:	f5a2 720b 	sub.w	r2, r2, #556	; 0x22c
 8001fd2:	6812      	ldr	r2, [r2, #0]
 8001fd4:	4413      	add	r3, r2
 8001fd6:	7819      	ldrb	r1, [r3, #0]
 8001fd8:	f507 730c 	add.w	r3, r7, #560	; 0x230
 8001fdc:	f5a3 7209 	sub.w	r2, r3, #548	; 0x224
 8001fe0:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8001fe4:	4413      	add	r3, r2
 8001fe6:	460a      	mov	r2, r1
 8001fe8:	701a      	strb	r2, [r3, #0]
			for (uint32_t k = 0; k < BURST_MAX_SIZE; k++) {
 8001fea:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8001fee:	3301      	adds	r3, #1
 8001ff0:	f8c7 3218 	str.w	r3, [r7, #536]	; 0x218
 8001ff4:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8001ff8:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001ffc:	d3e0      	bcc.n	8001fc0 <ILI9341_Draw_Image+0x138>
			HAL_SPI_Transmit(HSPI_INSTANCE, (unsigned char*) Temp_small_buffer,
 8001ffe:	f107 010c 	add.w	r1, r7, #12
 8002002:	230a      	movs	r3, #10
 8002004:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8002008:	4875      	ldr	r0, [pc, #468]	; (80021e0 <ILI9341_Draw_Image+0x358>)
 800200a:	f003 fb82 	bl	8005712 <HAL_SPI_Transmit>
			counter += BURST_MAX_SIZE;
 800200e:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8002012:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8002016:	f8c7 3220 	str.w	r3, [r7, #544]	; 0x220
								/ BURST_MAX_SIZE; i++) {
 800201a:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 800201e:	3301      	adds	r3, #1
 8002020:	f8c7 321c 	str.w	r3, [r7, #540]	; 0x21c
						< ILI9341_SCREEN_WIDTH * ILI9341_SCREEN_HEIGHT * 2
 8002024:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 8002028:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
 800202c:	d9c4      	bls.n	8001fb8 <ILI9341_Draw_Image+0x130>
		HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 800202e:	2201      	movs	r2, #1
 8002030:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002034:	4869      	ldr	r0, [pc, #420]	; (80021dc <ILI9341_Draw_Image+0x354>)
 8002036:	f001 fc2f 	bl	8003898 <HAL_GPIO_WritePin>
}
 800203a:	e0ca      	b.n	80021d2 <ILI9341_Draw_Image+0x34a>
	} else if (Orientation == SCREEN_VERTICAL_2) {
 800203c:	f507 730c 	add.w	r3, r7, #560	; 0x230
 8002040:	f2a3 232d 	subw	r3, r3, #557	; 0x22d
 8002044:	781b      	ldrb	r3, [r3, #0]
 8002046:	2b02      	cmp	r3, #2
 8002048:	d15e      	bne.n	8002108 <ILI9341_Draw_Image+0x280>
		ILI9341_Set_Rotation(SCREEN_VERTICAL_2);
 800204a:	2002      	movs	r0, #2
 800204c:	f000 f99a 	bl	8002384 <ILI9341_Set_Rotation>
		ILI9341_Set_Address(0, 0, ILI9341_SCREEN_HEIGHT, ILI9341_SCREEN_WIDTH);
 8002050:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8002054:	22f0      	movs	r2, #240	; 0xf0
 8002056:	2100      	movs	r1, #0
 8002058:	2000      	movs	r0, #0
 800205a:	f000 f929 	bl	80022b0 <ILI9341_Set_Address>
		HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);
 800205e:	2201      	movs	r2, #1
 8002060:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002064:	485d      	ldr	r0, [pc, #372]	; (80021dc <ILI9341_Draw_Image+0x354>)
 8002066:	f001 fc17 	bl	8003898 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 800206a:	2200      	movs	r2, #0
 800206c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002070:	485a      	ldr	r0, [pc, #360]	; (80021dc <ILI9341_Draw_Image+0x354>)
 8002072:	f001 fc11 	bl	8003898 <HAL_GPIO_WritePin>
		uint32_t counter = 0;
 8002076:	2300      	movs	r3, #0
 8002078:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
		for (uint32_t i = 0;
 800207c:	2300      	movs	r3, #0
 800207e:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210
 8002082:	e035      	b.n	80020f0 <ILI9341_Draw_Image+0x268>
			for (uint32_t k = 0; k < BURST_MAX_SIZE; k++) {
 8002084:	2300      	movs	r3, #0
 8002086:	f8c7 320c 	str.w	r3, [r7, #524]	; 0x20c
 800208a:	e019      	b.n	80020c0 <ILI9341_Draw_Image+0x238>
				Temp_small_buffer[k] = Image_Array[counter + k];
 800208c:	f8d7 2214 	ldr.w	r2, [r7, #532]	; 0x214
 8002090:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8002094:	4413      	add	r3, r2
 8002096:	f507 720c 	add.w	r2, r7, #560	; 0x230
 800209a:	f5a2 720b 	sub.w	r2, r2, #556	; 0x22c
 800209e:	6812      	ldr	r2, [r2, #0]
 80020a0:	4413      	add	r3, r2
 80020a2:	7819      	ldrb	r1, [r3, #0]
 80020a4:	f507 730c 	add.w	r3, r7, #560	; 0x230
 80020a8:	f5a3 7209 	sub.w	r2, r3, #548	; 0x224
 80020ac:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 80020b0:	4413      	add	r3, r2
 80020b2:	460a      	mov	r2, r1
 80020b4:	701a      	strb	r2, [r3, #0]
			for (uint32_t k = 0; k < BURST_MAX_SIZE; k++) {
 80020b6:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 80020ba:	3301      	adds	r3, #1
 80020bc:	f8c7 320c 	str.w	r3, [r7, #524]	; 0x20c
 80020c0:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 80020c4:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80020c8:	d3e0      	bcc.n	800208c <ILI9341_Draw_Image+0x204>
			HAL_SPI_Transmit(HSPI_INSTANCE, (unsigned char*) Temp_small_buffer,
 80020ca:	f107 010c 	add.w	r1, r7, #12
 80020ce:	230a      	movs	r3, #10
 80020d0:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80020d4:	4842      	ldr	r0, [pc, #264]	; (80021e0 <ILI9341_Draw_Image+0x358>)
 80020d6:	f003 fb1c 	bl	8005712 <HAL_SPI_Transmit>
			counter += BURST_MAX_SIZE;
 80020da:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 80020de:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 80020e2:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
								/ BURST_MAX_SIZE; i++) {
 80020e6:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 80020ea:	3301      	adds	r3, #1
 80020ec:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210
						< ILI9341_SCREEN_WIDTH * ILI9341_SCREEN_HEIGHT * 2
 80020f0:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 80020f4:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
 80020f8:	d9c4      	bls.n	8002084 <ILI9341_Draw_Image+0x1fc>
		HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 80020fa:	2201      	movs	r2, #1
 80020fc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002100:	4836      	ldr	r0, [pc, #216]	; (80021dc <ILI9341_Draw_Image+0x354>)
 8002102:	f001 fbc9 	bl	8003898 <HAL_GPIO_WritePin>
}
 8002106:	e064      	b.n	80021d2 <ILI9341_Draw_Image+0x34a>
	} else if (Orientation == SCREEN_VERTICAL_1) {
 8002108:	f507 730c 	add.w	r3, r7, #560	; 0x230
 800210c:	f2a3 232d 	subw	r3, r3, #557	; 0x22d
 8002110:	781b      	ldrb	r3, [r3, #0]
 8002112:	2b00      	cmp	r3, #0
 8002114:	d15d      	bne.n	80021d2 <ILI9341_Draw_Image+0x34a>
		ILI9341_Set_Rotation(SCREEN_VERTICAL_1);
 8002116:	2000      	movs	r0, #0
 8002118:	f000 f934 	bl	8002384 <ILI9341_Set_Rotation>
		ILI9341_Set_Address(0, 0, ILI9341_SCREEN_HEIGHT, ILI9341_SCREEN_WIDTH);
 800211c:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8002120:	22f0      	movs	r2, #240	; 0xf0
 8002122:	2100      	movs	r1, #0
 8002124:	2000      	movs	r0, #0
 8002126:	f000 f8c3 	bl	80022b0 <ILI9341_Set_Address>
		HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);
 800212a:	2201      	movs	r2, #1
 800212c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002130:	482a      	ldr	r0, [pc, #168]	; (80021dc <ILI9341_Draw_Image+0x354>)
 8002132:	f001 fbb1 	bl	8003898 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8002136:	2200      	movs	r2, #0
 8002138:	f44f 7180 	mov.w	r1, #256	; 0x100
 800213c:	4827      	ldr	r0, [pc, #156]	; (80021dc <ILI9341_Draw_Image+0x354>)
 800213e:	f001 fbab 	bl	8003898 <HAL_GPIO_WritePin>
		uint32_t counter = 0;
 8002142:	2300      	movs	r3, #0
 8002144:	f8c7 3208 	str.w	r3, [r7, #520]	; 0x208
		for (uint32_t i = 0;
 8002148:	2300      	movs	r3, #0
 800214a:	f8c7 3204 	str.w	r3, [r7, #516]	; 0x204
 800214e:	e035      	b.n	80021bc <ILI9341_Draw_Image+0x334>
			for (uint32_t k = 0; k < BURST_MAX_SIZE; k++) {
 8002150:	2300      	movs	r3, #0
 8002152:	f8c7 3200 	str.w	r3, [r7, #512]	; 0x200
 8002156:	e019      	b.n	800218c <ILI9341_Draw_Image+0x304>
				Temp_small_buffer[k] = Image_Array[counter + k];
 8002158:	f8d7 2208 	ldr.w	r2, [r7, #520]	; 0x208
 800215c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002160:	4413      	add	r3, r2
 8002162:	f507 720c 	add.w	r2, r7, #560	; 0x230
 8002166:	f5a2 720b 	sub.w	r2, r2, #556	; 0x22c
 800216a:	6812      	ldr	r2, [r2, #0]
 800216c:	4413      	add	r3, r2
 800216e:	7819      	ldrb	r1, [r3, #0]
 8002170:	f507 730c 	add.w	r3, r7, #560	; 0x230
 8002174:	f5a3 7209 	sub.w	r2, r3, #548	; 0x224
 8002178:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800217c:	4413      	add	r3, r2
 800217e:	460a      	mov	r2, r1
 8002180:	701a      	strb	r2, [r3, #0]
			for (uint32_t k = 0; k < BURST_MAX_SIZE; k++) {
 8002182:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002186:	3301      	adds	r3, #1
 8002188:	f8c7 3200 	str.w	r3, [r7, #512]	; 0x200
 800218c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002190:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002194:	d3e0      	bcc.n	8002158 <ILI9341_Draw_Image+0x2d0>
			HAL_SPI_Transmit(HSPI_INSTANCE, (unsigned char*) Temp_small_buffer,
 8002196:	f107 010c 	add.w	r1, r7, #12
 800219a:	230a      	movs	r3, #10
 800219c:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80021a0:	480f      	ldr	r0, [pc, #60]	; (80021e0 <ILI9341_Draw_Image+0x358>)
 80021a2:	f003 fab6 	bl	8005712 <HAL_SPI_Transmit>
			counter += BURST_MAX_SIZE;
 80021a6:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 80021aa:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 80021ae:	f8c7 3208 	str.w	r3, [r7, #520]	; 0x208
								/ BURST_MAX_SIZE; i++) {
 80021b2:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 80021b6:	3301      	adds	r3, #1
 80021b8:	f8c7 3204 	str.w	r3, [r7, #516]	; 0x204
						< ILI9341_SCREEN_WIDTH * ILI9341_SCREEN_HEIGHT * 2
 80021bc:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 80021c0:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
 80021c4:	d9c4      	bls.n	8002150 <ILI9341_Draw_Image+0x2c8>
		HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 80021c6:	2201      	movs	r2, #1
 80021c8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80021cc:	4803      	ldr	r0, [pc, #12]	; (80021dc <ILI9341_Draw_Image+0x354>)
 80021ce:	f001 fb63 	bl	8003898 <HAL_GPIO_WritePin>
}
 80021d2:	bf00      	nop
 80021d4:	f507 770c 	add.w	r7, r7, #560	; 0x230
 80021d8:	46bd      	mov	sp, r7
 80021da:	bd80      	pop	{r7, pc}
 80021dc:	40020800 	.word	0x40020800
 80021e0:	200002d0 	.word	0x200002d0

080021e4 <ILI9341_SPI_Init>:
volatile uint16_t LCD_HEIGHT = ILI9341_SCREEN_HEIGHT;
volatile uint16_t LCD_WIDTH	 = ILI9341_SCREEN_WIDTH;

/* Initialize SPI */
void ILI9341_SPI_Init(void)
{
 80021e4:	b580      	push	{r7, lr}
 80021e6:	af00      	add	r7, sp, #0
MX_SPI5_Init();																							//SPI INIT
 80021e8:	f7ff f9cc 	bl	8001584 <MX_SPI5_Init>
MX_GPIO_Init();																							//GPIO INIT
 80021ec:	f7fe fa90 	bl	8000710 <MX_GPIO_Init>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	//CS OFF
 80021f0:	2200      	movs	r2, #0
 80021f2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80021f6:	4802      	ldr	r0, [pc, #8]	; (8002200 <ILI9341_SPI_Init+0x1c>)
 80021f8:	f001 fb4e 	bl	8003898 <HAL_GPIO_WritePin>
}
 80021fc:	bf00      	nop
 80021fe:	bd80      	pop	{r7, pc}
 8002200:	40020800 	.word	0x40020800

08002204 <ILI9341_SPI_Send>:

/*Send data (char) to LCD*/
void ILI9341_SPI_Send(unsigned char SPI_Data)
{
 8002204:	b580      	push	{r7, lr}
 8002206:	b082      	sub	sp, #8
 8002208:	af00      	add	r7, sp, #0
 800220a:	4603      	mov	r3, r0
 800220c:	71fb      	strb	r3, [r7, #7]
HAL_SPI_Transmit(HSPI_INSTANCE, &SPI_Data, 1, 1);
 800220e:	1df9      	adds	r1, r7, #7
 8002210:	2301      	movs	r3, #1
 8002212:	2201      	movs	r2, #1
 8002214:	4803      	ldr	r0, [pc, #12]	; (8002224 <ILI9341_SPI_Send+0x20>)
 8002216:	f003 fa7c 	bl	8005712 <HAL_SPI_Transmit>
}
 800221a:	bf00      	nop
 800221c:	3708      	adds	r7, #8
 800221e:	46bd      	mov	sp, r7
 8002220:	bd80      	pop	{r7, pc}
 8002222:	bf00      	nop
 8002224:	200002d0 	.word	0x200002d0

08002228 <ILI9341_Write_Command>:

/* Send command (char) to LCD */
void ILI9341_Write_Command(uint8_t Command)
{
 8002228:	b580      	push	{r7, lr}
 800222a:	b082      	sub	sp, #8
 800222c:	af00      	add	r7, sp, #0
 800222e:	4603      	mov	r3, r0
 8002230:	71fb      	strb	r3, [r7, #7]
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8002232:	2200      	movs	r2, #0
 8002234:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002238:	480b      	ldr	r0, [pc, #44]	; (8002268 <ILI9341_Write_Command+0x40>)
 800223a:	f001 fb2d 	bl	8003898 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	
 800223e:	2200      	movs	r2, #0
 8002240:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002244:	4808      	ldr	r0, [pc, #32]	; (8002268 <ILI9341_Write_Command+0x40>)
 8002246:	f001 fb27 	bl	8003898 <HAL_GPIO_WritePin>
ILI9341_SPI_Send(Command);
 800224a:	79fb      	ldrb	r3, [r7, #7]
 800224c:	4618      	mov	r0, r3
 800224e:	f7ff ffd9 	bl	8002204 <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);		
 8002252:	2201      	movs	r2, #1
 8002254:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002258:	4803      	ldr	r0, [pc, #12]	; (8002268 <ILI9341_Write_Command+0x40>)
 800225a:	f001 fb1d 	bl	8003898 <HAL_GPIO_WritePin>
}
 800225e:	bf00      	nop
 8002260:	3708      	adds	r7, #8
 8002262:	46bd      	mov	sp, r7
 8002264:	bd80      	pop	{r7, pc}
 8002266:	bf00      	nop
 8002268:	40020800 	.word	0x40020800

0800226c <ILI9341_Write_Data>:

/* Send Data (char) to LCD */
void ILI9341_Write_Data(uint8_t Data)
{
 800226c:	b580      	push	{r7, lr}
 800226e:	b082      	sub	sp, #8
 8002270:	af00      	add	r7, sp, #0
 8002272:	4603      	mov	r3, r0
 8002274:	71fb      	strb	r3, [r7, #7]
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	
 8002276:	2201      	movs	r2, #1
 8002278:	f44f 7100 	mov.w	r1, #512	; 0x200
 800227c:	480b      	ldr	r0, [pc, #44]	; (80022ac <ILI9341_Write_Data+0x40>)
 800227e:	f001 fb0b 	bl	8003898 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8002282:	2200      	movs	r2, #0
 8002284:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002288:	4808      	ldr	r0, [pc, #32]	; (80022ac <ILI9341_Write_Data+0x40>)
 800228a:	f001 fb05 	bl	8003898 <HAL_GPIO_WritePin>
ILI9341_SPI_Send(Data);	
 800228e:	79fb      	ldrb	r3, [r7, #7]
 8002290:	4618      	mov	r0, r3
 8002292:	f7ff ffb7 	bl	8002204 <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8002296:	2201      	movs	r2, #1
 8002298:	f44f 7180 	mov.w	r1, #256	; 0x100
 800229c:	4803      	ldr	r0, [pc, #12]	; (80022ac <ILI9341_Write_Data+0x40>)
 800229e:	f001 fafb 	bl	8003898 <HAL_GPIO_WritePin>
}
 80022a2:	bf00      	nop
 80022a4:	3708      	adds	r7, #8
 80022a6:	46bd      	mov	sp, r7
 80022a8:	bd80      	pop	{r7, pc}
 80022aa:	bf00      	nop
 80022ac:	40020800 	.word	0x40020800

080022b0 <ILI9341_Set_Address>:

/* Set Address - Location block - to draw into */
void ILI9341_Set_Address(uint16_t X1, uint16_t Y1, uint16_t X2, uint16_t Y2)
{
 80022b0:	b590      	push	{r4, r7, lr}
 80022b2:	b083      	sub	sp, #12
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	4604      	mov	r4, r0
 80022b8:	4608      	mov	r0, r1
 80022ba:	4611      	mov	r1, r2
 80022bc:	461a      	mov	r2, r3
 80022be:	4623      	mov	r3, r4
 80022c0:	80fb      	strh	r3, [r7, #6]
 80022c2:	4603      	mov	r3, r0
 80022c4:	80bb      	strh	r3, [r7, #4]
 80022c6:	460b      	mov	r3, r1
 80022c8:	807b      	strh	r3, [r7, #2]
 80022ca:	4613      	mov	r3, r2
 80022cc:	803b      	strh	r3, [r7, #0]
ILI9341_Write_Command(0x2A);
 80022ce:	202a      	movs	r0, #42	; 0x2a
 80022d0:	f7ff ffaa 	bl	8002228 <ILI9341_Write_Command>
ILI9341_Write_Data(X1>>8);
 80022d4:	88fb      	ldrh	r3, [r7, #6]
 80022d6:	0a1b      	lsrs	r3, r3, #8
 80022d8:	b29b      	uxth	r3, r3
 80022da:	b2db      	uxtb	r3, r3
 80022dc:	4618      	mov	r0, r3
 80022de:	f7ff ffc5 	bl	800226c <ILI9341_Write_Data>
ILI9341_Write_Data(X1);
 80022e2:	88fb      	ldrh	r3, [r7, #6]
 80022e4:	b2db      	uxtb	r3, r3
 80022e6:	4618      	mov	r0, r3
 80022e8:	f7ff ffc0 	bl	800226c <ILI9341_Write_Data>
ILI9341_Write_Data(X2>>8);
 80022ec:	887b      	ldrh	r3, [r7, #2]
 80022ee:	0a1b      	lsrs	r3, r3, #8
 80022f0:	b29b      	uxth	r3, r3
 80022f2:	b2db      	uxtb	r3, r3
 80022f4:	4618      	mov	r0, r3
 80022f6:	f7ff ffb9 	bl	800226c <ILI9341_Write_Data>
ILI9341_Write_Data(X2);
 80022fa:	887b      	ldrh	r3, [r7, #2]
 80022fc:	b2db      	uxtb	r3, r3
 80022fe:	4618      	mov	r0, r3
 8002300:	f7ff ffb4 	bl	800226c <ILI9341_Write_Data>

ILI9341_Write_Command(0x2B);
 8002304:	202b      	movs	r0, #43	; 0x2b
 8002306:	f7ff ff8f 	bl	8002228 <ILI9341_Write_Command>
ILI9341_Write_Data(Y1>>8);
 800230a:	88bb      	ldrh	r3, [r7, #4]
 800230c:	0a1b      	lsrs	r3, r3, #8
 800230e:	b29b      	uxth	r3, r3
 8002310:	b2db      	uxtb	r3, r3
 8002312:	4618      	mov	r0, r3
 8002314:	f7ff ffaa 	bl	800226c <ILI9341_Write_Data>
ILI9341_Write_Data(Y1);
 8002318:	88bb      	ldrh	r3, [r7, #4]
 800231a:	b2db      	uxtb	r3, r3
 800231c:	4618      	mov	r0, r3
 800231e:	f7ff ffa5 	bl	800226c <ILI9341_Write_Data>
ILI9341_Write_Data(Y2>>8);
 8002322:	883b      	ldrh	r3, [r7, #0]
 8002324:	0a1b      	lsrs	r3, r3, #8
 8002326:	b29b      	uxth	r3, r3
 8002328:	b2db      	uxtb	r3, r3
 800232a:	4618      	mov	r0, r3
 800232c:	f7ff ff9e 	bl	800226c <ILI9341_Write_Data>
ILI9341_Write_Data(Y2);
 8002330:	883b      	ldrh	r3, [r7, #0]
 8002332:	b2db      	uxtb	r3, r3
 8002334:	4618      	mov	r0, r3
 8002336:	f7ff ff99 	bl	800226c <ILI9341_Write_Data>

ILI9341_Write_Command(0x2C);
 800233a:	202c      	movs	r0, #44	; 0x2c
 800233c:	f7ff ff74 	bl	8002228 <ILI9341_Write_Command>
}
 8002340:	bf00      	nop
 8002342:	370c      	adds	r7, #12
 8002344:	46bd      	mov	sp, r7
 8002346:	bd90      	pop	{r4, r7, pc}

08002348 <ILI9341_Reset>:

/*HARDWARE RESET*/
void ILI9341_Reset(void)
{
 8002348:	b580      	push	{r7, lr}
 800234a:	af00      	add	r7, sp, #0
HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);
 800234c:	2201      	movs	r2, #1
 800234e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002352:	480b      	ldr	r0, [pc, #44]	; (8002380 <ILI9341_Reset+0x38>)
 8002354:	f001 faa0 	bl	8003898 <HAL_GPIO_WritePin>
HAL_Delay(200);
 8002358:	20c8      	movs	r0, #200	; 0xc8
 800235a:	f000 fd1b 	bl	8002d94 <HAL_Delay>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 800235e:	2200      	movs	r2, #0
 8002360:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002364:	4806      	ldr	r0, [pc, #24]	; (8002380 <ILI9341_Reset+0x38>)
 8002366:	f001 fa97 	bl	8003898 <HAL_GPIO_WritePin>
HAL_Delay(200);
 800236a:	20c8      	movs	r0, #200	; 0xc8
 800236c:	f000 fd12 	bl	8002d94 <HAL_Delay>
HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);	
 8002370:	2201      	movs	r2, #1
 8002372:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002376:	4802      	ldr	r0, [pc, #8]	; (8002380 <ILI9341_Reset+0x38>)
 8002378:	f001 fa8e 	bl	8003898 <HAL_GPIO_WritePin>
}
 800237c:	bf00      	nop
 800237e:	bd80      	pop	{r7, pc}
 8002380:	40020800 	.word	0x40020800

08002384 <ILI9341_Set_Rotation>:

/*Ser rotation of the screen - changes x0 and y0*/
void ILI9341_Set_Rotation(uint8_t Rotation) 
{
 8002384:	b580      	push	{r7, lr}
 8002386:	b084      	sub	sp, #16
 8002388:	af00      	add	r7, sp, #0
 800238a:	4603      	mov	r3, r0
 800238c:	71fb      	strb	r3, [r7, #7]
	
uint8_t screen_rotation = Rotation;
 800238e:	79fb      	ldrb	r3, [r7, #7]
 8002390:	73fb      	strb	r3, [r7, #15]

ILI9341_Write_Command(0x36);
 8002392:	2036      	movs	r0, #54	; 0x36
 8002394:	f7ff ff48 	bl	8002228 <ILI9341_Write_Command>
HAL_Delay(1);
 8002398:	2001      	movs	r0, #1
 800239a:	f000 fcfb 	bl	8002d94 <HAL_Delay>
	
switch(screen_rotation) 
 800239e:	7bfb      	ldrb	r3, [r7, #15]
 80023a0:	2b03      	cmp	r3, #3
 80023a2:	d837      	bhi.n	8002414 <ILI9341_Set_Rotation+0x90>
 80023a4:	a201      	add	r2, pc, #4	; (adr r2, 80023ac <ILI9341_Set_Rotation+0x28>)
 80023a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023aa:	bf00      	nop
 80023ac:	080023bd 	.word	0x080023bd
 80023b0:	080023d3 	.word	0x080023d3
 80023b4:	080023e9 	.word	0x080023e9
 80023b8:	080023ff 	.word	0x080023ff
	{
		case SCREEN_VERTICAL_1:
			ILI9341_Write_Data(0x40|0x08);
 80023bc:	2048      	movs	r0, #72	; 0x48
 80023be:	f7ff ff55 	bl	800226c <ILI9341_Write_Data>
			LCD_WIDTH = ILI9341_SCREEN_HEIGHT;
 80023c2:	4b17      	ldr	r3, [pc, #92]	; (8002420 <ILI9341_Set_Rotation+0x9c>)
 80023c4:	22f0      	movs	r2, #240	; 0xf0
 80023c6:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = ILI9341_SCREEN_WIDTH;
 80023c8:	4b16      	ldr	r3, [pc, #88]	; (8002424 <ILI9341_Set_Rotation+0xa0>)
 80023ca:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80023ce:	801a      	strh	r2, [r3, #0]
			break;
 80023d0:	e021      	b.n	8002416 <ILI9341_Set_Rotation+0x92>
		case SCREEN_HORIZONTAL_1:
			ILI9341_Write_Data(0x20|0x08);
 80023d2:	2028      	movs	r0, #40	; 0x28
 80023d4:	f7ff ff4a 	bl	800226c <ILI9341_Write_Data>
			LCD_WIDTH  = ILI9341_SCREEN_WIDTH; //+40
 80023d8:	4b11      	ldr	r3, [pc, #68]	; (8002420 <ILI9341_Set_Rotation+0x9c>)
 80023da:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80023de:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = ILI9341_SCREEN_HEIGHT;
 80023e0:	4b10      	ldr	r3, [pc, #64]	; (8002424 <ILI9341_Set_Rotation+0xa0>)
 80023e2:	22f0      	movs	r2, #240	; 0xf0
 80023e4:	801a      	strh	r2, [r3, #0]
			break;
 80023e6:	e016      	b.n	8002416 <ILI9341_Set_Rotation+0x92>
		case SCREEN_VERTICAL_2:
			ILI9341_Write_Data(0x80|0x08);
 80023e8:	2088      	movs	r0, #136	; 0x88
 80023ea:	f7ff ff3f 	bl	800226c <ILI9341_Write_Data>
			LCD_WIDTH  = ILI9341_SCREEN_HEIGHT;
 80023ee:	4b0c      	ldr	r3, [pc, #48]	; (8002420 <ILI9341_Set_Rotation+0x9c>)
 80023f0:	22f0      	movs	r2, #240	; 0xf0
 80023f2:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = ILI9341_SCREEN_WIDTH;
 80023f4:	4b0b      	ldr	r3, [pc, #44]	; (8002424 <ILI9341_Set_Rotation+0xa0>)
 80023f6:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80023fa:	801a      	strh	r2, [r3, #0]
			break;
 80023fc:	e00b      	b.n	8002416 <ILI9341_Set_Rotation+0x92>
		case SCREEN_HORIZONTAL_2:
			ILI9341_Write_Data(0x40|0x80|0x20|0x08);
 80023fe:	20e8      	movs	r0, #232	; 0xe8
 8002400:	f7ff ff34 	bl	800226c <ILI9341_Write_Data>
			LCD_WIDTH  = ILI9341_SCREEN_WIDTH;
 8002404:	4b06      	ldr	r3, [pc, #24]	; (8002420 <ILI9341_Set_Rotation+0x9c>)
 8002406:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800240a:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = ILI9341_SCREEN_HEIGHT;
 800240c:	4b05      	ldr	r3, [pc, #20]	; (8002424 <ILI9341_Set_Rotation+0xa0>)
 800240e:	22f0      	movs	r2, #240	; 0xf0
 8002410:	801a      	strh	r2, [r3, #0]
			break;
 8002412:	e000      	b.n	8002416 <ILI9341_Set_Rotation+0x92>
		default:
			//EXIT IF SCREEN ROTATION NOT VALID!
			break;
 8002414:	bf00      	nop
	}
}
 8002416:	bf00      	nop
 8002418:	3710      	adds	r7, #16
 800241a:	46bd      	mov	sp, r7
 800241c:	bd80      	pop	{r7, pc}
 800241e:	bf00      	nop
 8002420:	20000022 	.word	0x20000022
 8002424:	20000020 	.word	0x20000020

08002428 <ILI9341_Enable>:

/*Enable LCD display*/
void ILI9341_Enable(void)
{
 8002428:	b580      	push	{r7, lr}
 800242a:	af00      	add	r7, sp, #0
HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);
 800242c:	2201      	movs	r2, #1
 800242e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002432:	4802      	ldr	r0, [pc, #8]	; (800243c <ILI9341_Enable+0x14>)
 8002434:	f001 fa30 	bl	8003898 <HAL_GPIO_WritePin>
}
 8002438:	bf00      	nop
 800243a:	bd80      	pop	{r7, pc}
 800243c:	40020800 	.word	0x40020800

08002440 <ILI9341_Init>:

/*Initialize LCD display*/
void ILI9341_Init(void)
{
 8002440:	b580      	push	{r7, lr}
 8002442:	af00      	add	r7, sp, #0

ILI9341_Enable();
 8002444:	f7ff fff0 	bl	8002428 <ILI9341_Enable>
ILI9341_SPI_Init();
 8002448:	f7ff fecc 	bl	80021e4 <ILI9341_SPI_Init>
ILI9341_Reset();
 800244c:	f7ff ff7c 	bl	8002348 <ILI9341_Reset>

//SOFTWARE RESET
ILI9341_Write_Command(0x01);
 8002450:	2001      	movs	r0, #1
 8002452:	f7ff fee9 	bl	8002228 <ILI9341_Write_Command>
HAL_Delay(1000);
 8002456:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800245a:	f000 fc9b 	bl	8002d94 <HAL_Delay>
	
//POWER CONTROL A
ILI9341_Write_Command(0xCB);
 800245e:	20cb      	movs	r0, #203	; 0xcb
 8002460:	f7ff fee2 	bl	8002228 <ILI9341_Write_Command>
ILI9341_Write_Data(0x39);
 8002464:	2039      	movs	r0, #57	; 0x39
 8002466:	f7ff ff01 	bl	800226c <ILI9341_Write_Data>
ILI9341_Write_Data(0x2C);
 800246a:	202c      	movs	r0, #44	; 0x2c
 800246c:	f7ff fefe 	bl	800226c <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 8002470:	2000      	movs	r0, #0
 8002472:	f7ff fefb 	bl	800226c <ILI9341_Write_Data>
ILI9341_Write_Data(0x34);
 8002476:	2034      	movs	r0, #52	; 0x34
 8002478:	f7ff fef8 	bl	800226c <ILI9341_Write_Data>
ILI9341_Write_Data(0x02);
 800247c:	2002      	movs	r0, #2
 800247e:	f7ff fef5 	bl	800226c <ILI9341_Write_Data>

//POWER CONTROL B
ILI9341_Write_Command(0xCF);
 8002482:	20cf      	movs	r0, #207	; 0xcf
 8002484:	f7ff fed0 	bl	8002228 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 8002488:	2000      	movs	r0, #0
 800248a:	f7ff feef 	bl	800226c <ILI9341_Write_Data>
ILI9341_Write_Data(0xC1);
 800248e:	20c1      	movs	r0, #193	; 0xc1
 8002490:	f7ff feec 	bl	800226c <ILI9341_Write_Data>
ILI9341_Write_Data(0x30);
 8002494:	2030      	movs	r0, #48	; 0x30
 8002496:	f7ff fee9 	bl	800226c <ILI9341_Write_Data>

//DRIVER TIMING CONTROL A
ILI9341_Write_Command(0xE8);
 800249a:	20e8      	movs	r0, #232	; 0xe8
 800249c:	f7ff fec4 	bl	8002228 <ILI9341_Write_Command>
ILI9341_Write_Data(0x85);
 80024a0:	2085      	movs	r0, #133	; 0x85
 80024a2:	f7ff fee3 	bl	800226c <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 80024a6:	2000      	movs	r0, #0
 80024a8:	f7ff fee0 	bl	800226c <ILI9341_Write_Data>
ILI9341_Write_Data(0x78);
 80024ac:	2078      	movs	r0, #120	; 0x78
 80024ae:	f7ff fedd 	bl	800226c <ILI9341_Write_Data>

//DRIVER TIMING CONTROL B
ILI9341_Write_Command(0xEA);
 80024b2:	20ea      	movs	r0, #234	; 0xea
 80024b4:	f7ff feb8 	bl	8002228 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 80024b8:	2000      	movs	r0, #0
 80024ba:	f7ff fed7 	bl	800226c <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 80024be:	2000      	movs	r0, #0
 80024c0:	f7ff fed4 	bl	800226c <ILI9341_Write_Data>

//POWER ON SEQUENCE CONTROL
ILI9341_Write_Command(0xED);
 80024c4:	20ed      	movs	r0, #237	; 0xed
 80024c6:	f7ff feaf 	bl	8002228 <ILI9341_Write_Command>
ILI9341_Write_Data(0x64);
 80024ca:	2064      	movs	r0, #100	; 0x64
 80024cc:	f7ff fece 	bl	800226c <ILI9341_Write_Data>
ILI9341_Write_Data(0x03);
 80024d0:	2003      	movs	r0, #3
 80024d2:	f7ff fecb 	bl	800226c <ILI9341_Write_Data>
ILI9341_Write_Data(0x12);
 80024d6:	2012      	movs	r0, #18
 80024d8:	f7ff fec8 	bl	800226c <ILI9341_Write_Data>
ILI9341_Write_Data(0x81);
 80024dc:	2081      	movs	r0, #129	; 0x81
 80024de:	f7ff fec5 	bl	800226c <ILI9341_Write_Data>

//PUMP RATIO CONTROL
ILI9341_Write_Command(0xF7);
 80024e2:	20f7      	movs	r0, #247	; 0xf7
 80024e4:	f7ff fea0 	bl	8002228 <ILI9341_Write_Command>
ILI9341_Write_Data(0x20);
 80024e8:	2020      	movs	r0, #32
 80024ea:	f7ff febf 	bl	800226c <ILI9341_Write_Data>

//POWER CONTROL,VRH[5:0]
ILI9341_Write_Command(0xC0);
 80024ee:	20c0      	movs	r0, #192	; 0xc0
 80024f0:	f7ff fe9a 	bl	8002228 <ILI9341_Write_Command>
ILI9341_Write_Data(0x23);
 80024f4:	2023      	movs	r0, #35	; 0x23
 80024f6:	f7ff feb9 	bl	800226c <ILI9341_Write_Data>

//POWER CONTROL,SAP[2:0];BT[3:0]
ILI9341_Write_Command(0xC1);
 80024fa:	20c1      	movs	r0, #193	; 0xc1
 80024fc:	f7ff fe94 	bl	8002228 <ILI9341_Write_Command>
ILI9341_Write_Data(0x10);
 8002500:	2010      	movs	r0, #16
 8002502:	f7ff feb3 	bl	800226c <ILI9341_Write_Data>

//VCM CONTROL
ILI9341_Write_Command(0xC5);
 8002506:	20c5      	movs	r0, #197	; 0xc5
 8002508:	f7ff fe8e 	bl	8002228 <ILI9341_Write_Command>
ILI9341_Write_Data(0x3E);
 800250c:	203e      	movs	r0, #62	; 0x3e
 800250e:	f7ff fead 	bl	800226c <ILI9341_Write_Data>
ILI9341_Write_Data(0x28);
 8002512:	2028      	movs	r0, #40	; 0x28
 8002514:	f7ff feaa 	bl	800226c <ILI9341_Write_Data>

//VCM CONTROL 2
ILI9341_Write_Command(0xC7);
 8002518:	20c7      	movs	r0, #199	; 0xc7
 800251a:	f7ff fe85 	bl	8002228 <ILI9341_Write_Command>
ILI9341_Write_Data(0x86);
 800251e:	2086      	movs	r0, #134	; 0x86
 8002520:	f7ff fea4 	bl	800226c <ILI9341_Write_Data>

//MEMORY ACCESS CONTROL
ILI9341_Write_Command(0x36);
 8002524:	2036      	movs	r0, #54	; 0x36
 8002526:	f7ff fe7f 	bl	8002228 <ILI9341_Write_Command>
ILI9341_Write_Data(0x48);
 800252a:	2048      	movs	r0, #72	; 0x48
 800252c:	f7ff fe9e 	bl	800226c <ILI9341_Write_Data>

//PIXEL FORMAT
ILI9341_Write_Command(0x3A);
 8002530:	203a      	movs	r0, #58	; 0x3a
 8002532:	f7ff fe79 	bl	8002228 <ILI9341_Write_Command>
ILI9341_Write_Data(0x55);
 8002536:	2055      	movs	r0, #85	; 0x55
 8002538:	f7ff fe98 	bl	800226c <ILI9341_Write_Data>

//FRAME RATIO CONTROL, STANDARD RGB COLOR
ILI9341_Write_Command(0xB1);
 800253c:	20b1      	movs	r0, #177	; 0xb1
 800253e:	f7ff fe73 	bl	8002228 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 8002542:	2000      	movs	r0, #0
 8002544:	f7ff fe92 	bl	800226c <ILI9341_Write_Data>
ILI9341_Write_Data(0x18);
 8002548:	2018      	movs	r0, #24
 800254a:	f7ff fe8f 	bl	800226c <ILI9341_Write_Data>

//DISPLAY FUNCTION CONTROL
ILI9341_Write_Command(0xB6);
 800254e:	20b6      	movs	r0, #182	; 0xb6
 8002550:	f7ff fe6a 	bl	8002228 <ILI9341_Write_Command>
ILI9341_Write_Data(0x08);
 8002554:	2008      	movs	r0, #8
 8002556:	f7ff fe89 	bl	800226c <ILI9341_Write_Data>
ILI9341_Write_Data(0x82);
 800255a:	2082      	movs	r0, #130	; 0x82
 800255c:	f7ff fe86 	bl	800226c <ILI9341_Write_Data>
ILI9341_Write_Data(0x27);
 8002560:	2027      	movs	r0, #39	; 0x27
 8002562:	f7ff fe83 	bl	800226c <ILI9341_Write_Data>

//3GAMMA FUNCTION DISABLE
ILI9341_Write_Command(0xF2);
 8002566:	20f2      	movs	r0, #242	; 0xf2
 8002568:	f7ff fe5e 	bl	8002228 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 800256c:	2000      	movs	r0, #0
 800256e:	f7ff fe7d 	bl	800226c <ILI9341_Write_Data>

//GAMMA CURVE SELECTED
ILI9341_Write_Command(0x26);
 8002572:	2026      	movs	r0, #38	; 0x26
 8002574:	f7ff fe58 	bl	8002228 <ILI9341_Write_Command>
ILI9341_Write_Data(0x01);
 8002578:	2001      	movs	r0, #1
 800257a:	f7ff fe77 	bl	800226c <ILI9341_Write_Data>

//POSITIVE GAMMA CORRECTION
ILI9341_Write_Command(0xE0);
 800257e:	20e0      	movs	r0, #224	; 0xe0
 8002580:	f7ff fe52 	bl	8002228 <ILI9341_Write_Command>
ILI9341_Write_Data(0x0F);
 8002584:	200f      	movs	r0, #15
 8002586:	f7ff fe71 	bl	800226c <ILI9341_Write_Data>
ILI9341_Write_Data(0x31);
 800258a:	2031      	movs	r0, #49	; 0x31
 800258c:	f7ff fe6e 	bl	800226c <ILI9341_Write_Data>
ILI9341_Write_Data(0x2B);
 8002590:	202b      	movs	r0, #43	; 0x2b
 8002592:	f7ff fe6b 	bl	800226c <ILI9341_Write_Data>
ILI9341_Write_Data(0x0C);
 8002596:	200c      	movs	r0, #12
 8002598:	f7ff fe68 	bl	800226c <ILI9341_Write_Data>
ILI9341_Write_Data(0x0E);
 800259c:	200e      	movs	r0, #14
 800259e:	f7ff fe65 	bl	800226c <ILI9341_Write_Data>
ILI9341_Write_Data(0x08);
 80025a2:	2008      	movs	r0, #8
 80025a4:	f7ff fe62 	bl	800226c <ILI9341_Write_Data>
ILI9341_Write_Data(0x4E);
 80025a8:	204e      	movs	r0, #78	; 0x4e
 80025aa:	f7ff fe5f 	bl	800226c <ILI9341_Write_Data>
ILI9341_Write_Data(0xF1);
 80025ae:	20f1      	movs	r0, #241	; 0xf1
 80025b0:	f7ff fe5c 	bl	800226c <ILI9341_Write_Data>
ILI9341_Write_Data(0x37);
 80025b4:	2037      	movs	r0, #55	; 0x37
 80025b6:	f7ff fe59 	bl	800226c <ILI9341_Write_Data>
ILI9341_Write_Data(0x07);
 80025ba:	2007      	movs	r0, #7
 80025bc:	f7ff fe56 	bl	800226c <ILI9341_Write_Data>
ILI9341_Write_Data(0x10);
 80025c0:	2010      	movs	r0, #16
 80025c2:	f7ff fe53 	bl	800226c <ILI9341_Write_Data>
ILI9341_Write_Data(0x03);
 80025c6:	2003      	movs	r0, #3
 80025c8:	f7ff fe50 	bl	800226c <ILI9341_Write_Data>
ILI9341_Write_Data(0x0E);
 80025cc:	200e      	movs	r0, #14
 80025ce:	f7ff fe4d 	bl	800226c <ILI9341_Write_Data>
ILI9341_Write_Data(0x09);
 80025d2:	2009      	movs	r0, #9
 80025d4:	f7ff fe4a 	bl	800226c <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 80025d8:	2000      	movs	r0, #0
 80025da:	f7ff fe47 	bl	800226c <ILI9341_Write_Data>

//NEGATIVE GAMMA CORRECTION
ILI9341_Write_Command(0xE1);
 80025de:	20e1      	movs	r0, #225	; 0xe1
 80025e0:	f7ff fe22 	bl	8002228 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 80025e4:	2000      	movs	r0, #0
 80025e6:	f7ff fe41 	bl	800226c <ILI9341_Write_Data>
ILI9341_Write_Data(0x0E);
 80025ea:	200e      	movs	r0, #14
 80025ec:	f7ff fe3e 	bl	800226c <ILI9341_Write_Data>
ILI9341_Write_Data(0x14);
 80025f0:	2014      	movs	r0, #20
 80025f2:	f7ff fe3b 	bl	800226c <ILI9341_Write_Data>
ILI9341_Write_Data(0x03);
 80025f6:	2003      	movs	r0, #3
 80025f8:	f7ff fe38 	bl	800226c <ILI9341_Write_Data>
ILI9341_Write_Data(0x11);
 80025fc:	2011      	movs	r0, #17
 80025fe:	f7ff fe35 	bl	800226c <ILI9341_Write_Data>
ILI9341_Write_Data(0x07);
 8002602:	2007      	movs	r0, #7
 8002604:	f7ff fe32 	bl	800226c <ILI9341_Write_Data>
ILI9341_Write_Data(0x31);
 8002608:	2031      	movs	r0, #49	; 0x31
 800260a:	f7ff fe2f 	bl	800226c <ILI9341_Write_Data>
ILI9341_Write_Data(0xC1);
 800260e:	20c1      	movs	r0, #193	; 0xc1
 8002610:	f7ff fe2c 	bl	800226c <ILI9341_Write_Data>
ILI9341_Write_Data(0x48);
 8002614:	2048      	movs	r0, #72	; 0x48
 8002616:	f7ff fe29 	bl	800226c <ILI9341_Write_Data>
ILI9341_Write_Data(0x08);
 800261a:	2008      	movs	r0, #8
 800261c:	f7ff fe26 	bl	800226c <ILI9341_Write_Data>
ILI9341_Write_Data(0x0F);
 8002620:	200f      	movs	r0, #15
 8002622:	f7ff fe23 	bl	800226c <ILI9341_Write_Data>
ILI9341_Write_Data(0x0C);
 8002626:	200c      	movs	r0, #12
 8002628:	f7ff fe20 	bl	800226c <ILI9341_Write_Data>
ILI9341_Write_Data(0x31);
 800262c:	2031      	movs	r0, #49	; 0x31
 800262e:	f7ff fe1d 	bl	800226c <ILI9341_Write_Data>
ILI9341_Write_Data(0x36);
 8002632:	2036      	movs	r0, #54	; 0x36
 8002634:	f7ff fe1a 	bl	800226c <ILI9341_Write_Data>
ILI9341_Write_Data(0x0F);
 8002638:	200f      	movs	r0, #15
 800263a:	f7ff fe17 	bl	800226c <ILI9341_Write_Data>

//EXIT SLEEP
ILI9341_Write_Command(0x11);
 800263e:	2011      	movs	r0, #17
 8002640:	f7ff fdf2 	bl	8002228 <ILI9341_Write_Command>
HAL_Delay(120);
 8002644:	2078      	movs	r0, #120	; 0x78
 8002646:	f000 fba5 	bl	8002d94 <HAL_Delay>

//TURN ON DISPLAY
ILI9341_Write_Command(0x29);
 800264a:	2029      	movs	r0, #41	; 0x29
 800264c:	f7ff fdec 	bl	8002228 <ILI9341_Write_Command>

//STARTING ROTATION
ILI9341_Set_Rotation(SCREEN_VERTICAL_1);
 8002650:	2000      	movs	r0, #0
 8002652:	f7ff fe97 	bl	8002384 <ILI9341_Set_Rotation>
}
 8002656:	bf00      	nop
 8002658:	bd80      	pop	{r7, pc}
	...

0800265c <ILI9341_Draw_Colour_Burst>:
}

//INTERNAL FUNCTION OF LIBRARY
/*Sends block colour information to LCD*/
void ILI9341_Draw_Colour_Burst(uint16_t Colour, uint32_t Size)
{
 800265c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002660:	b08d      	sub	sp, #52	; 0x34
 8002662:	af00      	add	r7, sp, #0
 8002664:	4603      	mov	r3, r0
 8002666:	6039      	str	r1, [r7, #0]
 8002668:	80fb      	strh	r3, [r7, #6]
 800266a:	466b      	mov	r3, sp
 800266c:	461e      	mov	r6, r3
//SENDS COLOUR
uint32_t Buffer_Size = 0;
 800266e:	2300      	movs	r3, #0
 8002670:	62fb      	str	r3, [r7, #44]	; 0x2c
if((Size*2) < BURST_MAX_SIZE)
 8002672:	683b      	ldr	r3, [r7, #0]
 8002674:	005b      	lsls	r3, r3, #1
 8002676:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800267a:	d202      	bcs.n	8002682 <ILI9341_Draw_Colour_Burst+0x26>
{
	Buffer_Size = Size;
 800267c:	683b      	ldr	r3, [r7, #0]
 800267e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002680:	e002      	b.n	8002688 <ILI9341_Draw_Colour_Burst+0x2c>
}
else
{
	Buffer_Size = BURST_MAX_SIZE;
 8002682:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8002686:	62fb      	str	r3, [r7, #44]	; 0x2c
}
	
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	
 8002688:	2201      	movs	r2, #1
 800268a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800268e:	4840      	ldr	r0, [pc, #256]	; (8002790 <ILI9341_Draw_Colour_Burst+0x134>)
 8002690:	f001 f902 	bl	8003898 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8002694:	2200      	movs	r2, #0
 8002696:	f44f 7180 	mov.w	r1, #256	; 0x100
 800269a:	483d      	ldr	r0, [pc, #244]	; (8002790 <ILI9341_Draw_Colour_Burst+0x134>)
 800269c:	f001 f8fc 	bl	8003898 <HAL_GPIO_WritePin>

unsigned char chifted = 	Colour>>8;;
 80026a0:	88fb      	ldrh	r3, [r7, #6]
 80026a2:	0a1b      	lsrs	r3, r3, #8
 80026a4:	b29b      	uxth	r3, r3
 80026a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
unsigned char burst_buffer[Buffer_Size];
 80026aa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80026ac:	460b      	mov	r3, r1
 80026ae:	3b01      	subs	r3, #1
 80026b0:	61fb      	str	r3, [r7, #28]
 80026b2:	2300      	movs	r3, #0
 80026b4:	4688      	mov	r8, r1
 80026b6:	4699      	mov	r9, r3
 80026b8:	f04f 0200 	mov.w	r2, #0
 80026bc:	f04f 0300 	mov.w	r3, #0
 80026c0:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80026c4:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80026c8:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80026cc:	2300      	movs	r3, #0
 80026ce:	460c      	mov	r4, r1
 80026d0:	461d      	mov	r5, r3
 80026d2:	f04f 0200 	mov.w	r2, #0
 80026d6:	f04f 0300 	mov.w	r3, #0
 80026da:	00eb      	lsls	r3, r5, #3
 80026dc:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80026e0:	00e2      	lsls	r2, r4, #3
 80026e2:	1dcb      	adds	r3, r1, #7
 80026e4:	08db      	lsrs	r3, r3, #3
 80026e6:	00db      	lsls	r3, r3, #3
 80026e8:	ebad 0d03 	sub.w	sp, sp, r3
 80026ec:	466b      	mov	r3, sp
 80026ee:	3300      	adds	r3, #0
 80026f0:	61bb      	str	r3, [r7, #24]
for(uint32_t j = 0; j < Buffer_Size; j+=2)
 80026f2:	2300      	movs	r3, #0
 80026f4:	62bb      	str	r3, [r7, #40]	; 0x28
 80026f6:	e00e      	b.n	8002716 <ILI9341_Draw_Colour_Burst+0xba>
	{
		burst_buffer[j] = 	chifted;
 80026f8:	69ba      	ldr	r2, [r7, #24]
 80026fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026fc:	4413      	add	r3, r2
 80026fe:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8002702:	701a      	strb	r2, [r3, #0]
		burst_buffer[j+1] = Colour;
 8002704:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002706:	3301      	adds	r3, #1
 8002708:	88fa      	ldrh	r2, [r7, #6]
 800270a:	b2d1      	uxtb	r1, r2
 800270c:	69ba      	ldr	r2, [r7, #24]
 800270e:	54d1      	strb	r1, [r2, r3]
for(uint32_t j = 0; j < Buffer_Size; j+=2)
 8002710:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002712:	3302      	adds	r3, #2
 8002714:	62bb      	str	r3, [r7, #40]	; 0x28
 8002716:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002718:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800271a:	429a      	cmp	r2, r3
 800271c:	d3ec      	bcc.n	80026f8 <ILI9341_Draw_Colour_Burst+0x9c>
	}

uint32_t Sending_Size = Size*2;
 800271e:	683b      	ldr	r3, [r7, #0]
 8002720:	005b      	lsls	r3, r3, #1
 8002722:	617b      	str	r3, [r7, #20]
uint32_t Sending_in_Block = Sending_Size/Buffer_Size;
 8002724:	697a      	ldr	r2, [r7, #20]
 8002726:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002728:	fbb2 f3f3 	udiv	r3, r2, r3
 800272c:	613b      	str	r3, [r7, #16]
uint32_t Remainder_from_block = Sending_Size%Buffer_Size;
 800272e:	697b      	ldr	r3, [r7, #20]
 8002730:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002732:	fbb3 f2f2 	udiv	r2, r3, r2
 8002736:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002738:	fb01 f202 	mul.w	r2, r1, r2
 800273c:	1a9b      	subs	r3, r3, r2
 800273e:	60fb      	str	r3, [r7, #12]

if(Sending_in_Block != 0)
 8002740:	693b      	ldr	r3, [r7, #16]
 8002742:	2b00      	cmp	r3, #0
 8002744:	d010      	beq.n	8002768 <ILI9341_Draw_Colour_Burst+0x10c>
{
	for(uint32_t j = 0; j < (Sending_in_Block); j++)
 8002746:	2300      	movs	r3, #0
 8002748:	627b      	str	r3, [r7, #36]	; 0x24
 800274a:	e009      	b.n	8002760 <ILI9341_Draw_Colour_Burst+0x104>
		{
		HAL_SPI_Transmit(HSPI_INSTANCE, (unsigned char *)burst_buffer, Buffer_Size, 10);	
 800274c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800274e:	b29a      	uxth	r2, r3
 8002750:	230a      	movs	r3, #10
 8002752:	69b9      	ldr	r1, [r7, #24]
 8002754:	480f      	ldr	r0, [pc, #60]	; (8002794 <ILI9341_Draw_Colour_Burst+0x138>)
 8002756:	f002 ffdc 	bl	8005712 <HAL_SPI_Transmit>
	for(uint32_t j = 0; j < (Sending_in_Block); j++)
 800275a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800275c:	3301      	adds	r3, #1
 800275e:	627b      	str	r3, [r7, #36]	; 0x24
 8002760:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002762:	693b      	ldr	r3, [r7, #16]
 8002764:	429a      	cmp	r2, r3
 8002766:	d3f1      	bcc.n	800274c <ILI9341_Draw_Colour_Burst+0xf0>
		}
}

//REMAINDER!
HAL_SPI_Transmit(HSPI_INSTANCE, (unsigned char *)burst_buffer, Remainder_from_block, 10);	
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	b29a      	uxth	r2, r3
 800276c:	230a      	movs	r3, #10
 800276e:	69b9      	ldr	r1, [r7, #24]
 8002770:	4808      	ldr	r0, [pc, #32]	; (8002794 <ILI9341_Draw_Colour_Burst+0x138>)
 8002772:	f002 ffce 	bl	8005712 <HAL_SPI_Transmit>
	
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8002776:	2201      	movs	r2, #1
 8002778:	f44f 7180 	mov.w	r1, #256	; 0x100
 800277c:	4804      	ldr	r0, [pc, #16]	; (8002790 <ILI9341_Draw_Colour_Burst+0x134>)
 800277e:	f001 f88b 	bl	8003898 <HAL_GPIO_WritePin>
 8002782:	46b5      	mov	sp, r6
}
 8002784:	bf00      	nop
 8002786:	3734      	adds	r7, #52	; 0x34
 8002788:	46bd      	mov	sp, r7
 800278a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800278e:	bf00      	nop
 8002790:	40020800 	.word	0x40020800
 8002794:	200002d0 	.word	0x200002d0

08002798 <ILI9341_Fill_Screen>:

//FILL THE ENTIRE SCREEN WITH SELECTED COLOUR (either #define-d ones or custom 16bit)
/*Sets address (entire screen) and Sends Height*Width ammount of colour information to LCD*/
void ILI9341_Fill_Screen(uint16_t Colour)
{
 8002798:	b580      	push	{r7, lr}
 800279a:	b082      	sub	sp, #8
 800279c:	af00      	add	r7, sp, #0
 800279e:	4603      	mov	r3, r0
 80027a0:	80fb      	strh	r3, [r7, #6]
ILI9341_Set_Address(0,0,LCD_WIDTH,LCD_HEIGHT);	
 80027a2:	4b0e      	ldr	r3, [pc, #56]	; (80027dc <ILI9341_Fill_Screen+0x44>)
 80027a4:	881b      	ldrh	r3, [r3, #0]
 80027a6:	b29a      	uxth	r2, r3
 80027a8:	4b0d      	ldr	r3, [pc, #52]	; (80027e0 <ILI9341_Fill_Screen+0x48>)
 80027aa:	881b      	ldrh	r3, [r3, #0]
 80027ac:	b29b      	uxth	r3, r3
 80027ae:	2100      	movs	r1, #0
 80027b0:	2000      	movs	r0, #0
 80027b2:	f7ff fd7d 	bl	80022b0 <ILI9341_Set_Address>
ILI9341_Draw_Colour_Burst(Colour, LCD_WIDTH*LCD_HEIGHT);	
 80027b6:	4b09      	ldr	r3, [pc, #36]	; (80027dc <ILI9341_Fill_Screen+0x44>)
 80027b8:	881b      	ldrh	r3, [r3, #0]
 80027ba:	b29b      	uxth	r3, r3
 80027bc:	461a      	mov	r2, r3
 80027be:	4b08      	ldr	r3, [pc, #32]	; (80027e0 <ILI9341_Fill_Screen+0x48>)
 80027c0:	881b      	ldrh	r3, [r3, #0]
 80027c2:	b29b      	uxth	r3, r3
 80027c4:	fb02 f303 	mul.w	r3, r2, r3
 80027c8:	461a      	mov	r2, r3
 80027ca:	88fb      	ldrh	r3, [r7, #6]
 80027cc:	4611      	mov	r1, r2
 80027ce:	4618      	mov	r0, r3
 80027d0:	f7ff ff44 	bl	800265c <ILI9341_Draw_Colour_Burst>
}
 80027d4:	bf00      	nop
 80027d6:	3708      	adds	r7, #8
 80027d8:	46bd      	mov	sp, r7
 80027da:	bd80      	pop	{r7, pc}
 80027dc:	20000022 	.word	0x20000022
 80027e0:	20000020 	.word	0x20000020

080027e4 <ILI9341_Draw_Pixel>:
//Location is dependant on screen orientation. x0 and y0 locations change with orientations.
//Using pixels to draw big simple structures is not recommended as it is really slow
//Try using either rectangles or lines if possible
//
void ILI9341_Draw_Pixel(uint16_t X,uint16_t Y,uint16_t Colour) 
{
 80027e4:	b580      	push	{r7, lr}
 80027e6:	b086      	sub	sp, #24
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	4603      	mov	r3, r0
 80027ec:	80fb      	strh	r3, [r7, #6]
 80027ee:	460b      	mov	r3, r1
 80027f0:	80bb      	strh	r3, [r7, #4]
 80027f2:	4613      	mov	r3, r2
 80027f4:	807b      	strh	r3, [r7, #2]
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;	//OUT OF BOUNDS!
 80027f6:	4b64      	ldr	r3, [pc, #400]	; (8002988 <ILI9341_Draw_Pixel+0x1a4>)
 80027f8:	881b      	ldrh	r3, [r3, #0]
 80027fa:	b29b      	uxth	r3, r3
 80027fc:	88fa      	ldrh	r2, [r7, #6]
 80027fe:	429a      	cmp	r2, r3
 8002800:	f080 80be 	bcs.w	8002980 <ILI9341_Draw_Pixel+0x19c>
 8002804:	4b61      	ldr	r3, [pc, #388]	; (800298c <ILI9341_Draw_Pixel+0x1a8>)
 8002806:	881b      	ldrh	r3, [r3, #0]
 8002808:	b29b      	uxth	r3, r3
 800280a:	88ba      	ldrh	r2, [r7, #4]
 800280c:	429a      	cmp	r2, r3
 800280e:	f080 80b7 	bcs.w	8002980 <ILI9341_Draw_Pixel+0x19c>
	
//ADDRESS
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	
 8002812:	2200      	movs	r2, #0
 8002814:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002818:	485d      	ldr	r0, [pc, #372]	; (8002990 <ILI9341_Draw_Pixel+0x1ac>)
 800281a:	f001 f83d 	bl	8003898 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 800281e:	2200      	movs	r2, #0
 8002820:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002824:	485a      	ldr	r0, [pc, #360]	; (8002990 <ILI9341_Draw_Pixel+0x1ac>)
 8002826:	f001 f837 	bl	8003898 <HAL_GPIO_WritePin>
ILI9341_SPI_Send(0x2A);
 800282a:	202a      	movs	r0, #42	; 0x2a
 800282c:	f7ff fcea 	bl	8002204 <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	
 8002830:	2201      	movs	r2, #1
 8002832:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002836:	4856      	ldr	r0, [pc, #344]	; (8002990 <ILI9341_Draw_Pixel+0x1ac>)
 8002838:	f001 f82e 	bl	8003898 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);		
 800283c:	2201      	movs	r2, #1
 800283e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002842:	4853      	ldr	r0, [pc, #332]	; (8002990 <ILI9341_Draw_Pixel+0x1ac>)
 8002844:	f001 f828 	bl	8003898 <HAL_GPIO_WritePin>

//XDATA
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	
 8002848:	2200      	movs	r2, #0
 800284a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800284e:	4850      	ldr	r0, [pc, #320]	; (8002990 <ILI9341_Draw_Pixel+0x1ac>)
 8002850:	f001 f822 	bl	8003898 <HAL_GPIO_WritePin>
unsigned char Temp_Buffer[4] = {X>>8,X, (X+1)>>8, (X+1)};
 8002854:	88fb      	ldrh	r3, [r7, #6]
 8002856:	0a1b      	lsrs	r3, r3, #8
 8002858:	b29b      	uxth	r3, r3
 800285a:	b2db      	uxtb	r3, r3
 800285c:	753b      	strb	r3, [r7, #20]
 800285e:	88fb      	ldrh	r3, [r7, #6]
 8002860:	b2db      	uxtb	r3, r3
 8002862:	757b      	strb	r3, [r7, #21]
 8002864:	88fb      	ldrh	r3, [r7, #6]
 8002866:	3301      	adds	r3, #1
 8002868:	121b      	asrs	r3, r3, #8
 800286a:	b2db      	uxtb	r3, r3
 800286c:	75bb      	strb	r3, [r7, #22]
 800286e:	88fb      	ldrh	r3, [r7, #6]
 8002870:	b2db      	uxtb	r3, r3
 8002872:	3301      	adds	r3, #1
 8002874:	b2db      	uxtb	r3, r3
 8002876:	75fb      	strb	r3, [r7, #23]
HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer, 4, 1);
 8002878:	f107 0114 	add.w	r1, r7, #20
 800287c:	2301      	movs	r3, #1
 800287e:	2204      	movs	r2, #4
 8002880:	4844      	ldr	r0, [pc, #272]	; (8002994 <ILI9341_Draw_Pixel+0x1b0>)
 8002882:	f002 ff46 	bl	8005712 <HAL_SPI_Transmit>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8002886:	2201      	movs	r2, #1
 8002888:	f44f 7180 	mov.w	r1, #256	; 0x100
 800288c:	4840      	ldr	r0, [pc, #256]	; (8002990 <ILI9341_Draw_Pixel+0x1ac>)
 800288e:	f001 f803 	bl	8003898 <HAL_GPIO_WritePin>

//ADDRESS
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	
 8002892:	2200      	movs	r2, #0
 8002894:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002898:	483d      	ldr	r0, [pc, #244]	; (8002990 <ILI9341_Draw_Pixel+0x1ac>)
 800289a:	f000 fffd 	bl	8003898 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	
 800289e:	2200      	movs	r2, #0
 80028a0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80028a4:	483a      	ldr	r0, [pc, #232]	; (8002990 <ILI9341_Draw_Pixel+0x1ac>)
 80028a6:	f000 fff7 	bl	8003898 <HAL_GPIO_WritePin>
ILI9341_SPI_Send(0x2B);
 80028aa:	202b      	movs	r0, #43	; 0x2b
 80028ac:	f7ff fcaa 	bl	8002204 <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);			
 80028b0:	2201      	movs	r2, #1
 80028b2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80028b6:	4836      	ldr	r0, [pc, #216]	; (8002990 <ILI9341_Draw_Pixel+0x1ac>)
 80028b8:	f000 ffee 	bl	8003898 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);			
 80028bc:	2201      	movs	r2, #1
 80028be:	f44f 7180 	mov.w	r1, #256	; 0x100
 80028c2:	4833      	ldr	r0, [pc, #204]	; (8002990 <ILI9341_Draw_Pixel+0x1ac>)
 80028c4:	f000 ffe8 	bl	8003898 <HAL_GPIO_WritePin>

//YDATA
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 80028c8:	2200      	movs	r2, #0
 80028ca:	f44f 7180 	mov.w	r1, #256	; 0x100
 80028ce:	4830      	ldr	r0, [pc, #192]	; (8002990 <ILI9341_Draw_Pixel+0x1ac>)
 80028d0:	f000 ffe2 	bl	8003898 <HAL_GPIO_WritePin>
unsigned char Temp_Buffer1[4] = {Y>>8,Y, (Y+1)>>8, (Y+1)};
 80028d4:	88bb      	ldrh	r3, [r7, #4]
 80028d6:	0a1b      	lsrs	r3, r3, #8
 80028d8:	b29b      	uxth	r3, r3
 80028da:	b2db      	uxtb	r3, r3
 80028dc:	743b      	strb	r3, [r7, #16]
 80028de:	88bb      	ldrh	r3, [r7, #4]
 80028e0:	b2db      	uxtb	r3, r3
 80028e2:	747b      	strb	r3, [r7, #17]
 80028e4:	88bb      	ldrh	r3, [r7, #4]
 80028e6:	3301      	adds	r3, #1
 80028e8:	121b      	asrs	r3, r3, #8
 80028ea:	b2db      	uxtb	r3, r3
 80028ec:	74bb      	strb	r3, [r7, #18]
 80028ee:	88bb      	ldrh	r3, [r7, #4]
 80028f0:	b2db      	uxtb	r3, r3
 80028f2:	3301      	adds	r3, #1
 80028f4:	b2db      	uxtb	r3, r3
 80028f6:	74fb      	strb	r3, [r7, #19]
HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer1, 4, 1);
 80028f8:	f107 0110 	add.w	r1, r7, #16
 80028fc:	2301      	movs	r3, #1
 80028fe:	2204      	movs	r2, #4
 8002900:	4824      	ldr	r0, [pc, #144]	; (8002994 <ILI9341_Draw_Pixel+0x1b0>)
 8002902:	f002 ff06 	bl	8005712 <HAL_SPI_Transmit>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8002906:	2201      	movs	r2, #1
 8002908:	f44f 7180 	mov.w	r1, #256	; 0x100
 800290c:	4820      	ldr	r0, [pc, #128]	; (8002990 <ILI9341_Draw_Pixel+0x1ac>)
 800290e:	f000 ffc3 	bl	8003898 <HAL_GPIO_WritePin>

//ADDRESS	
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	
 8002912:	2200      	movs	r2, #0
 8002914:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002918:	481d      	ldr	r0, [pc, #116]	; (8002990 <ILI9341_Draw_Pixel+0x1ac>)
 800291a:	f000 ffbd 	bl	8003898 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	
 800291e:	2200      	movs	r2, #0
 8002920:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002924:	481a      	ldr	r0, [pc, #104]	; (8002990 <ILI9341_Draw_Pixel+0x1ac>)
 8002926:	f000 ffb7 	bl	8003898 <HAL_GPIO_WritePin>
ILI9341_SPI_Send(0x2C);
 800292a:	202c      	movs	r0, #44	; 0x2c
 800292c:	f7ff fc6a 	bl	8002204 <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);			
 8002930:	2201      	movs	r2, #1
 8002932:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002936:	4816      	ldr	r0, [pc, #88]	; (8002990 <ILI9341_Draw_Pixel+0x1ac>)
 8002938:	f000 ffae 	bl	8003898 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);			
 800293c:	2201      	movs	r2, #1
 800293e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002942:	4813      	ldr	r0, [pc, #76]	; (8002990 <ILI9341_Draw_Pixel+0x1ac>)
 8002944:	f000 ffa8 	bl	8003898 <HAL_GPIO_WritePin>

//COLOUR	
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8002948:	2200      	movs	r2, #0
 800294a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800294e:	4810      	ldr	r0, [pc, #64]	; (8002990 <ILI9341_Draw_Pixel+0x1ac>)
 8002950:	f000 ffa2 	bl	8003898 <HAL_GPIO_WritePin>
unsigned char Temp_Buffer2[2] = {Colour>>8, Colour};
 8002954:	887b      	ldrh	r3, [r7, #2]
 8002956:	0a1b      	lsrs	r3, r3, #8
 8002958:	b29b      	uxth	r3, r3
 800295a:	b2db      	uxtb	r3, r3
 800295c:	733b      	strb	r3, [r7, #12]
 800295e:	887b      	ldrh	r3, [r7, #2]
 8002960:	b2db      	uxtb	r3, r3
 8002962:	737b      	strb	r3, [r7, #13]
HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer2, 2, 1);
 8002964:	f107 010c 	add.w	r1, r7, #12
 8002968:	2301      	movs	r3, #1
 800296a:	2202      	movs	r2, #2
 800296c:	4809      	ldr	r0, [pc, #36]	; (8002994 <ILI9341_Draw_Pixel+0x1b0>)
 800296e:	f002 fed0 	bl	8005712 <HAL_SPI_Transmit>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8002972:	2201      	movs	r2, #1
 8002974:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002978:	4805      	ldr	r0, [pc, #20]	; (8002990 <ILI9341_Draw_Pixel+0x1ac>)
 800297a:	f000 ff8d 	bl	8003898 <HAL_GPIO_WritePin>
 800297e:	e000      	b.n	8002982 <ILI9341_Draw_Pixel+0x19e>
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;	//OUT OF BOUNDS!
 8002980:	bf00      	nop
	
}
 8002982:	3718      	adds	r7, #24
 8002984:	46bd      	mov	sp, r7
 8002986:	bd80      	pop	{r7, pc}
 8002988:	20000022 	.word	0x20000022
 800298c:	20000020 	.word	0x20000020
 8002990:	40020800 	.word	0x40020800
 8002994:	200002d0 	.word	0x200002d0

08002998 <ILI9341_Draw_Rectangle>:
//Rectangle is hollow. X and Y positions mark the upper left corner of rectangle
//As with all other draw calls x0 and y0 locations dependant on screen orientation
//

void ILI9341_Draw_Rectangle(uint16_t X, uint16_t Y, uint16_t Width, uint16_t Height, uint16_t Colour)
{
 8002998:	b590      	push	{r4, r7, lr}
 800299a:	b083      	sub	sp, #12
 800299c:	af00      	add	r7, sp, #0
 800299e:	4604      	mov	r4, r0
 80029a0:	4608      	mov	r0, r1
 80029a2:	4611      	mov	r1, r2
 80029a4:	461a      	mov	r2, r3
 80029a6:	4623      	mov	r3, r4
 80029a8:	80fb      	strh	r3, [r7, #6]
 80029aa:	4603      	mov	r3, r0
 80029ac:	80bb      	strh	r3, [r7, #4]
 80029ae:	460b      	mov	r3, r1
 80029b0:	807b      	strh	r3, [r7, #2]
 80029b2:	4613      	mov	r3, r2
 80029b4:	803b      	strh	r3, [r7, #0]
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;
 80029b6:	4b24      	ldr	r3, [pc, #144]	; (8002a48 <ILI9341_Draw_Rectangle+0xb0>)
 80029b8:	881b      	ldrh	r3, [r3, #0]
 80029ba:	b29b      	uxth	r3, r3
 80029bc:	88fa      	ldrh	r2, [r7, #6]
 80029be:	429a      	cmp	r2, r3
 80029c0:	d23d      	bcs.n	8002a3e <ILI9341_Draw_Rectangle+0xa6>
 80029c2:	4b22      	ldr	r3, [pc, #136]	; (8002a4c <ILI9341_Draw_Rectangle+0xb4>)
 80029c4:	881b      	ldrh	r3, [r3, #0]
 80029c6:	b29b      	uxth	r3, r3
 80029c8:	88ba      	ldrh	r2, [r7, #4]
 80029ca:	429a      	cmp	r2, r3
 80029cc:	d237      	bcs.n	8002a3e <ILI9341_Draw_Rectangle+0xa6>
if((X+Width-1)>=LCD_WIDTH)
 80029ce:	88fa      	ldrh	r2, [r7, #6]
 80029d0:	887b      	ldrh	r3, [r7, #2]
 80029d2:	4413      	add	r3, r2
 80029d4:	4a1c      	ldr	r2, [pc, #112]	; (8002a48 <ILI9341_Draw_Rectangle+0xb0>)
 80029d6:	8812      	ldrh	r2, [r2, #0]
 80029d8:	b292      	uxth	r2, r2
 80029da:	4293      	cmp	r3, r2
 80029dc:	dd05      	ble.n	80029ea <ILI9341_Draw_Rectangle+0x52>
	{
		Width=LCD_WIDTH-X;
 80029de:	4b1a      	ldr	r3, [pc, #104]	; (8002a48 <ILI9341_Draw_Rectangle+0xb0>)
 80029e0:	881b      	ldrh	r3, [r3, #0]
 80029e2:	b29a      	uxth	r2, r3
 80029e4:	88fb      	ldrh	r3, [r7, #6]
 80029e6:	1ad3      	subs	r3, r2, r3
 80029e8:	807b      	strh	r3, [r7, #2]
	}
if((Y+Height-1)>=LCD_HEIGHT)
 80029ea:	88ba      	ldrh	r2, [r7, #4]
 80029ec:	883b      	ldrh	r3, [r7, #0]
 80029ee:	4413      	add	r3, r2
 80029f0:	4a16      	ldr	r2, [pc, #88]	; (8002a4c <ILI9341_Draw_Rectangle+0xb4>)
 80029f2:	8812      	ldrh	r2, [r2, #0]
 80029f4:	b292      	uxth	r2, r2
 80029f6:	4293      	cmp	r3, r2
 80029f8:	dd05      	ble.n	8002a06 <ILI9341_Draw_Rectangle+0x6e>
	{
		Height=LCD_HEIGHT-Y;
 80029fa:	4b14      	ldr	r3, [pc, #80]	; (8002a4c <ILI9341_Draw_Rectangle+0xb4>)
 80029fc:	881b      	ldrh	r3, [r3, #0]
 80029fe:	b29a      	uxth	r2, r3
 8002a00:	88bb      	ldrh	r3, [r7, #4]
 8002a02:	1ad3      	subs	r3, r2, r3
 8002a04:	803b      	strh	r3, [r7, #0]
	}
ILI9341_Set_Address(X, Y, X+Width-1, Y+Height-1);
 8002a06:	88fa      	ldrh	r2, [r7, #6]
 8002a08:	887b      	ldrh	r3, [r7, #2]
 8002a0a:	4413      	add	r3, r2
 8002a0c:	b29b      	uxth	r3, r3
 8002a0e:	3b01      	subs	r3, #1
 8002a10:	b29c      	uxth	r4, r3
 8002a12:	88ba      	ldrh	r2, [r7, #4]
 8002a14:	883b      	ldrh	r3, [r7, #0]
 8002a16:	4413      	add	r3, r2
 8002a18:	b29b      	uxth	r3, r3
 8002a1a:	3b01      	subs	r3, #1
 8002a1c:	b29b      	uxth	r3, r3
 8002a1e:	88b9      	ldrh	r1, [r7, #4]
 8002a20:	88f8      	ldrh	r0, [r7, #6]
 8002a22:	4622      	mov	r2, r4
 8002a24:	f7ff fc44 	bl	80022b0 <ILI9341_Set_Address>
ILI9341_Draw_Colour_Burst(Colour, Height*Width);
 8002a28:	883b      	ldrh	r3, [r7, #0]
 8002a2a:	887a      	ldrh	r2, [r7, #2]
 8002a2c:	fb02 f303 	mul.w	r3, r2, r3
 8002a30:	461a      	mov	r2, r3
 8002a32:	8b3b      	ldrh	r3, [r7, #24]
 8002a34:	4611      	mov	r1, r2
 8002a36:	4618      	mov	r0, r3
 8002a38:	f7ff fe10 	bl	800265c <ILI9341_Draw_Colour_Burst>
 8002a3c:	e000      	b.n	8002a40 <ILI9341_Draw_Rectangle+0xa8>
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;
 8002a3e:	bf00      	nop
}
 8002a40:	370c      	adds	r7, #12
 8002a42:	46bd      	mov	sp, r7
 8002a44:	bd90      	pop	{r4, r7, pc}
 8002a46:	bf00      	nop
 8002a48:	20000022 	.word	0x20000022
 8002a4c:	20000020 	.word	0x20000020

08002a50 <TP_Read>:
#include "ILI9341_Touchscreen.h"
#include "stm32f7xx_hal.h"

//Internal Touchpad command, do not call directly
uint16_t TP_Read(void)
{
 8002a50:	b580      	push	{r7, lr}
 8002a52:	b082      	sub	sp, #8
 8002a54:	af00      	add	r7, sp, #0
    uint8_t i = 16;
 8002a56:	2310      	movs	r3, #16
 8002a58:	71fb      	strb	r3, [r7, #7]
    uint16_t value = 0;
 8002a5a:	2300      	movs	r3, #0
 8002a5c:	80bb      	strh	r3, [r7, #4]

    while(i > 0x00)
 8002a5e:	e019      	b.n	8002a94 <TP_Read+0x44>
    {
        value <<= 1;
 8002a60:	88bb      	ldrh	r3, [r7, #4]
 8002a62:	005b      	lsls	r3, r3, #1
 8002a64:	80bb      	strh	r3, [r7, #4]

				HAL_GPIO_WritePin(TP_CLK_PORT, TP_CLK_PIN, GPIO_PIN_SET);
 8002a66:	2201      	movs	r2, #1
 8002a68:	2108      	movs	r1, #8
 8002a6a:	480e      	ldr	r0, [pc, #56]	; (8002aa4 <TP_Read+0x54>)
 8002a6c:	f000 ff14 	bl	8003898 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(TP_CLK_PORT, TP_CLK_PIN, GPIO_PIN_RESET);
 8002a70:	2200      	movs	r2, #0
 8002a72:	2108      	movs	r1, #8
 8002a74:	480b      	ldr	r0, [pc, #44]	; (8002aa4 <TP_Read+0x54>)
 8002a76:	f000 ff0f 	bl	8003898 <HAL_GPIO_WritePin>
			
        if(HAL_GPIO_ReadPin(TP_MISO_PORT, TP_MISO_PIN) != 0)
 8002a7a:	2110      	movs	r1, #16
 8002a7c:	4809      	ldr	r0, [pc, #36]	; (8002aa4 <TP_Read+0x54>)
 8002a7e:	f000 fef3 	bl	8003868 <HAL_GPIO_ReadPin>
 8002a82:	4603      	mov	r3, r0
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d002      	beq.n	8002a8e <TP_Read+0x3e>
        {
            value++;
 8002a88:	88bb      	ldrh	r3, [r7, #4]
 8002a8a:	3301      	adds	r3, #1
 8002a8c:	80bb      	strh	r3, [r7, #4]
        }

        i--;
 8002a8e:	79fb      	ldrb	r3, [r7, #7]
 8002a90:	3b01      	subs	r3, #1
 8002a92:	71fb      	strb	r3, [r7, #7]
    while(i > 0x00)
 8002a94:	79fb      	ldrb	r3, [r7, #7]
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d1e2      	bne.n	8002a60 <TP_Read+0x10>
    };

    return value;
 8002a9a:	88bb      	ldrh	r3, [r7, #4]
}
 8002a9c:	4618      	mov	r0, r3
 8002a9e:	3708      	adds	r7, #8
 8002aa0:	46bd      	mov	sp, r7
 8002aa2:	bd80      	pop	{r7, pc}
 8002aa4:	40021000 	.word	0x40021000

08002aa8 <TP_Write>:

//Internal Touchpad command, do not call directly
void TP_Write(uint8_t value)
{
 8002aa8:	b580      	push	{r7, lr}
 8002aaa:	b084      	sub	sp, #16
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	4603      	mov	r3, r0
 8002ab0:	71fb      	strb	r3, [r7, #7]
    uint8_t i = 0x08;
 8002ab2:	2308      	movs	r3, #8
 8002ab4:	73fb      	strb	r3, [r7, #15]

		HAL_GPIO_WritePin(TP_CLK_PORT, TP_CLK_PIN, GPIO_PIN_RESET);	
 8002ab6:	2200      	movs	r2, #0
 8002ab8:	2108      	movs	r1, #8
 8002aba:	4815      	ldr	r0, [pc, #84]	; (8002b10 <TP_Write+0x68>)
 8002abc:	f000 feec 	bl	8003898 <HAL_GPIO_WritePin>
	
    while(i > 0)
 8002ac0:	e01e      	b.n	8002b00 <TP_Write+0x58>
    {
        if((value & 0x80) != 0x00)
 8002ac2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	da05      	bge.n	8002ad6 <TP_Write+0x2e>
        {
						HAL_GPIO_WritePin(TP_MOSI_PORT, TP_MOSI_PIN, GPIO_PIN_SET);
 8002aca:	2201      	movs	r2, #1
 8002acc:	2120      	movs	r1, #32
 8002ace:	4810      	ldr	r0, [pc, #64]	; (8002b10 <TP_Write+0x68>)
 8002ad0:	f000 fee2 	bl	8003898 <HAL_GPIO_WritePin>
 8002ad4:	e004      	b.n	8002ae0 <TP_Write+0x38>
        }
        else
        {
						HAL_GPIO_WritePin(TP_MOSI_PORT, TP_MOSI_PIN, GPIO_PIN_RESET);
 8002ad6:	2200      	movs	r2, #0
 8002ad8:	2120      	movs	r1, #32
 8002ada:	480d      	ldr	r0, [pc, #52]	; (8002b10 <TP_Write+0x68>)
 8002adc:	f000 fedc 	bl	8003898 <HAL_GPIO_WritePin>
        }

        value <<= 1;
 8002ae0:	79fb      	ldrb	r3, [r7, #7]
 8002ae2:	005b      	lsls	r3, r3, #1
 8002ae4:	71fb      	strb	r3, [r7, #7]
				HAL_GPIO_WritePin(TP_CLK_PORT, TP_CLK_PIN, GPIO_PIN_SET);
 8002ae6:	2201      	movs	r2, #1
 8002ae8:	2108      	movs	r1, #8
 8002aea:	4809      	ldr	r0, [pc, #36]	; (8002b10 <TP_Write+0x68>)
 8002aec:	f000 fed4 	bl	8003898 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(TP_CLK_PORT, TP_CLK_PIN, GPIO_PIN_RESET);        
 8002af0:	2200      	movs	r2, #0
 8002af2:	2108      	movs	r1, #8
 8002af4:	4806      	ldr	r0, [pc, #24]	; (8002b10 <TP_Write+0x68>)
 8002af6:	f000 fecf 	bl	8003898 <HAL_GPIO_WritePin>
        i--;
 8002afa:	7bfb      	ldrb	r3, [r7, #15]
 8002afc:	3b01      	subs	r3, #1
 8002afe:	73fb      	strb	r3, [r7, #15]
    while(i > 0)
 8002b00:	7bfb      	ldrb	r3, [r7, #15]
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d1dd      	bne.n	8002ac2 <TP_Write+0x1a>
    };
}
 8002b06:	bf00      	nop
 8002b08:	bf00      	nop
 8002b0a:	3710      	adds	r7, #16
 8002b0c:	46bd      	mov	sp, r7
 8002b0e:	bd80      	pop	{r7, pc}
 8002b10:	40021000 	.word	0x40021000
 8002b14:	00000000 	.word	0x00000000

08002b18 <TP_Read_Coordinates>:



//Read coordinates of touchscreen press. Position[0] = X, Position[1] = Y
uint8_t TP_Read_Coordinates(uint16_t Coordinates[2])
{
 8002b18:	b580      	push	{r7, lr}
 8002b1a:	b08a      	sub	sp, #40	; 0x28
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	6078      	str	r0, [r7, #4]
		HAL_GPIO_WritePin(TP_CLK_PORT, TP_CLK_PIN, GPIO_PIN_SET);		
 8002b20:	2201      	movs	r2, #1
 8002b22:	2108      	movs	r1, #8
 8002b24:	485a      	ldr	r0, [pc, #360]	; (8002c90 <TP_Read_Coordinates+0x178>)
 8002b26:	f000 feb7 	bl	8003898 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(TP_MOSI_PORT, TP_MOSI_PIN, GPIO_PIN_SET);		
 8002b2a:	2201      	movs	r2, #1
 8002b2c:	2120      	movs	r1, #32
 8002b2e:	4858      	ldr	r0, [pc, #352]	; (8002c90 <TP_Read_Coordinates+0x178>)
 8002b30:	f000 feb2 	bl	8003898 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(TP_CS_PORT, TP_CS_PIN, GPIO_PIN_SET);		
 8002b34:	2201      	movs	r2, #1
 8002b36:	2140      	movs	r1, #64	; 0x40
 8002b38:	4855      	ldr	r0, [pc, #340]	; (8002c90 <TP_Read_Coordinates+0x178>)
 8002b3a:	f000 fead 	bl	8003898 <HAL_GPIO_WritePin>

	
	
    uint32_t avg_x, avg_y = 0;		
 8002b3e:	2300      	movs	r3, #0
 8002b40:	623b      	str	r3, [r7, #32]
		uint16_t rawx, rawy = 0;	
 8002b42:	2300      	movs	r3, #0
 8002b44:	81fb      	strh	r3, [r7, #14]
		uint32_t calculating_x, calculating_y = 0;
 8002b46:	2300      	movs	r3, #0
 8002b48:	61bb      	str	r3, [r7, #24]
	
    uint32_t samples = NO_OF_POSITION_SAMPLES;
 8002b4a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002b4e:	617b      	str	r3, [r7, #20]
    uint32_t counted_samples = 0;
 8002b50:	2300      	movs	r3, #0
 8002b52:	613b      	str	r3, [r7, #16]

		HAL_GPIO_WritePin(TP_CS_PORT, TP_CS_PIN, GPIO_PIN_RESET);
 8002b54:	2200      	movs	r2, #0
 8002b56:	2140      	movs	r1, #64	; 0x40
 8002b58:	484d      	ldr	r0, [pc, #308]	; (8002c90 <TP_Read_Coordinates+0x178>)
 8002b5a:	f000 fe9d 	bl	8003898 <HAL_GPIO_WritePin>

	
    while((samples > 0)&&(HAL_GPIO_ReadPin(TP_IRQ_PORT, TP_IRQ_PIN) == 0))
 8002b5e:	e023      	b.n	8002ba8 <TP_Read_Coordinates+0x90>
    {			
        TP_Write(CMD_RDY);
 8002b60:	2090      	movs	r0, #144	; 0x90
 8002b62:	f7ff ffa1 	bl	8002aa8 <TP_Write>

				rawy = TP_Read();	
 8002b66:	f7ff ff73 	bl	8002a50 <TP_Read>
 8002b6a:	4603      	mov	r3, r0
 8002b6c:	81fb      	strh	r3, [r7, #14]
				avg_y += rawy;
 8002b6e:	89fb      	ldrh	r3, [r7, #14]
 8002b70:	6a3a      	ldr	r2, [r7, #32]
 8002b72:	4413      	add	r3, r2
 8002b74:	623b      	str	r3, [r7, #32]
				calculating_y += rawy;
 8002b76:	89fb      	ldrh	r3, [r7, #14]
 8002b78:	69ba      	ldr	r2, [r7, #24]
 8002b7a:	4413      	add	r3, r2
 8002b7c:	61bb      	str	r3, [r7, #24]

				
        TP_Write(CMD_RDX);
 8002b7e:	20d0      	movs	r0, #208	; 0xd0
 8002b80:	f7ff ff92 	bl	8002aa8 <TP_Write>
        rawx = TP_Read();
 8002b84:	f7ff ff64 	bl	8002a50 <TP_Read>
 8002b88:	4603      	mov	r3, r0
 8002b8a:	81bb      	strh	r3, [r7, #12]
				avg_x += rawx;
 8002b8c:	89bb      	ldrh	r3, [r7, #12]
 8002b8e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b90:	4413      	add	r3, r2
 8002b92:	627b      	str	r3, [r7, #36]	; 0x24
				calculating_x += rawx;
 8002b94:	89bb      	ldrh	r3, [r7, #12]
 8002b96:	69fa      	ldr	r2, [r7, #28]
 8002b98:	4413      	add	r3, r2
 8002b9a:	61fb      	str	r3, [r7, #28]
        samples--;
 8002b9c:	697b      	ldr	r3, [r7, #20]
 8002b9e:	3b01      	subs	r3, #1
 8002ba0:	617b      	str	r3, [r7, #20]
				counted_samples++;
 8002ba2:	693b      	ldr	r3, [r7, #16]
 8002ba4:	3301      	adds	r3, #1
 8002ba6:	613b      	str	r3, [r7, #16]
    while((samples > 0)&&(HAL_GPIO_ReadPin(TP_IRQ_PORT, TP_IRQ_PIN) == 0))
 8002ba8:	697b      	ldr	r3, [r7, #20]
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d006      	beq.n	8002bbc <TP_Read_Coordinates+0xa4>
 8002bae:	2104      	movs	r1, #4
 8002bb0:	4837      	ldr	r0, [pc, #220]	; (8002c90 <TP_Read_Coordinates+0x178>)
 8002bb2:	f000 fe59 	bl	8003868 <HAL_GPIO_ReadPin>
 8002bb6:	4603      	mov	r3, r0
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d0d1      	beq.n	8002b60 <TP_Read_Coordinates+0x48>
    };
		
		HAL_GPIO_WritePin(TP_CS_PORT, TP_CS_PIN, GPIO_PIN_SET);
 8002bbc:	2201      	movs	r2, #1
 8002bbe:	2140      	movs	r1, #64	; 0x40
 8002bc0:	4833      	ldr	r0, [pc, #204]	; (8002c90 <TP_Read_Coordinates+0x178>)
 8002bc2:	f000 fe69 	bl	8003898 <HAL_GPIO_WritePin>

		
		if((counted_samples == NO_OF_POSITION_SAMPLES)&&(HAL_GPIO_ReadPin(TP_IRQ_PORT, TP_IRQ_PIN) == 0))
 8002bc6:	693b      	ldr	r3, [r7, #16]
 8002bc8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002bcc:	d14d      	bne.n	8002c6a <TP_Read_Coordinates+0x152>
 8002bce:	2104      	movs	r1, #4
 8002bd0:	482f      	ldr	r0, [pc, #188]	; (8002c90 <TP_Read_Coordinates+0x178>)
 8002bd2:	f000 fe49 	bl	8003868 <HAL_GPIO_ReadPin>
 8002bd6:	4603      	mov	r3, r0
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d146      	bne.n	8002c6a <TP_Read_Coordinates+0x152>
		{
		
		calculating_x /= counted_samples;
 8002bdc:	69fa      	ldr	r2, [r7, #28]
 8002bde:	693b      	ldr	r3, [r7, #16]
 8002be0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002be4:	61fb      	str	r3, [r7, #28]
		calculating_y /= counted_samples;
 8002be6:	69ba      	ldr	r2, [r7, #24]
 8002be8:	693b      	ldr	r3, [r7, #16]
 8002bea:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bee:	61bb      	str	r3, [r7, #24]
		
		rawx = calculating_x;
 8002bf0:	69fb      	ldr	r3, [r7, #28]
 8002bf2:	81bb      	strh	r3, [r7, #12]
		rawy = calculating_y;		
 8002bf4:	69bb      	ldr	r3, [r7, #24]
 8002bf6:	81fb      	strh	r3, [r7, #14]
		
		rawx *= -1;
 8002bf8:	89bb      	ldrh	r3, [r7, #12]
 8002bfa:	425b      	negs	r3, r3
 8002bfc:	81bb      	strh	r3, [r7, #12]
		rawy *= -1;
 8002bfe:	89fb      	ldrh	r3, [r7, #14]
 8002c00:	425b      	negs	r3, r3
 8002c02:	81fb      	strh	r3, [r7, #14]
		
		//CONVERTING 16bit Value to Screen coordinates
    // 65535/273 = 240!
		// 65535/204 = 320!
    Coordinates[0] = ((240 - (rawx/X_TRANSLATION)) - X_OFFSET)*X_MAGNITUDE;
 8002c04:	89ba      	ldrh	r2, [r7, #12]
 8002c06:	4b23      	ldr	r3, [pc, #140]	; (8002c94 <TP_Read_Coordinates+0x17c>)
 8002c08:	fba3 1302 	umull	r1, r3, r3, r2
 8002c0c:	1ad2      	subs	r2, r2, r3
 8002c0e:	0852      	lsrs	r2, r2, #1
 8002c10:	4413      	add	r3, r2
 8002c12:	0a1b      	lsrs	r3, r3, #8
 8002c14:	b29b      	uxth	r3, r3
 8002c16:	f1c3 03e3 	rsb	r3, r3, #227	; 0xe3
 8002c1a:	ee07 3a90 	vmov	s15, r3
 8002c1e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8002c22:	ed9f 6b19 	vldr	d6, [pc, #100]	; 8002c88 <TP_Read_Coordinates+0x170>
 8002c26:	ee27 7b06 	vmul.f64	d7, d7, d6
 8002c2a:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8002c2e:	ee17 3a90 	vmov	r3, s15
 8002c32:	b29a      	uxth	r2, r3
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	801a      	strh	r2, [r3, #0]
		Coordinates[1] = ((rawy/Y_TRANSLATION)- Y_OFFSET)*Y_MAGNITUDE;
 8002c38:	89fb      	ldrh	r3, [r7, #14]
 8002c3a:	4a17      	ldr	r2, [pc, #92]	; (8002c98 <TP_Read_Coordinates+0x180>)
 8002c3c:	fba2 2303 	umull	r2, r3, r2, r3
 8002c40:	09db      	lsrs	r3, r3, #7
 8002c42:	b29b      	uxth	r3, r3
 8002c44:	3b0f      	subs	r3, #15
 8002c46:	ee07 3a90 	vmov	s15, r3
 8002c4a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8002c4e:	ed9f 6b0e 	vldr	d6, [pc, #56]	; 8002c88 <TP_Read_Coordinates+0x170>
 8002c52:	ee27 7b06 	vmul.f64	d7, d7, d6
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	3302      	adds	r3, #2
 8002c5a:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8002c5e:	ee17 2a90 	vmov	r2, s15
 8002c62:	b292      	uxth	r2, r2
 8002c64:	801a      	strh	r2, [r3, #0]
		
		return TOUCHPAD_DATA_OK;			
 8002c66:	2301      	movs	r3, #1
 8002c68:	e007      	b.n	8002c7a <TP_Read_Coordinates+0x162>
		}
		else
		{
			Coordinates[0] = 0;
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	2200      	movs	r2, #0
 8002c6e:	801a      	strh	r2, [r3, #0]
			Coordinates[1] = 0;
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	3302      	adds	r3, #2
 8002c74:	2200      	movs	r2, #0
 8002c76:	801a      	strh	r2, [r3, #0]
			return TOUCHPAD_DATA_NOISY;
 8002c78:	2300      	movs	r3, #0
		}
}
 8002c7a:	4618      	mov	r0, r3
 8002c7c:	3728      	adds	r7, #40	; 0x28
 8002c7e:	46bd      	mov	sp, r7
 8002c80:	bd80      	pop	{r7, pc}
 8002c82:	bf00      	nop
 8002c84:	f3af 8000 	nop.w
 8002c88:	28f5c28f 	.word	0x28f5c28f
 8002c8c:	3ff28f5c 	.word	0x3ff28f5c
 8002c90:	40021000 	.word	0x40021000
 8002c94:	e01e01e1 	.word	0xe01e01e1
 8002c98:	a0a0a0a1 	.word	0xa0a0a0a1

08002c9c <TP_Touchpad_Pressed>:

//Check if Touchpad was pressed. Returns TOUCHPAD_PRESSED (1) or TOUCHPAD_NOT_PRESSED (0)
uint8_t TP_Touchpad_Pressed(void)
{
 8002c9c:	b580      	push	{r7, lr}
 8002c9e:	af00      	add	r7, sp, #0
	if(HAL_GPIO_ReadPin(TP_IRQ_PORT, TP_IRQ_PIN) == 0)
 8002ca0:	2104      	movs	r1, #4
 8002ca2:	4805      	ldr	r0, [pc, #20]	; (8002cb8 <TP_Touchpad_Pressed+0x1c>)
 8002ca4:	f000 fde0 	bl	8003868 <HAL_GPIO_ReadPin>
 8002ca8:	4603      	mov	r3, r0
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d101      	bne.n	8002cb2 <TP_Touchpad_Pressed+0x16>
	{
		return TOUCHPAD_PRESSED;
 8002cae:	2301      	movs	r3, #1
 8002cb0:	e000      	b.n	8002cb4 <TP_Touchpad_Pressed+0x18>
	}
	else
	{
		return TOUCHPAD_NOT_PRESSED;
 8002cb2:	2300      	movs	r3, #0
	}
}
 8002cb4:	4618      	mov	r0, r3
 8002cb6:	bd80      	pop	{r7, pc}
 8002cb8:	40021000 	.word	0x40021000

08002cbc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002cbc:	b580      	push	{r7, lr}
 8002cbe:	af00      	add	r7, sp, #0
  /* Configure Instruction cache through ART accelerator */ 
#if (ART_ACCLERATOR_ENABLE != 0)
   __HAL_FLASH_ART_ENABLE();
 8002cc0:	4b0b      	ldr	r3, [pc, #44]	; (8002cf0 <HAL_Init+0x34>)
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	4a0a      	ldr	r2, [pc, #40]	; (8002cf0 <HAL_Init+0x34>)
 8002cc6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002cca:	6013      	str	r3, [r2, #0]
#endif /* ART_ACCLERATOR_ENABLE */

  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002ccc:	4b08      	ldr	r3, [pc, #32]	; (8002cf0 <HAL_Init+0x34>)
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	4a07      	ldr	r2, [pc, #28]	; (8002cf0 <HAL_Init+0x34>)
 8002cd2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002cd6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002cd8:	2003      	movs	r0, #3
 8002cda:	f000 fbd7 	bl	800348c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002cde:	2000      	movs	r0, #0
 8002ce0:	f000 f808 	bl	8002cf4 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8002ce4:	f7fe fcd0 	bl	8001688 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8002ce8:	2300      	movs	r3, #0
}
 8002cea:	4618      	mov	r0, r3
 8002cec:	bd80      	pop	{r7, pc}
 8002cee:	bf00      	nop
 8002cf0:	40023c00 	.word	0x40023c00

08002cf4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002cf4:	b580      	push	{r7, lr}
 8002cf6:	b082      	sub	sp, #8
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002cfc:	4b12      	ldr	r3, [pc, #72]	; (8002d48 <HAL_InitTick+0x54>)
 8002cfe:	681a      	ldr	r2, [r3, #0]
 8002d00:	4b12      	ldr	r3, [pc, #72]	; (8002d4c <HAL_InitTick+0x58>)
 8002d02:	781b      	ldrb	r3, [r3, #0]
 8002d04:	4619      	mov	r1, r3
 8002d06:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002d0a:	fbb3 f3f1 	udiv	r3, r3, r1
 8002d0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d12:	4618      	mov	r0, r3
 8002d14:	f000 fbef 	bl	80034f6 <HAL_SYSTICK_Config>
 8002d18:	4603      	mov	r3, r0
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d001      	beq.n	8002d22 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002d1e:	2301      	movs	r3, #1
 8002d20:	e00e      	b.n	8002d40 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	2b0f      	cmp	r3, #15
 8002d26:	d80a      	bhi.n	8002d3e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002d28:	2200      	movs	r2, #0
 8002d2a:	6879      	ldr	r1, [r7, #4]
 8002d2c:	f04f 30ff 	mov.w	r0, #4294967295
 8002d30:	f000 fbb7 	bl	80034a2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002d34:	4a06      	ldr	r2, [pc, #24]	; (8002d50 <HAL_InitTick+0x5c>)
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002d3a:	2300      	movs	r3, #0
 8002d3c:	e000      	b.n	8002d40 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002d3e:	2301      	movs	r3, #1
}
 8002d40:	4618      	mov	r0, r3
 8002d42:	3708      	adds	r7, #8
 8002d44:	46bd      	mov	sp, r7
 8002d46:	bd80      	pop	{r7, pc}
 8002d48:	2000001c 	.word	0x2000001c
 8002d4c:	20000028 	.word	0x20000028
 8002d50:	20000024 	.word	0x20000024

08002d54 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002d54:	b480      	push	{r7}
 8002d56:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002d58:	4b06      	ldr	r3, [pc, #24]	; (8002d74 <HAL_IncTick+0x20>)
 8002d5a:	781b      	ldrb	r3, [r3, #0]
 8002d5c:	461a      	mov	r2, r3
 8002d5e:	4b06      	ldr	r3, [pc, #24]	; (8002d78 <HAL_IncTick+0x24>)
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	4413      	add	r3, r2
 8002d64:	4a04      	ldr	r2, [pc, #16]	; (8002d78 <HAL_IncTick+0x24>)
 8002d66:	6013      	str	r3, [r2, #0]
}
 8002d68:	bf00      	nop
 8002d6a:	46bd      	mov	sp, r7
 8002d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d70:	4770      	bx	lr
 8002d72:	bf00      	nop
 8002d74:	20000028 	.word	0x20000028
 8002d78:	20000454 	.word	0x20000454

08002d7c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002d7c:	b480      	push	{r7}
 8002d7e:	af00      	add	r7, sp, #0
  return uwTick;
 8002d80:	4b03      	ldr	r3, [pc, #12]	; (8002d90 <HAL_GetTick+0x14>)
 8002d82:	681b      	ldr	r3, [r3, #0]
}
 8002d84:	4618      	mov	r0, r3
 8002d86:	46bd      	mov	sp, r7
 8002d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d8c:	4770      	bx	lr
 8002d8e:	bf00      	nop
 8002d90:	20000454 	.word	0x20000454

08002d94 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002d94:	b580      	push	{r7, lr}
 8002d96:	b084      	sub	sp, #16
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002d9c:	f7ff ffee 	bl	8002d7c <HAL_GetTick>
 8002da0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002dac:	d005      	beq.n	8002dba <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002dae:	4b0a      	ldr	r3, [pc, #40]	; (8002dd8 <HAL_Delay+0x44>)
 8002db0:	781b      	ldrb	r3, [r3, #0]
 8002db2:	461a      	mov	r2, r3
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	4413      	add	r3, r2
 8002db8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002dba:	bf00      	nop
 8002dbc:	f7ff ffde 	bl	8002d7c <HAL_GetTick>
 8002dc0:	4602      	mov	r2, r0
 8002dc2:	68bb      	ldr	r3, [r7, #8]
 8002dc4:	1ad3      	subs	r3, r2, r3
 8002dc6:	68fa      	ldr	r2, [r7, #12]
 8002dc8:	429a      	cmp	r2, r3
 8002dca:	d8f7      	bhi.n	8002dbc <HAL_Delay+0x28>
  {
  }
}
 8002dcc:	bf00      	nop
 8002dce:	bf00      	nop
 8002dd0:	3710      	adds	r7, #16
 8002dd2:	46bd      	mov	sp, r7
 8002dd4:	bd80      	pop	{r7, pc}
 8002dd6:	bf00      	nop
 8002dd8:	20000028 	.word	0x20000028

08002ddc <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002ddc:	b580      	push	{r7, lr}
 8002dde:	b084      	sub	sp, #16
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002de4:	2300      	movs	r3, #0
 8002de6:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d101      	bne.n	8002df2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002dee:	2301      	movs	r3, #1
 8002df0:	e031      	b.n	8002e56 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d109      	bne.n	8002e0e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002dfa:	6878      	ldr	r0, [r7, #4]
 8002dfc:	f7fd fc48 	bl	8000690 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	2200      	movs	r2, #0
 8002e04:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	2200      	movs	r2, #0
 8002e0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e12:	f003 0310 	and.w	r3, r3, #16
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d116      	bne.n	8002e48 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002e1e:	4b10      	ldr	r3, [pc, #64]	; (8002e60 <HAL_ADC_Init+0x84>)
 8002e20:	4013      	ands	r3, r2
 8002e22:	f043 0202 	orr.w	r2, r3, #2
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002e2a:	6878      	ldr	r0, [r7, #4]
 8002e2c:	f000 f964 	bl	80030f8 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	2200      	movs	r2, #0
 8002e34:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e3a:	f023 0303 	bic.w	r3, r3, #3
 8002e3e:	f043 0201 	orr.w	r2, r3, #1
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	641a      	str	r2, [r3, #64]	; 0x40
 8002e46:	e001      	b.n	8002e4c <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002e48:	2301      	movs	r3, #1
 8002e4a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	2200      	movs	r2, #0
 8002e50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002e54:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e56:	4618      	mov	r0, r3
 8002e58:	3710      	adds	r7, #16
 8002e5a:	46bd      	mov	sp, r7
 8002e5c:	bd80      	pop	{r7, pc}
 8002e5e:	bf00      	nop
 8002e60:	ffffeefd 	.word	0xffffeefd

08002e64 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002e64:	b480      	push	{r7}
 8002e66:	b085      	sub	sp, #20
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	6078      	str	r0, [r7, #4]
 8002e6c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8002e6e:	2300      	movs	r3, #0
 8002e70:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e78:	2b01      	cmp	r3, #1
 8002e7a:	d101      	bne.n	8002e80 <HAL_ADC_ConfigChannel+0x1c>
 8002e7c:	2302      	movs	r3, #2
 8002e7e:	e12a      	b.n	80030d6 <HAL_ADC_ConfigChannel+0x272>
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	2201      	movs	r2, #1
 8002e84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8002e88:	683b      	ldr	r3, [r7, #0]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	2b09      	cmp	r3, #9
 8002e8e:	d93a      	bls.n	8002f06 <HAL_ADC_ConfigChannel+0xa2>
 8002e90:	683b      	ldr	r3, [r7, #0]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002e98:	d035      	beq.n	8002f06 <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	68d9      	ldr	r1, [r3, #12]
 8002ea0:	683b      	ldr	r3, [r7, #0]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	b29b      	uxth	r3, r3
 8002ea6:	461a      	mov	r2, r3
 8002ea8:	4613      	mov	r3, r2
 8002eaa:	005b      	lsls	r3, r3, #1
 8002eac:	4413      	add	r3, r2
 8002eae:	3b1e      	subs	r3, #30
 8002eb0:	2207      	movs	r2, #7
 8002eb2:	fa02 f303 	lsl.w	r3, r2, r3
 8002eb6:	43da      	mvns	r2, r3
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	400a      	ands	r2, r1
 8002ebe:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002ec0:	683b      	ldr	r3, [r7, #0]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	4a87      	ldr	r2, [pc, #540]	; (80030e4 <HAL_ADC_ConfigChannel+0x280>)
 8002ec6:	4293      	cmp	r3, r2
 8002ec8:	d10a      	bne.n	8002ee0 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	68d9      	ldr	r1, [r3, #12]
 8002ed0:	683b      	ldr	r3, [r7, #0]
 8002ed2:	689b      	ldr	r3, [r3, #8]
 8002ed4:	061a      	lsls	r2, r3, #24
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	430a      	orrs	r2, r1
 8002edc:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002ede:	e035      	b.n	8002f4c <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	68d9      	ldr	r1, [r3, #12]
 8002ee6:	683b      	ldr	r3, [r7, #0]
 8002ee8:	689a      	ldr	r2, [r3, #8]
 8002eea:	683b      	ldr	r3, [r7, #0]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	b29b      	uxth	r3, r3
 8002ef0:	4618      	mov	r0, r3
 8002ef2:	4603      	mov	r3, r0
 8002ef4:	005b      	lsls	r3, r3, #1
 8002ef6:	4403      	add	r3, r0
 8002ef8:	3b1e      	subs	r3, #30
 8002efa:	409a      	lsls	r2, r3
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	430a      	orrs	r2, r1
 8002f02:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002f04:	e022      	b.n	8002f4c <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	6919      	ldr	r1, [r3, #16]
 8002f0c:	683b      	ldr	r3, [r7, #0]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	b29b      	uxth	r3, r3
 8002f12:	461a      	mov	r2, r3
 8002f14:	4613      	mov	r3, r2
 8002f16:	005b      	lsls	r3, r3, #1
 8002f18:	4413      	add	r3, r2
 8002f1a:	2207      	movs	r2, #7
 8002f1c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f20:	43da      	mvns	r2, r3
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	400a      	ands	r2, r1
 8002f28:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	6919      	ldr	r1, [r3, #16]
 8002f30:	683b      	ldr	r3, [r7, #0]
 8002f32:	689a      	ldr	r2, [r3, #8]
 8002f34:	683b      	ldr	r3, [r7, #0]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	b29b      	uxth	r3, r3
 8002f3a:	4618      	mov	r0, r3
 8002f3c:	4603      	mov	r3, r0
 8002f3e:	005b      	lsls	r3, r3, #1
 8002f40:	4403      	add	r3, r0
 8002f42:	409a      	lsls	r2, r3
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	430a      	orrs	r2, r1
 8002f4a:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8002f4c:	683b      	ldr	r3, [r7, #0]
 8002f4e:	685b      	ldr	r3, [r3, #4]
 8002f50:	2b06      	cmp	r3, #6
 8002f52:	d824      	bhi.n	8002f9e <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002f5a:	683b      	ldr	r3, [r7, #0]
 8002f5c:	685a      	ldr	r2, [r3, #4]
 8002f5e:	4613      	mov	r3, r2
 8002f60:	009b      	lsls	r3, r3, #2
 8002f62:	4413      	add	r3, r2
 8002f64:	3b05      	subs	r3, #5
 8002f66:	221f      	movs	r2, #31
 8002f68:	fa02 f303 	lsl.w	r3, r2, r3
 8002f6c:	43da      	mvns	r2, r3
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	400a      	ands	r2, r1
 8002f74:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002f7c:	683b      	ldr	r3, [r7, #0]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	b29b      	uxth	r3, r3
 8002f82:	4618      	mov	r0, r3
 8002f84:	683b      	ldr	r3, [r7, #0]
 8002f86:	685a      	ldr	r2, [r3, #4]
 8002f88:	4613      	mov	r3, r2
 8002f8a:	009b      	lsls	r3, r3, #2
 8002f8c:	4413      	add	r3, r2
 8002f8e:	3b05      	subs	r3, #5
 8002f90:	fa00 f203 	lsl.w	r2, r0, r3
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	430a      	orrs	r2, r1
 8002f9a:	635a      	str	r2, [r3, #52]	; 0x34
 8002f9c:	e04c      	b.n	8003038 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8002f9e:	683b      	ldr	r3, [r7, #0]
 8002fa0:	685b      	ldr	r3, [r3, #4]
 8002fa2:	2b0c      	cmp	r3, #12
 8002fa4:	d824      	bhi.n	8002ff0 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002fac:	683b      	ldr	r3, [r7, #0]
 8002fae:	685a      	ldr	r2, [r3, #4]
 8002fb0:	4613      	mov	r3, r2
 8002fb2:	009b      	lsls	r3, r3, #2
 8002fb4:	4413      	add	r3, r2
 8002fb6:	3b23      	subs	r3, #35	; 0x23
 8002fb8:	221f      	movs	r2, #31
 8002fba:	fa02 f303 	lsl.w	r3, r2, r3
 8002fbe:	43da      	mvns	r2, r3
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	400a      	ands	r2, r1
 8002fc6:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002fce:	683b      	ldr	r3, [r7, #0]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	b29b      	uxth	r3, r3
 8002fd4:	4618      	mov	r0, r3
 8002fd6:	683b      	ldr	r3, [r7, #0]
 8002fd8:	685a      	ldr	r2, [r3, #4]
 8002fda:	4613      	mov	r3, r2
 8002fdc:	009b      	lsls	r3, r3, #2
 8002fde:	4413      	add	r3, r2
 8002fe0:	3b23      	subs	r3, #35	; 0x23
 8002fe2:	fa00 f203 	lsl.w	r2, r0, r3
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	430a      	orrs	r2, r1
 8002fec:	631a      	str	r2, [r3, #48]	; 0x30
 8002fee:	e023      	b.n	8003038 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002ff6:	683b      	ldr	r3, [r7, #0]
 8002ff8:	685a      	ldr	r2, [r3, #4]
 8002ffa:	4613      	mov	r3, r2
 8002ffc:	009b      	lsls	r3, r3, #2
 8002ffe:	4413      	add	r3, r2
 8003000:	3b41      	subs	r3, #65	; 0x41
 8003002:	221f      	movs	r2, #31
 8003004:	fa02 f303 	lsl.w	r3, r2, r3
 8003008:	43da      	mvns	r2, r3
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	400a      	ands	r2, r1
 8003010:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003018:	683b      	ldr	r3, [r7, #0]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	b29b      	uxth	r3, r3
 800301e:	4618      	mov	r0, r3
 8003020:	683b      	ldr	r3, [r7, #0]
 8003022:	685a      	ldr	r2, [r3, #4]
 8003024:	4613      	mov	r3, r2
 8003026:	009b      	lsls	r3, r3, #2
 8003028:	4413      	add	r3, r2
 800302a:	3b41      	subs	r3, #65	; 0x41
 800302c:	fa00 f203 	lsl.w	r2, r0, r3
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	430a      	orrs	r2, r1
 8003036:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	4a2a      	ldr	r2, [pc, #168]	; (80030e8 <HAL_ADC_ConfigChannel+0x284>)
 800303e:	4293      	cmp	r3, r2
 8003040:	d10a      	bne.n	8003058 <HAL_ADC_ConfigChannel+0x1f4>
 8003042:	683b      	ldr	r3, [r7, #0]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800304a:	d105      	bne.n	8003058 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 800304c:	4b27      	ldr	r3, [pc, #156]	; (80030ec <HAL_ADC_ConfigChannel+0x288>)
 800304e:	685b      	ldr	r3, [r3, #4]
 8003050:	4a26      	ldr	r2, [pc, #152]	; (80030ec <HAL_ADC_ConfigChannel+0x288>)
 8003052:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8003056:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	4a22      	ldr	r2, [pc, #136]	; (80030e8 <HAL_ADC_ConfigChannel+0x284>)
 800305e:	4293      	cmp	r3, r2
 8003060:	d109      	bne.n	8003076 <HAL_ADC_ConfigChannel+0x212>
 8003062:	683b      	ldr	r3, [r7, #0]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	2b12      	cmp	r3, #18
 8003068:	d105      	bne.n	8003076 <HAL_ADC_ConfigChannel+0x212>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 800306a:	4b20      	ldr	r3, [pc, #128]	; (80030ec <HAL_ADC_ConfigChannel+0x288>)
 800306c:	685b      	ldr	r3, [r3, #4]
 800306e:	4a1f      	ldr	r2, [pc, #124]	; (80030ec <HAL_ADC_ConfigChannel+0x288>)
 8003070:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003074:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	4a1b      	ldr	r2, [pc, #108]	; (80030e8 <HAL_ADC_ConfigChannel+0x284>)
 800307c:	4293      	cmp	r3, r2
 800307e:	d125      	bne.n	80030cc <HAL_ADC_ConfigChannel+0x268>
 8003080:	683b      	ldr	r3, [r7, #0]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	4a17      	ldr	r2, [pc, #92]	; (80030e4 <HAL_ADC_ConfigChannel+0x280>)
 8003086:	4293      	cmp	r3, r2
 8003088:	d003      	beq.n	8003092 <HAL_ADC_ConfigChannel+0x22e>
 800308a:	683b      	ldr	r3, [r7, #0]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	2b11      	cmp	r3, #17
 8003090:	d11c      	bne.n	80030cc <HAL_ADC_ConfigChannel+0x268>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8003092:	4b16      	ldr	r3, [pc, #88]	; (80030ec <HAL_ADC_ConfigChannel+0x288>)
 8003094:	685b      	ldr	r3, [r3, #4]
 8003096:	4a15      	ldr	r2, [pc, #84]	; (80030ec <HAL_ADC_ConfigChannel+0x288>)
 8003098:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800309c:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800309e:	683b      	ldr	r3, [r7, #0]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	4a10      	ldr	r2, [pc, #64]	; (80030e4 <HAL_ADC_ConfigChannel+0x280>)
 80030a4:	4293      	cmp	r3, r2
 80030a6:	d111      	bne.n	80030cc <HAL_ADC_ConfigChannel+0x268>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 80030a8:	4b11      	ldr	r3, [pc, #68]	; (80030f0 <HAL_ADC_ConfigChannel+0x28c>)
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	4a11      	ldr	r2, [pc, #68]	; (80030f4 <HAL_ADC_ConfigChannel+0x290>)
 80030ae:	fba2 2303 	umull	r2, r3, r2, r3
 80030b2:	0c9a      	lsrs	r2, r3, #18
 80030b4:	4613      	mov	r3, r2
 80030b6:	009b      	lsls	r3, r3, #2
 80030b8:	4413      	add	r3, r2
 80030ba:	005b      	lsls	r3, r3, #1
 80030bc:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80030be:	e002      	b.n	80030c6 <HAL_ADC_ConfigChannel+0x262>
      {
        counter--;
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	3b01      	subs	r3, #1
 80030c4:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d1f9      	bne.n	80030c0 <HAL_ADC_ConfigChannel+0x25c>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	2200      	movs	r2, #0
 80030d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80030d4:	2300      	movs	r3, #0
}
 80030d6:	4618      	mov	r0, r3
 80030d8:	3714      	adds	r7, #20
 80030da:	46bd      	mov	sp, r7
 80030dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e0:	4770      	bx	lr
 80030e2:	bf00      	nop
 80030e4:	10000012 	.word	0x10000012
 80030e8:	40012000 	.word	0x40012000
 80030ec:	40012300 	.word	0x40012300
 80030f0:	2000001c 	.word	0x2000001c
 80030f4:	431bde83 	.word	0x431bde83

080030f8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80030f8:	b480      	push	{r7}
 80030fa:	b083      	sub	sp, #12
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8003100:	4b78      	ldr	r3, [pc, #480]	; (80032e4 <ADC_Init+0x1ec>)
 8003102:	685b      	ldr	r3, [r3, #4]
 8003104:	4a77      	ldr	r2, [pc, #476]	; (80032e4 <ADC_Init+0x1ec>)
 8003106:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 800310a:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 800310c:	4b75      	ldr	r3, [pc, #468]	; (80032e4 <ADC_Init+0x1ec>)
 800310e:	685a      	ldr	r2, [r3, #4]
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	685b      	ldr	r3, [r3, #4]
 8003114:	4973      	ldr	r1, [pc, #460]	; (80032e4 <ADC_Init+0x1ec>)
 8003116:	4313      	orrs	r3, r2
 8003118:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	685a      	ldr	r2, [r3, #4]
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003128:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	6859      	ldr	r1, [r3, #4]
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	691b      	ldr	r3, [r3, #16]
 8003134:	021a      	lsls	r2, r3, #8
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	430a      	orrs	r2, r1
 800313c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	685a      	ldr	r2, [r3, #4]
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800314c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	6859      	ldr	r1, [r3, #4]
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	689a      	ldr	r2, [r3, #8]
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	430a      	orrs	r2, r1
 800315e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	689a      	ldr	r2, [r3, #8]
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800316e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	6899      	ldr	r1, [r3, #8]
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	68da      	ldr	r2, [r3, #12]
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	430a      	orrs	r2, r1
 8003180:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003186:	4a58      	ldr	r2, [pc, #352]	; (80032e8 <ADC_Init+0x1f0>)
 8003188:	4293      	cmp	r3, r2
 800318a:	d022      	beq.n	80031d2 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	689a      	ldr	r2, [r3, #8]
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800319a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	6899      	ldr	r1, [r3, #8]
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	430a      	orrs	r2, r1
 80031ac:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	689a      	ldr	r2, [r3, #8]
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80031bc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	6899      	ldr	r1, [r3, #8]
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	430a      	orrs	r2, r1
 80031ce:	609a      	str	r2, [r3, #8]
 80031d0:	e00f      	b.n	80031f2 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	689a      	ldr	r2, [r3, #8]
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80031e0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	689a      	ldr	r2, [r3, #8]
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80031f0:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	689a      	ldr	r2, [r3, #8]
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	f022 0202 	bic.w	r2, r2, #2
 8003200:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	6899      	ldr	r1, [r3, #8]
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	699b      	ldr	r3, [r3, #24]
 800320c:	005a      	lsls	r2, r3, #1
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	430a      	orrs	r2, r1
 8003214:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	f893 3020 	ldrb.w	r3, [r3, #32]
 800321c:	2b00      	cmp	r3, #0
 800321e:	d01b      	beq.n	8003258 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	685a      	ldr	r2, [r3, #4]
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800322e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	685a      	ldr	r2, [r3, #4]
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800323e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	6859      	ldr	r1, [r3, #4]
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800324a:	3b01      	subs	r3, #1
 800324c:	035a      	lsls	r2, r3, #13
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	430a      	orrs	r2, r1
 8003254:	605a      	str	r2, [r3, #4]
 8003256:	e007      	b.n	8003268 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	685a      	ldr	r2, [r3, #4]
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003266:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8003276:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	69db      	ldr	r3, [r3, #28]
 8003282:	3b01      	subs	r3, #1
 8003284:	051a      	lsls	r2, r3, #20
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	430a      	orrs	r2, r1
 800328c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	689a      	ldr	r2, [r3, #8]
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800329c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	6899      	ldr	r1, [r3, #8]
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80032aa:	025a      	lsls	r2, r3, #9
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	430a      	orrs	r2, r1
 80032b2:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	689a      	ldr	r2, [r3, #8]
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80032c2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	6899      	ldr	r1, [r3, #8]
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	695b      	ldr	r3, [r3, #20]
 80032ce:	029a      	lsls	r2, r3, #10
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	430a      	orrs	r2, r1
 80032d6:	609a      	str	r2, [r3, #8]
}
 80032d8:	bf00      	nop
 80032da:	370c      	adds	r7, #12
 80032dc:	46bd      	mov	sp, r7
 80032de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e2:	4770      	bx	lr
 80032e4:	40012300 	.word	0x40012300
 80032e8:	0f000001 	.word	0x0f000001

080032ec <__NVIC_SetPriorityGrouping>:
{
 80032ec:	b480      	push	{r7}
 80032ee:	b085      	sub	sp, #20
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	f003 0307 	and.w	r3, r3, #7
 80032fa:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80032fc:	4b0b      	ldr	r3, [pc, #44]	; (800332c <__NVIC_SetPriorityGrouping+0x40>)
 80032fe:	68db      	ldr	r3, [r3, #12]
 8003300:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003302:	68ba      	ldr	r2, [r7, #8]
 8003304:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003308:	4013      	ands	r3, r2
 800330a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003310:	68bb      	ldr	r3, [r7, #8]
 8003312:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003314:	4b06      	ldr	r3, [pc, #24]	; (8003330 <__NVIC_SetPriorityGrouping+0x44>)
 8003316:	4313      	orrs	r3, r2
 8003318:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800331a:	4a04      	ldr	r2, [pc, #16]	; (800332c <__NVIC_SetPriorityGrouping+0x40>)
 800331c:	68bb      	ldr	r3, [r7, #8]
 800331e:	60d3      	str	r3, [r2, #12]
}
 8003320:	bf00      	nop
 8003322:	3714      	adds	r7, #20
 8003324:	46bd      	mov	sp, r7
 8003326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800332a:	4770      	bx	lr
 800332c:	e000ed00 	.word	0xe000ed00
 8003330:	05fa0000 	.word	0x05fa0000

08003334 <__NVIC_GetPriorityGrouping>:
{
 8003334:	b480      	push	{r7}
 8003336:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003338:	4b04      	ldr	r3, [pc, #16]	; (800334c <__NVIC_GetPriorityGrouping+0x18>)
 800333a:	68db      	ldr	r3, [r3, #12]
 800333c:	0a1b      	lsrs	r3, r3, #8
 800333e:	f003 0307 	and.w	r3, r3, #7
}
 8003342:	4618      	mov	r0, r3
 8003344:	46bd      	mov	sp, r7
 8003346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800334a:	4770      	bx	lr
 800334c:	e000ed00 	.word	0xe000ed00

08003350 <__NVIC_EnableIRQ>:
{
 8003350:	b480      	push	{r7}
 8003352:	b083      	sub	sp, #12
 8003354:	af00      	add	r7, sp, #0
 8003356:	4603      	mov	r3, r0
 8003358:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800335a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800335e:	2b00      	cmp	r3, #0
 8003360:	db0b      	blt.n	800337a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003362:	79fb      	ldrb	r3, [r7, #7]
 8003364:	f003 021f 	and.w	r2, r3, #31
 8003368:	4907      	ldr	r1, [pc, #28]	; (8003388 <__NVIC_EnableIRQ+0x38>)
 800336a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800336e:	095b      	lsrs	r3, r3, #5
 8003370:	2001      	movs	r0, #1
 8003372:	fa00 f202 	lsl.w	r2, r0, r2
 8003376:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800337a:	bf00      	nop
 800337c:	370c      	adds	r7, #12
 800337e:	46bd      	mov	sp, r7
 8003380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003384:	4770      	bx	lr
 8003386:	bf00      	nop
 8003388:	e000e100 	.word	0xe000e100

0800338c <__NVIC_SetPriority>:
{
 800338c:	b480      	push	{r7}
 800338e:	b083      	sub	sp, #12
 8003390:	af00      	add	r7, sp, #0
 8003392:	4603      	mov	r3, r0
 8003394:	6039      	str	r1, [r7, #0]
 8003396:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003398:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800339c:	2b00      	cmp	r3, #0
 800339e:	db0a      	blt.n	80033b6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80033a0:	683b      	ldr	r3, [r7, #0]
 80033a2:	b2da      	uxtb	r2, r3
 80033a4:	490c      	ldr	r1, [pc, #48]	; (80033d8 <__NVIC_SetPriority+0x4c>)
 80033a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033aa:	0112      	lsls	r2, r2, #4
 80033ac:	b2d2      	uxtb	r2, r2
 80033ae:	440b      	add	r3, r1
 80033b0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80033b4:	e00a      	b.n	80033cc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80033b6:	683b      	ldr	r3, [r7, #0]
 80033b8:	b2da      	uxtb	r2, r3
 80033ba:	4908      	ldr	r1, [pc, #32]	; (80033dc <__NVIC_SetPriority+0x50>)
 80033bc:	79fb      	ldrb	r3, [r7, #7]
 80033be:	f003 030f 	and.w	r3, r3, #15
 80033c2:	3b04      	subs	r3, #4
 80033c4:	0112      	lsls	r2, r2, #4
 80033c6:	b2d2      	uxtb	r2, r2
 80033c8:	440b      	add	r3, r1
 80033ca:	761a      	strb	r2, [r3, #24]
}
 80033cc:	bf00      	nop
 80033ce:	370c      	adds	r7, #12
 80033d0:	46bd      	mov	sp, r7
 80033d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d6:	4770      	bx	lr
 80033d8:	e000e100 	.word	0xe000e100
 80033dc:	e000ed00 	.word	0xe000ed00

080033e0 <NVIC_EncodePriority>:
{
 80033e0:	b480      	push	{r7}
 80033e2:	b089      	sub	sp, #36	; 0x24
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	60f8      	str	r0, [r7, #12]
 80033e8:	60b9      	str	r1, [r7, #8]
 80033ea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	f003 0307 	and.w	r3, r3, #7
 80033f2:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80033f4:	69fb      	ldr	r3, [r7, #28]
 80033f6:	f1c3 0307 	rsb	r3, r3, #7
 80033fa:	2b04      	cmp	r3, #4
 80033fc:	bf28      	it	cs
 80033fe:	2304      	movcs	r3, #4
 8003400:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003402:	69fb      	ldr	r3, [r7, #28]
 8003404:	3304      	adds	r3, #4
 8003406:	2b06      	cmp	r3, #6
 8003408:	d902      	bls.n	8003410 <NVIC_EncodePriority+0x30>
 800340a:	69fb      	ldr	r3, [r7, #28]
 800340c:	3b03      	subs	r3, #3
 800340e:	e000      	b.n	8003412 <NVIC_EncodePriority+0x32>
 8003410:	2300      	movs	r3, #0
 8003412:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003414:	f04f 32ff 	mov.w	r2, #4294967295
 8003418:	69bb      	ldr	r3, [r7, #24]
 800341a:	fa02 f303 	lsl.w	r3, r2, r3
 800341e:	43da      	mvns	r2, r3
 8003420:	68bb      	ldr	r3, [r7, #8]
 8003422:	401a      	ands	r2, r3
 8003424:	697b      	ldr	r3, [r7, #20]
 8003426:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003428:	f04f 31ff 	mov.w	r1, #4294967295
 800342c:	697b      	ldr	r3, [r7, #20]
 800342e:	fa01 f303 	lsl.w	r3, r1, r3
 8003432:	43d9      	mvns	r1, r3
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003438:	4313      	orrs	r3, r2
}
 800343a:	4618      	mov	r0, r3
 800343c:	3724      	adds	r7, #36	; 0x24
 800343e:	46bd      	mov	sp, r7
 8003440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003444:	4770      	bx	lr
	...

08003448 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003448:	b580      	push	{r7, lr}
 800344a:	b082      	sub	sp, #8
 800344c:	af00      	add	r7, sp, #0
 800344e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	3b01      	subs	r3, #1
 8003454:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003458:	d301      	bcc.n	800345e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800345a:	2301      	movs	r3, #1
 800345c:	e00f      	b.n	800347e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800345e:	4a0a      	ldr	r2, [pc, #40]	; (8003488 <SysTick_Config+0x40>)
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	3b01      	subs	r3, #1
 8003464:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003466:	210f      	movs	r1, #15
 8003468:	f04f 30ff 	mov.w	r0, #4294967295
 800346c:	f7ff ff8e 	bl	800338c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003470:	4b05      	ldr	r3, [pc, #20]	; (8003488 <SysTick_Config+0x40>)
 8003472:	2200      	movs	r2, #0
 8003474:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003476:	4b04      	ldr	r3, [pc, #16]	; (8003488 <SysTick_Config+0x40>)
 8003478:	2207      	movs	r2, #7
 800347a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800347c:	2300      	movs	r3, #0
}
 800347e:	4618      	mov	r0, r3
 8003480:	3708      	adds	r7, #8
 8003482:	46bd      	mov	sp, r7
 8003484:	bd80      	pop	{r7, pc}
 8003486:	bf00      	nop
 8003488:	e000e010 	.word	0xe000e010

0800348c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800348c:	b580      	push	{r7, lr}
 800348e:	b082      	sub	sp, #8
 8003490:	af00      	add	r7, sp, #0
 8003492:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003494:	6878      	ldr	r0, [r7, #4]
 8003496:	f7ff ff29 	bl	80032ec <__NVIC_SetPriorityGrouping>
}
 800349a:	bf00      	nop
 800349c:	3708      	adds	r7, #8
 800349e:	46bd      	mov	sp, r7
 80034a0:	bd80      	pop	{r7, pc}

080034a2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80034a2:	b580      	push	{r7, lr}
 80034a4:	b086      	sub	sp, #24
 80034a6:	af00      	add	r7, sp, #0
 80034a8:	4603      	mov	r3, r0
 80034aa:	60b9      	str	r1, [r7, #8]
 80034ac:	607a      	str	r2, [r7, #4]
 80034ae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80034b0:	2300      	movs	r3, #0
 80034b2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80034b4:	f7ff ff3e 	bl	8003334 <__NVIC_GetPriorityGrouping>
 80034b8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80034ba:	687a      	ldr	r2, [r7, #4]
 80034bc:	68b9      	ldr	r1, [r7, #8]
 80034be:	6978      	ldr	r0, [r7, #20]
 80034c0:	f7ff ff8e 	bl	80033e0 <NVIC_EncodePriority>
 80034c4:	4602      	mov	r2, r0
 80034c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80034ca:	4611      	mov	r1, r2
 80034cc:	4618      	mov	r0, r3
 80034ce:	f7ff ff5d 	bl	800338c <__NVIC_SetPriority>
}
 80034d2:	bf00      	nop
 80034d4:	3718      	adds	r7, #24
 80034d6:	46bd      	mov	sp, r7
 80034d8:	bd80      	pop	{r7, pc}

080034da <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80034da:	b580      	push	{r7, lr}
 80034dc:	b082      	sub	sp, #8
 80034de:	af00      	add	r7, sp, #0
 80034e0:	4603      	mov	r3, r0
 80034e2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80034e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034e8:	4618      	mov	r0, r3
 80034ea:	f7ff ff31 	bl	8003350 <__NVIC_EnableIRQ>
}
 80034ee:	bf00      	nop
 80034f0:	3708      	adds	r7, #8
 80034f2:	46bd      	mov	sp, r7
 80034f4:	bd80      	pop	{r7, pc}

080034f6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80034f6:	b580      	push	{r7, lr}
 80034f8:	b082      	sub	sp, #8
 80034fa:	af00      	add	r7, sp, #0
 80034fc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80034fe:	6878      	ldr	r0, [r7, #4]
 8003500:	f7ff ffa2 	bl	8003448 <SysTick_Config>
 8003504:	4603      	mov	r3, r0
}
 8003506:	4618      	mov	r0, r3
 8003508:	3708      	adds	r7, #8
 800350a:	46bd      	mov	sp, r7
 800350c:	bd80      	pop	{r7, pc}
	...

08003510 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003510:	b480      	push	{r7}
 8003512:	b089      	sub	sp, #36	; 0x24
 8003514:	af00      	add	r7, sp, #0
 8003516:	6078      	str	r0, [r7, #4]
 8003518:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800351a:	2300      	movs	r3, #0
 800351c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800351e:	2300      	movs	r3, #0
 8003520:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8003522:	2300      	movs	r3, #0
 8003524:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8003526:	2300      	movs	r3, #0
 8003528:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800352a:	2300      	movs	r3, #0
 800352c:	61fb      	str	r3, [r7, #28]
 800352e:	e175      	b.n	800381c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8003530:	2201      	movs	r2, #1
 8003532:	69fb      	ldr	r3, [r7, #28]
 8003534:	fa02 f303 	lsl.w	r3, r2, r3
 8003538:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800353a:	683b      	ldr	r3, [r7, #0]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	697a      	ldr	r2, [r7, #20]
 8003540:	4013      	ands	r3, r2
 8003542:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003544:	693a      	ldr	r2, [r7, #16]
 8003546:	697b      	ldr	r3, [r7, #20]
 8003548:	429a      	cmp	r2, r3
 800354a:	f040 8164 	bne.w	8003816 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800354e:	683b      	ldr	r3, [r7, #0]
 8003550:	685b      	ldr	r3, [r3, #4]
 8003552:	2b01      	cmp	r3, #1
 8003554:	d00b      	beq.n	800356e <HAL_GPIO_Init+0x5e>
 8003556:	683b      	ldr	r3, [r7, #0]
 8003558:	685b      	ldr	r3, [r3, #4]
 800355a:	2b02      	cmp	r3, #2
 800355c:	d007      	beq.n	800356e <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800355e:	683b      	ldr	r3, [r7, #0]
 8003560:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003562:	2b11      	cmp	r3, #17
 8003564:	d003      	beq.n	800356e <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003566:	683b      	ldr	r3, [r7, #0]
 8003568:	685b      	ldr	r3, [r3, #4]
 800356a:	2b12      	cmp	r3, #18
 800356c:	d130      	bne.n	80035d0 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	689b      	ldr	r3, [r3, #8]
 8003572:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8003574:	69fb      	ldr	r3, [r7, #28]
 8003576:	005b      	lsls	r3, r3, #1
 8003578:	2203      	movs	r2, #3
 800357a:	fa02 f303 	lsl.w	r3, r2, r3
 800357e:	43db      	mvns	r3, r3
 8003580:	69ba      	ldr	r2, [r7, #24]
 8003582:	4013      	ands	r3, r2
 8003584:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8003586:	683b      	ldr	r3, [r7, #0]
 8003588:	68da      	ldr	r2, [r3, #12]
 800358a:	69fb      	ldr	r3, [r7, #28]
 800358c:	005b      	lsls	r3, r3, #1
 800358e:	fa02 f303 	lsl.w	r3, r2, r3
 8003592:	69ba      	ldr	r2, [r7, #24]
 8003594:	4313      	orrs	r3, r2
 8003596:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	69ba      	ldr	r2, [r7, #24]
 800359c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	685b      	ldr	r3, [r3, #4]
 80035a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80035a4:	2201      	movs	r2, #1
 80035a6:	69fb      	ldr	r3, [r7, #28]
 80035a8:	fa02 f303 	lsl.w	r3, r2, r3
 80035ac:	43db      	mvns	r3, r3
 80035ae:	69ba      	ldr	r2, [r7, #24]
 80035b0:	4013      	ands	r3, r2
 80035b2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 80035b4:	683b      	ldr	r3, [r7, #0]
 80035b6:	685b      	ldr	r3, [r3, #4]
 80035b8:	091b      	lsrs	r3, r3, #4
 80035ba:	f003 0201 	and.w	r2, r3, #1
 80035be:	69fb      	ldr	r3, [r7, #28]
 80035c0:	fa02 f303 	lsl.w	r3, r2, r3
 80035c4:	69ba      	ldr	r2, [r7, #24]
 80035c6:	4313      	orrs	r3, r2
 80035c8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	69ba      	ldr	r2, [r7, #24]
 80035ce:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	68db      	ldr	r3, [r3, #12]
 80035d4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80035d6:	69fb      	ldr	r3, [r7, #28]
 80035d8:	005b      	lsls	r3, r3, #1
 80035da:	2203      	movs	r2, #3
 80035dc:	fa02 f303 	lsl.w	r3, r2, r3
 80035e0:	43db      	mvns	r3, r3
 80035e2:	69ba      	ldr	r2, [r7, #24]
 80035e4:	4013      	ands	r3, r2
 80035e6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 80035e8:	683b      	ldr	r3, [r7, #0]
 80035ea:	689a      	ldr	r2, [r3, #8]
 80035ec:	69fb      	ldr	r3, [r7, #28]
 80035ee:	005b      	lsls	r3, r3, #1
 80035f0:	fa02 f303 	lsl.w	r3, r2, r3
 80035f4:	69ba      	ldr	r2, [r7, #24]
 80035f6:	4313      	orrs	r3, r2
 80035f8:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	69ba      	ldr	r2, [r7, #24]
 80035fe:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003600:	683b      	ldr	r3, [r7, #0]
 8003602:	685b      	ldr	r3, [r3, #4]
 8003604:	2b02      	cmp	r3, #2
 8003606:	d003      	beq.n	8003610 <HAL_GPIO_Init+0x100>
 8003608:	683b      	ldr	r3, [r7, #0]
 800360a:	685b      	ldr	r3, [r3, #4]
 800360c:	2b12      	cmp	r3, #18
 800360e:	d123      	bne.n	8003658 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8003610:	69fb      	ldr	r3, [r7, #28]
 8003612:	08da      	lsrs	r2, r3, #3
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	3208      	adds	r2, #8
 8003618:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800361c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800361e:	69fb      	ldr	r3, [r7, #28]
 8003620:	f003 0307 	and.w	r3, r3, #7
 8003624:	009b      	lsls	r3, r3, #2
 8003626:	220f      	movs	r2, #15
 8003628:	fa02 f303 	lsl.w	r3, r2, r3
 800362c:	43db      	mvns	r3, r3
 800362e:	69ba      	ldr	r2, [r7, #24]
 8003630:	4013      	ands	r3, r2
 8003632:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8003634:	683b      	ldr	r3, [r7, #0]
 8003636:	691a      	ldr	r2, [r3, #16]
 8003638:	69fb      	ldr	r3, [r7, #28]
 800363a:	f003 0307 	and.w	r3, r3, #7
 800363e:	009b      	lsls	r3, r3, #2
 8003640:	fa02 f303 	lsl.w	r3, r2, r3
 8003644:	69ba      	ldr	r2, [r7, #24]
 8003646:	4313      	orrs	r3, r2
 8003648:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800364a:	69fb      	ldr	r3, [r7, #28]
 800364c:	08da      	lsrs	r2, r3, #3
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	3208      	adds	r2, #8
 8003652:	69b9      	ldr	r1, [r7, #24]
 8003654:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800365e:	69fb      	ldr	r3, [r7, #28]
 8003660:	005b      	lsls	r3, r3, #1
 8003662:	2203      	movs	r2, #3
 8003664:	fa02 f303 	lsl.w	r3, r2, r3
 8003668:	43db      	mvns	r3, r3
 800366a:	69ba      	ldr	r2, [r7, #24]
 800366c:	4013      	ands	r3, r2
 800366e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8003670:	683b      	ldr	r3, [r7, #0]
 8003672:	685b      	ldr	r3, [r3, #4]
 8003674:	f003 0203 	and.w	r2, r3, #3
 8003678:	69fb      	ldr	r3, [r7, #28]
 800367a:	005b      	lsls	r3, r3, #1
 800367c:	fa02 f303 	lsl.w	r3, r2, r3
 8003680:	69ba      	ldr	r2, [r7, #24]
 8003682:	4313      	orrs	r3, r2
 8003684:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	69ba      	ldr	r2, [r7, #24]
 800368a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800368c:	683b      	ldr	r3, [r7, #0]
 800368e:	685b      	ldr	r3, [r3, #4]
 8003690:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003694:	2b00      	cmp	r3, #0
 8003696:	f000 80be 	beq.w	8003816 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800369a:	4b66      	ldr	r3, [pc, #408]	; (8003834 <HAL_GPIO_Init+0x324>)
 800369c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800369e:	4a65      	ldr	r2, [pc, #404]	; (8003834 <HAL_GPIO_Init+0x324>)
 80036a0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80036a4:	6453      	str	r3, [r2, #68]	; 0x44
 80036a6:	4b63      	ldr	r3, [pc, #396]	; (8003834 <HAL_GPIO_Init+0x324>)
 80036a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80036ae:	60fb      	str	r3, [r7, #12]
 80036b0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80036b2:	4a61      	ldr	r2, [pc, #388]	; (8003838 <HAL_GPIO_Init+0x328>)
 80036b4:	69fb      	ldr	r3, [r7, #28]
 80036b6:	089b      	lsrs	r3, r3, #2
 80036b8:	3302      	adds	r3, #2
 80036ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80036be:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80036c0:	69fb      	ldr	r3, [r7, #28]
 80036c2:	f003 0303 	and.w	r3, r3, #3
 80036c6:	009b      	lsls	r3, r3, #2
 80036c8:	220f      	movs	r2, #15
 80036ca:	fa02 f303 	lsl.w	r3, r2, r3
 80036ce:	43db      	mvns	r3, r3
 80036d0:	69ba      	ldr	r2, [r7, #24]
 80036d2:	4013      	ands	r3, r2
 80036d4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	4a58      	ldr	r2, [pc, #352]	; (800383c <HAL_GPIO_Init+0x32c>)
 80036da:	4293      	cmp	r3, r2
 80036dc:	d037      	beq.n	800374e <HAL_GPIO_Init+0x23e>
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	4a57      	ldr	r2, [pc, #348]	; (8003840 <HAL_GPIO_Init+0x330>)
 80036e2:	4293      	cmp	r3, r2
 80036e4:	d031      	beq.n	800374a <HAL_GPIO_Init+0x23a>
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	4a56      	ldr	r2, [pc, #344]	; (8003844 <HAL_GPIO_Init+0x334>)
 80036ea:	4293      	cmp	r3, r2
 80036ec:	d02b      	beq.n	8003746 <HAL_GPIO_Init+0x236>
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	4a55      	ldr	r2, [pc, #340]	; (8003848 <HAL_GPIO_Init+0x338>)
 80036f2:	4293      	cmp	r3, r2
 80036f4:	d025      	beq.n	8003742 <HAL_GPIO_Init+0x232>
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	4a54      	ldr	r2, [pc, #336]	; (800384c <HAL_GPIO_Init+0x33c>)
 80036fa:	4293      	cmp	r3, r2
 80036fc:	d01f      	beq.n	800373e <HAL_GPIO_Init+0x22e>
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	4a53      	ldr	r2, [pc, #332]	; (8003850 <HAL_GPIO_Init+0x340>)
 8003702:	4293      	cmp	r3, r2
 8003704:	d019      	beq.n	800373a <HAL_GPIO_Init+0x22a>
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	4a52      	ldr	r2, [pc, #328]	; (8003854 <HAL_GPIO_Init+0x344>)
 800370a:	4293      	cmp	r3, r2
 800370c:	d013      	beq.n	8003736 <HAL_GPIO_Init+0x226>
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	4a51      	ldr	r2, [pc, #324]	; (8003858 <HAL_GPIO_Init+0x348>)
 8003712:	4293      	cmp	r3, r2
 8003714:	d00d      	beq.n	8003732 <HAL_GPIO_Init+0x222>
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	4a50      	ldr	r2, [pc, #320]	; (800385c <HAL_GPIO_Init+0x34c>)
 800371a:	4293      	cmp	r3, r2
 800371c:	d007      	beq.n	800372e <HAL_GPIO_Init+0x21e>
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	4a4f      	ldr	r2, [pc, #316]	; (8003860 <HAL_GPIO_Init+0x350>)
 8003722:	4293      	cmp	r3, r2
 8003724:	d101      	bne.n	800372a <HAL_GPIO_Init+0x21a>
 8003726:	2309      	movs	r3, #9
 8003728:	e012      	b.n	8003750 <HAL_GPIO_Init+0x240>
 800372a:	230a      	movs	r3, #10
 800372c:	e010      	b.n	8003750 <HAL_GPIO_Init+0x240>
 800372e:	2308      	movs	r3, #8
 8003730:	e00e      	b.n	8003750 <HAL_GPIO_Init+0x240>
 8003732:	2307      	movs	r3, #7
 8003734:	e00c      	b.n	8003750 <HAL_GPIO_Init+0x240>
 8003736:	2306      	movs	r3, #6
 8003738:	e00a      	b.n	8003750 <HAL_GPIO_Init+0x240>
 800373a:	2305      	movs	r3, #5
 800373c:	e008      	b.n	8003750 <HAL_GPIO_Init+0x240>
 800373e:	2304      	movs	r3, #4
 8003740:	e006      	b.n	8003750 <HAL_GPIO_Init+0x240>
 8003742:	2303      	movs	r3, #3
 8003744:	e004      	b.n	8003750 <HAL_GPIO_Init+0x240>
 8003746:	2302      	movs	r3, #2
 8003748:	e002      	b.n	8003750 <HAL_GPIO_Init+0x240>
 800374a:	2301      	movs	r3, #1
 800374c:	e000      	b.n	8003750 <HAL_GPIO_Init+0x240>
 800374e:	2300      	movs	r3, #0
 8003750:	69fa      	ldr	r2, [r7, #28]
 8003752:	f002 0203 	and.w	r2, r2, #3
 8003756:	0092      	lsls	r2, r2, #2
 8003758:	4093      	lsls	r3, r2
 800375a:	69ba      	ldr	r2, [r7, #24]
 800375c:	4313      	orrs	r3, r2
 800375e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8003760:	4935      	ldr	r1, [pc, #212]	; (8003838 <HAL_GPIO_Init+0x328>)
 8003762:	69fb      	ldr	r3, [r7, #28]
 8003764:	089b      	lsrs	r3, r3, #2
 8003766:	3302      	adds	r3, #2
 8003768:	69ba      	ldr	r2, [r7, #24]
 800376a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800376e:	4b3d      	ldr	r3, [pc, #244]	; (8003864 <HAL_GPIO_Init+0x354>)
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003774:	693b      	ldr	r3, [r7, #16]
 8003776:	43db      	mvns	r3, r3
 8003778:	69ba      	ldr	r2, [r7, #24]
 800377a:	4013      	ands	r3, r2
 800377c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800377e:	683b      	ldr	r3, [r7, #0]
 8003780:	685b      	ldr	r3, [r3, #4]
 8003782:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003786:	2b00      	cmp	r3, #0
 8003788:	d003      	beq.n	8003792 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800378a:	69ba      	ldr	r2, [r7, #24]
 800378c:	693b      	ldr	r3, [r7, #16]
 800378e:	4313      	orrs	r3, r2
 8003790:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003792:	4a34      	ldr	r2, [pc, #208]	; (8003864 <HAL_GPIO_Init+0x354>)
 8003794:	69bb      	ldr	r3, [r7, #24]
 8003796:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003798:	4b32      	ldr	r3, [pc, #200]	; (8003864 <HAL_GPIO_Init+0x354>)
 800379a:	685b      	ldr	r3, [r3, #4]
 800379c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800379e:	693b      	ldr	r3, [r7, #16]
 80037a0:	43db      	mvns	r3, r3
 80037a2:	69ba      	ldr	r2, [r7, #24]
 80037a4:	4013      	ands	r3, r2
 80037a6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80037a8:	683b      	ldr	r3, [r7, #0]
 80037aa:	685b      	ldr	r3, [r3, #4]
 80037ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d003      	beq.n	80037bc <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80037b4:	69ba      	ldr	r2, [r7, #24]
 80037b6:	693b      	ldr	r3, [r7, #16]
 80037b8:	4313      	orrs	r3, r2
 80037ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80037bc:	4a29      	ldr	r2, [pc, #164]	; (8003864 <HAL_GPIO_Init+0x354>)
 80037be:	69bb      	ldr	r3, [r7, #24]
 80037c0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80037c2:	4b28      	ldr	r3, [pc, #160]	; (8003864 <HAL_GPIO_Init+0x354>)
 80037c4:	689b      	ldr	r3, [r3, #8]
 80037c6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80037c8:	693b      	ldr	r3, [r7, #16]
 80037ca:	43db      	mvns	r3, r3
 80037cc:	69ba      	ldr	r2, [r7, #24]
 80037ce:	4013      	ands	r3, r2
 80037d0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80037d2:	683b      	ldr	r3, [r7, #0]
 80037d4:	685b      	ldr	r3, [r3, #4]
 80037d6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d003      	beq.n	80037e6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80037de:	69ba      	ldr	r2, [r7, #24]
 80037e0:	693b      	ldr	r3, [r7, #16]
 80037e2:	4313      	orrs	r3, r2
 80037e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80037e6:	4a1f      	ldr	r2, [pc, #124]	; (8003864 <HAL_GPIO_Init+0x354>)
 80037e8:	69bb      	ldr	r3, [r7, #24]
 80037ea:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80037ec:	4b1d      	ldr	r3, [pc, #116]	; (8003864 <HAL_GPIO_Init+0x354>)
 80037ee:	68db      	ldr	r3, [r3, #12]
 80037f0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80037f2:	693b      	ldr	r3, [r7, #16]
 80037f4:	43db      	mvns	r3, r3
 80037f6:	69ba      	ldr	r2, [r7, #24]
 80037f8:	4013      	ands	r3, r2
 80037fa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80037fc:	683b      	ldr	r3, [r7, #0]
 80037fe:	685b      	ldr	r3, [r3, #4]
 8003800:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003804:	2b00      	cmp	r3, #0
 8003806:	d003      	beq.n	8003810 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003808:	69ba      	ldr	r2, [r7, #24]
 800380a:	693b      	ldr	r3, [r7, #16]
 800380c:	4313      	orrs	r3, r2
 800380e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003810:	4a14      	ldr	r2, [pc, #80]	; (8003864 <HAL_GPIO_Init+0x354>)
 8003812:	69bb      	ldr	r3, [r7, #24]
 8003814:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8003816:	69fb      	ldr	r3, [r7, #28]
 8003818:	3301      	adds	r3, #1
 800381a:	61fb      	str	r3, [r7, #28]
 800381c:	69fb      	ldr	r3, [r7, #28]
 800381e:	2b0f      	cmp	r3, #15
 8003820:	f67f ae86 	bls.w	8003530 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8003824:	bf00      	nop
 8003826:	bf00      	nop
 8003828:	3724      	adds	r7, #36	; 0x24
 800382a:	46bd      	mov	sp, r7
 800382c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003830:	4770      	bx	lr
 8003832:	bf00      	nop
 8003834:	40023800 	.word	0x40023800
 8003838:	40013800 	.word	0x40013800
 800383c:	40020000 	.word	0x40020000
 8003840:	40020400 	.word	0x40020400
 8003844:	40020800 	.word	0x40020800
 8003848:	40020c00 	.word	0x40020c00
 800384c:	40021000 	.word	0x40021000
 8003850:	40021400 	.word	0x40021400
 8003854:	40021800 	.word	0x40021800
 8003858:	40021c00 	.word	0x40021c00
 800385c:	40022000 	.word	0x40022000
 8003860:	40022400 	.word	0x40022400
 8003864:	40013c00 	.word	0x40013c00

08003868 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003868:	b480      	push	{r7}
 800386a:	b085      	sub	sp, #20
 800386c:	af00      	add	r7, sp, #0
 800386e:	6078      	str	r0, [r7, #4]
 8003870:	460b      	mov	r3, r1
 8003872:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	691a      	ldr	r2, [r3, #16]
 8003878:	887b      	ldrh	r3, [r7, #2]
 800387a:	4013      	ands	r3, r2
 800387c:	2b00      	cmp	r3, #0
 800387e:	d002      	beq.n	8003886 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003880:	2301      	movs	r3, #1
 8003882:	73fb      	strb	r3, [r7, #15]
 8003884:	e001      	b.n	800388a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003886:	2300      	movs	r3, #0
 8003888:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800388a:	7bfb      	ldrb	r3, [r7, #15]
}
 800388c:	4618      	mov	r0, r3
 800388e:	3714      	adds	r7, #20
 8003890:	46bd      	mov	sp, r7
 8003892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003896:	4770      	bx	lr

08003898 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003898:	b480      	push	{r7}
 800389a:	b083      	sub	sp, #12
 800389c:	af00      	add	r7, sp, #0
 800389e:	6078      	str	r0, [r7, #4]
 80038a0:	460b      	mov	r3, r1
 80038a2:	807b      	strh	r3, [r7, #2]
 80038a4:	4613      	mov	r3, r2
 80038a6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80038a8:	787b      	ldrb	r3, [r7, #1]
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d003      	beq.n	80038b6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80038ae:	887a      	ldrh	r2, [r7, #2]
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80038b4:	e003      	b.n	80038be <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80038b6:	887b      	ldrh	r3, [r7, #2]
 80038b8:	041a      	lsls	r2, r3, #16
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	619a      	str	r2, [r3, #24]
}
 80038be:	bf00      	nop
 80038c0:	370c      	adds	r7, #12
 80038c2:	46bd      	mov	sp, r7
 80038c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c8:	4770      	bx	lr
	...

080038cc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80038cc:	b580      	push	{r7, lr}
 80038ce:	b082      	sub	sp, #8
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d101      	bne.n	80038de <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80038da:	2301      	movs	r3, #1
 80038dc:	e07f      	b.n	80039de <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80038e4:	b2db      	uxtb	r3, r3
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d106      	bne.n	80038f8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	2200      	movs	r2, #0
 80038ee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80038f2:	6878      	ldr	r0, [r7, #4]
 80038f4:	f7fd f87e 	bl	80009f4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	2224      	movs	r2, #36	; 0x24
 80038fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	681a      	ldr	r2, [r3, #0]
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f022 0201 	bic.w	r2, r2, #1
 800390e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	685a      	ldr	r2, [r3, #4]
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800391c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	689a      	ldr	r2, [r3, #8]
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800392c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	68db      	ldr	r3, [r3, #12]
 8003932:	2b01      	cmp	r3, #1
 8003934:	d107      	bne.n	8003946 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	689a      	ldr	r2, [r3, #8]
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003942:	609a      	str	r2, [r3, #8]
 8003944:	e006      	b.n	8003954 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	689a      	ldr	r2, [r3, #8]
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8003952:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	68db      	ldr	r3, [r3, #12]
 8003958:	2b02      	cmp	r3, #2
 800395a:	d104      	bne.n	8003966 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003964:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	6859      	ldr	r1, [r3, #4]
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681a      	ldr	r2, [r3, #0]
 8003970:	4b1d      	ldr	r3, [pc, #116]	; (80039e8 <HAL_I2C_Init+0x11c>)
 8003972:	430b      	orrs	r3, r1
 8003974:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	68da      	ldr	r2, [r3, #12]
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003984:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	691a      	ldr	r2, [r3, #16]
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	695b      	ldr	r3, [r3, #20]
 800398e:	ea42 0103 	orr.w	r1, r2, r3
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	699b      	ldr	r3, [r3, #24]
 8003996:	021a      	lsls	r2, r3, #8
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	430a      	orrs	r2, r1
 800399e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	69d9      	ldr	r1, [r3, #28]
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	6a1a      	ldr	r2, [r3, #32]
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	430a      	orrs	r2, r1
 80039ae:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	681a      	ldr	r2, [r3, #0]
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	f042 0201 	orr.w	r2, r2, #1
 80039be:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	2200      	movs	r2, #0
 80039c4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	2220      	movs	r2, #32
 80039ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	2200      	movs	r2, #0
 80039d2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	2200      	movs	r2, #0
 80039d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80039dc:	2300      	movs	r3, #0
}
 80039de:	4618      	mov	r0, r3
 80039e0:	3708      	adds	r7, #8
 80039e2:	46bd      	mov	sp, r7
 80039e4:	bd80      	pop	{r7, pc}
 80039e6:	bf00      	nop
 80039e8:	02008000 	.word	0x02008000

080039ec <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size,
                                          uint32_t Timeout)
{
 80039ec:	b580      	push	{r7, lr}
 80039ee:	b088      	sub	sp, #32
 80039f0:	af02      	add	r7, sp, #8
 80039f2:	60f8      	str	r0, [r7, #12]
 80039f4:	607a      	str	r2, [r7, #4]
 80039f6:	461a      	mov	r2, r3
 80039f8:	460b      	mov	r3, r1
 80039fa:	817b      	strh	r3, [r7, #10]
 80039fc:	4613      	mov	r3, r2
 80039fe:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003a06:	b2db      	uxtb	r3, r3
 8003a08:	2b20      	cmp	r3, #32
 8003a0a:	f040 80da 	bne.w	8003bc2 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003a14:	2b01      	cmp	r3, #1
 8003a16:	d101      	bne.n	8003a1c <HAL_I2C_Master_Transmit+0x30>
 8003a18:	2302      	movs	r3, #2
 8003a1a:	e0d3      	b.n	8003bc4 <HAL_I2C_Master_Transmit+0x1d8>
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	2201      	movs	r2, #1
 8003a20:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003a24:	f7ff f9aa 	bl	8002d7c <HAL_GetTick>
 8003a28:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003a2a:	697b      	ldr	r3, [r7, #20]
 8003a2c:	9300      	str	r3, [sp, #0]
 8003a2e:	2319      	movs	r3, #25
 8003a30:	2201      	movs	r2, #1
 8003a32:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003a36:	68f8      	ldr	r0, [r7, #12]
 8003a38:	f000 f9e6 	bl	8003e08 <I2C_WaitOnFlagUntilTimeout>
 8003a3c:	4603      	mov	r3, r0
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d001      	beq.n	8003a46 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8003a42:	2301      	movs	r3, #1
 8003a44:	e0be      	b.n	8003bc4 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	2221      	movs	r2, #33	; 0x21
 8003a4a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	2210      	movs	r2, #16
 8003a52:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	2200      	movs	r2, #0
 8003a5a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	687a      	ldr	r2, [r7, #4]
 8003a60:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	893a      	ldrh	r2, [r7, #8]
 8003a66:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	2200      	movs	r2, #0
 8003a6c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a72:	b29b      	uxth	r3, r3
 8003a74:	2bff      	cmp	r3, #255	; 0xff
 8003a76:	d90e      	bls.n	8003a96 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	22ff      	movs	r2, #255	; 0xff
 8003a7c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a82:	b2da      	uxtb	r2, r3
 8003a84:	8979      	ldrh	r1, [r7, #10]
 8003a86:	4b51      	ldr	r3, [pc, #324]	; (8003bcc <HAL_I2C_Master_Transmit+0x1e0>)
 8003a88:	9300      	str	r3, [sp, #0]
 8003a8a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003a8e:	68f8      	ldr	r0, [r7, #12]
 8003a90:	f000 fb48 	bl	8004124 <I2C_TransferConfig>
 8003a94:	e06c      	b.n	8003b70 <HAL_I2C_Master_Transmit+0x184>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a9a:	b29a      	uxth	r2, r3
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003aa4:	b2da      	uxtb	r2, r3
 8003aa6:	8979      	ldrh	r1, [r7, #10]
 8003aa8:	4b48      	ldr	r3, [pc, #288]	; (8003bcc <HAL_I2C_Master_Transmit+0x1e0>)
 8003aaa:	9300      	str	r3, [sp, #0]
 8003aac:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003ab0:	68f8      	ldr	r0, [r7, #12]
 8003ab2:	f000 fb37 	bl	8004124 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 8003ab6:	e05b      	b.n	8003b70 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003ab8:	697a      	ldr	r2, [r7, #20]
 8003aba:	6a39      	ldr	r1, [r7, #32]
 8003abc:	68f8      	ldr	r0, [r7, #12]
 8003abe:	f000 f9e3 	bl	8003e88 <I2C_WaitOnTXISFlagUntilTimeout>
 8003ac2:	4603      	mov	r3, r0
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d001      	beq.n	8003acc <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8003ac8:	2301      	movs	r3, #1
 8003aca:	e07b      	b.n	8003bc4 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ad0:	781a      	ldrb	r2, [r3, #0]
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003adc:	1c5a      	adds	r2, r3, #1
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ae6:	b29b      	uxth	r3, r3
 8003ae8:	3b01      	subs	r3, #1
 8003aea:	b29a      	uxth	r2, r3
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003af4:	3b01      	subs	r3, #1
 8003af6:	b29a      	uxth	r2, r3
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b00:	b29b      	uxth	r3, r3
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d034      	beq.n	8003b70 <HAL_I2C_Master_Transmit+0x184>
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d130      	bne.n	8003b70 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003b0e:	697b      	ldr	r3, [r7, #20]
 8003b10:	9300      	str	r3, [sp, #0]
 8003b12:	6a3b      	ldr	r3, [r7, #32]
 8003b14:	2200      	movs	r2, #0
 8003b16:	2180      	movs	r1, #128	; 0x80
 8003b18:	68f8      	ldr	r0, [r7, #12]
 8003b1a:	f000 f975 	bl	8003e08 <I2C_WaitOnFlagUntilTimeout>
 8003b1e:	4603      	mov	r3, r0
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d001      	beq.n	8003b28 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8003b24:	2301      	movs	r3, #1
 8003b26:	e04d      	b.n	8003bc4 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b2c:	b29b      	uxth	r3, r3
 8003b2e:	2bff      	cmp	r3, #255	; 0xff
 8003b30:	d90e      	bls.n	8003b50 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	22ff      	movs	r2, #255	; 0xff
 8003b36:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b3c:	b2da      	uxtb	r2, r3
 8003b3e:	8979      	ldrh	r1, [r7, #10]
 8003b40:	2300      	movs	r3, #0
 8003b42:	9300      	str	r3, [sp, #0]
 8003b44:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003b48:	68f8      	ldr	r0, [r7, #12]
 8003b4a:	f000 faeb 	bl	8004124 <I2C_TransferConfig>
 8003b4e:	e00f      	b.n	8003b70 <HAL_I2C_Master_Transmit+0x184>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b54:	b29a      	uxth	r2, r3
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b5e:	b2da      	uxtb	r2, r3
 8003b60:	8979      	ldrh	r1, [r7, #10]
 8003b62:	2300      	movs	r3, #0
 8003b64:	9300      	str	r3, [sp, #0]
 8003b66:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003b6a:	68f8      	ldr	r0, [r7, #12]
 8003b6c:	f000 fada 	bl	8004124 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b74:	b29b      	uxth	r3, r3
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d19e      	bne.n	8003ab8 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003b7a:	697a      	ldr	r2, [r7, #20]
 8003b7c:	6a39      	ldr	r1, [r7, #32]
 8003b7e:	68f8      	ldr	r0, [r7, #12]
 8003b80:	f000 f9c2 	bl	8003f08 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003b84:	4603      	mov	r3, r0
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d001      	beq.n	8003b8e <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8003b8a:	2301      	movs	r3, #1
 8003b8c:	e01a      	b.n	8003bc4 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	2220      	movs	r2, #32
 8003b94:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	6859      	ldr	r1, [r3, #4]
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	681a      	ldr	r2, [r3, #0]
 8003ba0:	4b0b      	ldr	r3, [pc, #44]	; (8003bd0 <HAL_I2C_Master_Transmit+0x1e4>)
 8003ba2:	400b      	ands	r3, r1
 8003ba4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	2220      	movs	r2, #32
 8003baa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	2200      	movs	r2, #0
 8003bb2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	2200      	movs	r2, #0
 8003bba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003bbe:	2300      	movs	r3, #0
 8003bc0:	e000      	b.n	8003bc4 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8003bc2:	2302      	movs	r3, #2
  }
}
 8003bc4:	4618      	mov	r0, r3
 8003bc6:	3718      	adds	r7, #24
 8003bc8:	46bd      	mov	sp, r7
 8003bca:	bd80      	pop	{r7, pc}
 8003bcc:	80002000 	.word	0x80002000
 8003bd0:	fe00e800 	.word	0xfe00e800

08003bd4 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size,
                                         uint32_t Timeout)
{
 8003bd4:	b580      	push	{r7, lr}
 8003bd6:	b088      	sub	sp, #32
 8003bd8:	af02      	add	r7, sp, #8
 8003bda:	60f8      	str	r0, [r7, #12]
 8003bdc:	607a      	str	r2, [r7, #4]
 8003bde:	461a      	mov	r2, r3
 8003be0:	460b      	mov	r3, r1
 8003be2:	817b      	strh	r3, [r7, #10]
 8003be4:	4613      	mov	r3, r2
 8003be6:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003bee:	b2db      	uxtb	r3, r3
 8003bf0:	2b20      	cmp	r3, #32
 8003bf2:	f040 80db 	bne.w	8003dac <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003bfc:	2b01      	cmp	r3, #1
 8003bfe:	d101      	bne.n	8003c04 <HAL_I2C_Master_Receive+0x30>
 8003c00:	2302      	movs	r3, #2
 8003c02:	e0d4      	b.n	8003dae <HAL_I2C_Master_Receive+0x1da>
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	2201      	movs	r2, #1
 8003c08:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003c0c:	f7ff f8b6 	bl	8002d7c <HAL_GetTick>
 8003c10:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003c12:	697b      	ldr	r3, [r7, #20]
 8003c14:	9300      	str	r3, [sp, #0]
 8003c16:	2319      	movs	r3, #25
 8003c18:	2201      	movs	r2, #1
 8003c1a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003c1e:	68f8      	ldr	r0, [r7, #12]
 8003c20:	f000 f8f2 	bl	8003e08 <I2C_WaitOnFlagUntilTimeout>
 8003c24:	4603      	mov	r3, r0
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d001      	beq.n	8003c2e <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8003c2a:	2301      	movs	r3, #1
 8003c2c:	e0bf      	b.n	8003dae <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	2222      	movs	r2, #34	; 0x22
 8003c32:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	2210      	movs	r2, #16
 8003c3a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	2200      	movs	r2, #0
 8003c42:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	687a      	ldr	r2, [r7, #4]
 8003c48:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	893a      	ldrh	r2, [r7, #8]
 8003c4e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	2200      	movs	r2, #0
 8003c54:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c5a:	b29b      	uxth	r3, r3
 8003c5c:	2bff      	cmp	r3, #255	; 0xff
 8003c5e:	d90e      	bls.n	8003c7e <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	22ff      	movs	r2, #255	; 0xff
 8003c64:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c6a:	b2da      	uxtb	r2, r3
 8003c6c:	8979      	ldrh	r1, [r7, #10]
 8003c6e:	4b52      	ldr	r3, [pc, #328]	; (8003db8 <HAL_I2C_Master_Receive+0x1e4>)
 8003c70:	9300      	str	r3, [sp, #0]
 8003c72:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003c76:	68f8      	ldr	r0, [r7, #12]
 8003c78:	f000 fa54 	bl	8004124 <I2C_TransferConfig>
 8003c7c:	e06d      	b.n	8003d5a <HAL_I2C_Master_Receive+0x186>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c82:	b29a      	uxth	r2, r3
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c8c:	b2da      	uxtb	r2, r3
 8003c8e:	8979      	ldrh	r1, [r7, #10]
 8003c90:	4b49      	ldr	r3, [pc, #292]	; (8003db8 <HAL_I2C_Master_Receive+0x1e4>)
 8003c92:	9300      	str	r3, [sp, #0]
 8003c94:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003c98:	68f8      	ldr	r0, [r7, #12]
 8003c9a:	f000 fa43 	bl	8004124 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 8003c9e:	e05c      	b.n	8003d5a <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003ca0:	697a      	ldr	r2, [r7, #20]
 8003ca2:	6a39      	ldr	r1, [r7, #32]
 8003ca4:	68f8      	ldr	r0, [r7, #12]
 8003ca6:	f000 f96b 	bl	8003f80 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003caa:	4603      	mov	r3, r0
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d001      	beq.n	8003cb4 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8003cb0:	2301      	movs	r3, #1
 8003cb2:	e07c      	b.n	8003dae <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cbe:	b2d2      	uxtb	r2, r2
 8003cc0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cc6:	1c5a      	adds	r2, r3, #1
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003cd0:	3b01      	subs	r3, #1
 8003cd2:	b29a      	uxth	r2, r3
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cdc:	b29b      	uxth	r3, r3
 8003cde:	3b01      	subs	r3, #1
 8003ce0:	b29a      	uxth	r2, r3
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cea:	b29b      	uxth	r3, r3
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d034      	beq.n	8003d5a <HAL_I2C_Master_Receive+0x186>
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d130      	bne.n	8003d5a <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003cf8:	697b      	ldr	r3, [r7, #20]
 8003cfa:	9300      	str	r3, [sp, #0]
 8003cfc:	6a3b      	ldr	r3, [r7, #32]
 8003cfe:	2200      	movs	r2, #0
 8003d00:	2180      	movs	r1, #128	; 0x80
 8003d02:	68f8      	ldr	r0, [r7, #12]
 8003d04:	f000 f880 	bl	8003e08 <I2C_WaitOnFlagUntilTimeout>
 8003d08:	4603      	mov	r3, r0
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d001      	beq.n	8003d12 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8003d0e:	2301      	movs	r3, #1
 8003d10:	e04d      	b.n	8003dae <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d16:	b29b      	uxth	r3, r3
 8003d18:	2bff      	cmp	r3, #255	; 0xff
 8003d1a:	d90e      	bls.n	8003d3a <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	22ff      	movs	r2, #255	; 0xff
 8003d20:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d26:	b2da      	uxtb	r2, r3
 8003d28:	8979      	ldrh	r1, [r7, #10]
 8003d2a:	2300      	movs	r3, #0
 8003d2c:	9300      	str	r3, [sp, #0]
 8003d2e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003d32:	68f8      	ldr	r0, [r7, #12]
 8003d34:	f000 f9f6 	bl	8004124 <I2C_TransferConfig>
 8003d38:	e00f      	b.n	8003d5a <HAL_I2C_Master_Receive+0x186>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d3e:	b29a      	uxth	r2, r3
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d48:	b2da      	uxtb	r2, r3
 8003d4a:	8979      	ldrh	r1, [r7, #10]
 8003d4c:	2300      	movs	r3, #0
 8003d4e:	9300      	str	r3, [sp, #0]
 8003d50:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003d54:	68f8      	ldr	r0, [r7, #12]
 8003d56:	f000 f9e5 	bl	8004124 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d5e:	b29b      	uxth	r3, r3
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d19d      	bne.n	8003ca0 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003d64:	697a      	ldr	r2, [r7, #20]
 8003d66:	6a39      	ldr	r1, [r7, #32]
 8003d68:	68f8      	ldr	r0, [r7, #12]
 8003d6a:	f000 f8cd 	bl	8003f08 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003d6e:	4603      	mov	r3, r0
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d001      	beq.n	8003d78 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8003d74:	2301      	movs	r3, #1
 8003d76:	e01a      	b.n	8003dae <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	2220      	movs	r2, #32
 8003d7e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	6859      	ldr	r1, [r3, #4]
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	681a      	ldr	r2, [r3, #0]
 8003d8a:	4b0c      	ldr	r3, [pc, #48]	; (8003dbc <HAL_I2C_Master_Receive+0x1e8>)
 8003d8c:	400b      	ands	r3, r1
 8003d8e:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	2220      	movs	r2, #32
 8003d94:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	2200      	movs	r2, #0
 8003d9c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	2200      	movs	r2, #0
 8003da4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003da8:	2300      	movs	r3, #0
 8003daa:	e000      	b.n	8003dae <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8003dac:	2302      	movs	r3, #2
  }
}
 8003dae:	4618      	mov	r0, r3
 8003db0:	3718      	adds	r7, #24
 8003db2:	46bd      	mov	sp, r7
 8003db4:	bd80      	pop	{r7, pc}
 8003db6:	bf00      	nop
 8003db8:	80002400 	.word	0x80002400
 8003dbc:	fe00e800 	.word	0xfe00e800

08003dc0 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003dc0:	b480      	push	{r7}
 8003dc2:	b083      	sub	sp, #12
 8003dc4:	af00      	add	r7, sp, #0
 8003dc6:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	699b      	ldr	r3, [r3, #24]
 8003dce:	f003 0302 	and.w	r3, r3, #2
 8003dd2:	2b02      	cmp	r3, #2
 8003dd4:	d103      	bne.n	8003dde <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	2200      	movs	r2, #0
 8003ddc:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	699b      	ldr	r3, [r3, #24]
 8003de4:	f003 0301 	and.w	r3, r3, #1
 8003de8:	2b01      	cmp	r3, #1
 8003dea:	d007      	beq.n	8003dfc <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	699a      	ldr	r2, [r3, #24]
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	f042 0201 	orr.w	r2, r2, #1
 8003dfa:	619a      	str	r2, [r3, #24]
  }
}
 8003dfc:	bf00      	nop
 8003dfe:	370c      	adds	r7, #12
 8003e00:	46bd      	mov	sp, r7
 8003e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e06:	4770      	bx	lr

08003e08 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003e08:	b580      	push	{r7, lr}
 8003e0a:	b084      	sub	sp, #16
 8003e0c:	af00      	add	r7, sp, #0
 8003e0e:	60f8      	str	r0, [r7, #12]
 8003e10:	60b9      	str	r1, [r7, #8]
 8003e12:	603b      	str	r3, [r7, #0]
 8003e14:	4613      	mov	r3, r2
 8003e16:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003e18:	e022      	b.n	8003e60 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e1a:	683b      	ldr	r3, [r7, #0]
 8003e1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e20:	d01e      	beq.n	8003e60 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e22:	f7fe ffab 	bl	8002d7c <HAL_GetTick>
 8003e26:	4602      	mov	r2, r0
 8003e28:	69bb      	ldr	r3, [r7, #24]
 8003e2a:	1ad3      	subs	r3, r2, r3
 8003e2c:	683a      	ldr	r2, [r7, #0]
 8003e2e:	429a      	cmp	r2, r3
 8003e30:	d302      	bcc.n	8003e38 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003e32:	683b      	ldr	r3, [r7, #0]
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d113      	bne.n	8003e60 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e3c:	f043 0220 	orr.w	r2, r3, #32
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	2220      	movs	r2, #32
 8003e48:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	2200      	movs	r2, #0
 8003e50:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	2200      	movs	r2, #0
 8003e58:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8003e5c:	2301      	movs	r3, #1
 8003e5e:	e00f      	b.n	8003e80 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	699a      	ldr	r2, [r3, #24]
 8003e66:	68bb      	ldr	r3, [r7, #8]
 8003e68:	4013      	ands	r3, r2
 8003e6a:	68ba      	ldr	r2, [r7, #8]
 8003e6c:	429a      	cmp	r2, r3
 8003e6e:	bf0c      	ite	eq
 8003e70:	2301      	moveq	r3, #1
 8003e72:	2300      	movne	r3, #0
 8003e74:	b2db      	uxtb	r3, r3
 8003e76:	461a      	mov	r2, r3
 8003e78:	79fb      	ldrb	r3, [r7, #7]
 8003e7a:	429a      	cmp	r2, r3
 8003e7c:	d0cd      	beq.n	8003e1a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003e7e:	2300      	movs	r3, #0
}
 8003e80:	4618      	mov	r0, r3
 8003e82:	3710      	adds	r7, #16
 8003e84:	46bd      	mov	sp, r7
 8003e86:	bd80      	pop	{r7, pc}

08003e88 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003e88:	b580      	push	{r7, lr}
 8003e8a:	b084      	sub	sp, #16
 8003e8c:	af00      	add	r7, sp, #0
 8003e8e:	60f8      	str	r0, [r7, #12]
 8003e90:	60b9      	str	r1, [r7, #8]
 8003e92:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003e94:	e02c      	b.n	8003ef0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8003e96:	687a      	ldr	r2, [r7, #4]
 8003e98:	68b9      	ldr	r1, [r7, #8]
 8003e9a:	68f8      	ldr	r0, [r7, #12]
 8003e9c:	f000 f8dc 	bl	8004058 <I2C_IsAcknowledgeFailed>
 8003ea0:	4603      	mov	r3, r0
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d001      	beq.n	8003eaa <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003ea6:	2301      	movs	r3, #1
 8003ea8:	e02a      	b.n	8003f00 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003eaa:	68bb      	ldr	r3, [r7, #8]
 8003eac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003eb0:	d01e      	beq.n	8003ef0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003eb2:	f7fe ff63 	bl	8002d7c <HAL_GetTick>
 8003eb6:	4602      	mov	r2, r0
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	1ad3      	subs	r3, r2, r3
 8003ebc:	68ba      	ldr	r2, [r7, #8]
 8003ebe:	429a      	cmp	r2, r3
 8003ec0:	d302      	bcc.n	8003ec8 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003ec2:	68bb      	ldr	r3, [r7, #8]
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d113      	bne.n	8003ef0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ecc:	f043 0220 	orr.w	r2, r3, #32
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	2220      	movs	r2, #32
 8003ed8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	2200      	movs	r2, #0
 8003ee0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	2200      	movs	r2, #0
 8003ee8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8003eec:	2301      	movs	r3, #1
 8003eee:	e007      	b.n	8003f00 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	699b      	ldr	r3, [r3, #24]
 8003ef6:	f003 0302 	and.w	r3, r3, #2
 8003efa:	2b02      	cmp	r3, #2
 8003efc:	d1cb      	bne.n	8003e96 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003efe:	2300      	movs	r3, #0
}
 8003f00:	4618      	mov	r0, r3
 8003f02:	3710      	adds	r7, #16
 8003f04:	46bd      	mov	sp, r7
 8003f06:	bd80      	pop	{r7, pc}

08003f08 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003f08:	b580      	push	{r7, lr}
 8003f0a:	b084      	sub	sp, #16
 8003f0c:	af00      	add	r7, sp, #0
 8003f0e:	60f8      	str	r0, [r7, #12]
 8003f10:	60b9      	str	r1, [r7, #8]
 8003f12:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003f14:	e028      	b.n	8003f68 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8003f16:	687a      	ldr	r2, [r7, #4]
 8003f18:	68b9      	ldr	r1, [r7, #8]
 8003f1a:	68f8      	ldr	r0, [r7, #12]
 8003f1c:	f000 f89c 	bl	8004058 <I2C_IsAcknowledgeFailed>
 8003f20:	4603      	mov	r3, r0
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d001      	beq.n	8003f2a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003f26:	2301      	movs	r3, #1
 8003f28:	e026      	b.n	8003f78 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f2a:	f7fe ff27 	bl	8002d7c <HAL_GetTick>
 8003f2e:	4602      	mov	r2, r0
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	1ad3      	subs	r3, r2, r3
 8003f34:	68ba      	ldr	r2, [r7, #8]
 8003f36:	429a      	cmp	r2, r3
 8003f38:	d302      	bcc.n	8003f40 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003f3a:	68bb      	ldr	r3, [r7, #8]
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d113      	bne.n	8003f68 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f44:	f043 0220 	orr.w	r2, r3, #32
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	2220      	movs	r2, #32
 8003f50:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	2200      	movs	r2, #0
 8003f58:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	2200      	movs	r2, #0
 8003f60:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8003f64:	2301      	movs	r3, #1
 8003f66:	e007      	b.n	8003f78 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	699b      	ldr	r3, [r3, #24]
 8003f6e:	f003 0320 	and.w	r3, r3, #32
 8003f72:	2b20      	cmp	r3, #32
 8003f74:	d1cf      	bne.n	8003f16 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003f76:	2300      	movs	r3, #0
}
 8003f78:	4618      	mov	r0, r3
 8003f7a:	3710      	adds	r7, #16
 8003f7c:	46bd      	mov	sp, r7
 8003f7e:	bd80      	pop	{r7, pc}

08003f80 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003f80:	b580      	push	{r7, lr}
 8003f82:	b084      	sub	sp, #16
 8003f84:	af00      	add	r7, sp, #0
 8003f86:	60f8      	str	r0, [r7, #12]
 8003f88:	60b9      	str	r1, [r7, #8]
 8003f8a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003f8c:	e055      	b.n	800403a <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8003f8e:	687a      	ldr	r2, [r7, #4]
 8003f90:	68b9      	ldr	r1, [r7, #8]
 8003f92:	68f8      	ldr	r0, [r7, #12]
 8003f94:	f000 f860 	bl	8004058 <I2C_IsAcknowledgeFailed>
 8003f98:	4603      	mov	r3, r0
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d001      	beq.n	8003fa2 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003f9e:	2301      	movs	r3, #1
 8003fa0:	e053      	b.n	800404a <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	699b      	ldr	r3, [r3, #24]
 8003fa8:	f003 0320 	and.w	r3, r3, #32
 8003fac:	2b20      	cmp	r3, #32
 8003fae:	d129      	bne.n	8004004 <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	699b      	ldr	r3, [r3, #24]
 8003fb6:	f003 0304 	and.w	r3, r3, #4
 8003fba:	2b04      	cmp	r3, #4
 8003fbc:	d105      	bne.n	8003fca <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d001      	beq.n	8003fca <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8003fc6:	2300      	movs	r3, #0
 8003fc8:	e03f      	b.n	800404a <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
      else
      {
        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	2220      	movs	r2, #32
 8003fd0:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	6859      	ldr	r1, [r3, #4]
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	681a      	ldr	r2, [r3, #0]
 8003fdc:	4b1d      	ldr	r3, [pc, #116]	; (8004054 <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>)
 8003fde:	400b      	ands	r3, r1
 8003fe0:	6053      	str	r3, [r2, #4]

        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	2200      	movs	r2, #0
 8003fe6:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	2220      	movs	r2, #32
 8003fec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	2200      	movs	r2, #0
 8003ff4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	2200      	movs	r2, #0
 8003ffc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8004000:	2301      	movs	r3, #1
 8004002:	e022      	b.n	800404a <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004004:	f7fe feba 	bl	8002d7c <HAL_GetTick>
 8004008:	4602      	mov	r2, r0
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	1ad3      	subs	r3, r2, r3
 800400e:	68ba      	ldr	r2, [r7, #8]
 8004010:	429a      	cmp	r2, r3
 8004012:	d302      	bcc.n	800401a <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
 8004014:	68bb      	ldr	r3, [r7, #8]
 8004016:	2b00      	cmp	r3, #0
 8004018:	d10f      	bne.n	800403a <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800401e:	f043 0220 	orr.w	r2, r3, #32
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	2220      	movs	r2, #32
 800402a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	2200      	movs	r2, #0
 8004032:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8004036:	2301      	movs	r3, #1
 8004038:	e007      	b.n	800404a <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	699b      	ldr	r3, [r3, #24]
 8004040:	f003 0304 	and.w	r3, r3, #4
 8004044:	2b04      	cmp	r3, #4
 8004046:	d1a2      	bne.n	8003f8e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004048:	2300      	movs	r3, #0
}
 800404a:	4618      	mov	r0, r3
 800404c:	3710      	adds	r7, #16
 800404e:	46bd      	mov	sp, r7
 8004050:	bd80      	pop	{r7, pc}
 8004052:	bf00      	nop
 8004054:	fe00e800 	.word	0xfe00e800

08004058 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004058:	b580      	push	{r7, lr}
 800405a:	b084      	sub	sp, #16
 800405c:	af00      	add	r7, sp, #0
 800405e:	60f8      	str	r0, [r7, #12]
 8004060:	60b9      	str	r1, [r7, #8]
 8004062:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	699b      	ldr	r3, [r3, #24]
 800406a:	f003 0310 	and.w	r3, r3, #16
 800406e:	2b10      	cmp	r3, #16
 8004070:	d151      	bne.n	8004116 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004072:	e022      	b.n	80040ba <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8004074:	68bb      	ldr	r3, [r7, #8]
 8004076:	f1b3 3fff 	cmp.w	r3, #4294967295
 800407a:	d01e      	beq.n	80040ba <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800407c:	f7fe fe7e 	bl	8002d7c <HAL_GetTick>
 8004080:	4602      	mov	r2, r0
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	1ad3      	subs	r3, r2, r3
 8004086:	68ba      	ldr	r2, [r7, #8]
 8004088:	429a      	cmp	r2, r3
 800408a:	d302      	bcc.n	8004092 <I2C_IsAcknowledgeFailed+0x3a>
 800408c:	68bb      	ldr	r3, [r7, #8]
 800408e:	2b00      	cmp	r3, #0
 8004090:	d113      	bne.n	80040ba <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004096:	f043 0220 	orr.w	r2, r3, #32
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	2220      	movs	r2, #32
 80040a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	2200      	movs	r2, #0
 80040aa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	2200      	movs	r2, #0
 80040b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80040b6:	2301      	movs	r3, #1
 80040b8:	e02e      	b.n	8004118 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	699b      	ldr	r3, [r3, #24]
 80040c0:	f003 0320 	and.w	r3, r3, #32
 80040c4:	2b20      	cmp	r3, #32
 80040c6:	d1d5      	bne.n	8004074 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	2210      	movs	r2, #16
 80040ce:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	2220      	movs	r2, #32
 80040d6:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80040d8:	68f8      	ldr	r0, [r7, #12]
 80040da:	f7ff fe71 	bl	8003dc0 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	6859      	ldr	r1, [r3, #4]
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	681a      	ldr	r2, [r3, #0]
 80040e8:	4b0d      	ldr	r3, [pc, #52]	; (8004120 <I2C_IsAcknowledgeFailed+0xc8>)
 80040ea:	400b      	ands	r3, r1
 80040ec:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040f2:	f043 0204 	orr.w	r2, r3, #4
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	2220      	movs	r2, #32
 80040fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	2200      	movs	r2, #0
 8004106:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	2200      	movs	r2, #0
 800410e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8004112:	2301      	movs	r3, #1
 8004114:	e000      	b.n	8004118 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8004116:	2300      	movs	r3, #0
}
 8004118:	4618      	mov	r0, r3
 800411a:	3710      	adds	r7, #16
 800411c:	46bd      	mov	sp, r7
 800411e:	bd80      	pop	{r7, pc}
 8004120:	fe00e800 	.word	0xfe00e800

08004124 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8004124:	b480      	push	{r7}
 8004126:	b085      	sub	sp, #20
 8004128:	af00      	add	r7, sp, #0
 800412a:	60f8      	str	r0, [r7, #12]
 800412c:	607b      	str	r3, [r7, #4]
 800412e:	460b      	mov	r3, r1
 8004130:	817b      	strh	r3, [r7, #10]
 8004132:	4613      	mov	r3, r2
 8004134:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	685a      	ldr	r2, [r3, #4]
 800413c:	69bb      	ldr	r3, [r7, #24]
 800413e:	0d5b      	lsrs	r3, r3, #21
 8004140:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8004144:	4b0d      	ldr	r3, [pc, #52]	; (800417c <I2C_TransferConfig+0x58>)
 8004146:	430b      	orrs	r3, r1
 8004148:	43db      	mvns	r3, r3
 800414a:	ea02 0103 	and.w	r1, r2, r3
 800414e:	897b      	ldrh	r3, [r7, #10]
 8004150:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8004154:	7a7b      	ldrb	r3, [r7, #9]
 8004156:	041b      	lsls	r3, r3, #16
 8004158:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800415c:	431a      	orrs	r2, r3
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	431a      	orrs	r2, r3
 8004162:	69bb      	ldr	r3, [r7, #24]
 8004164:	431a      	orrs	r2, r3
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	430a      	orrs	r2, r1
 800416c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 800416e:	bf00      	nop
 8004170:	3714      	adds	r7, #20
 8004172:	46bd      	mov	sp, r7
 8004174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004178:	4770      	bx	lr
 800417a:	bf00      	nop
 800417c:	03ff63ff 	.word	0x03ff63ff

08004180 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004180:	b480      	push	{r7}
 8004182:	b083      	sub	sp, #12
 8004184:	af00      	add	r7, sp, #0
 8004186:	6078      	str	r0, [r7, #4]
 8004188:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004190:	b2db      	uxtb	r3, r3
 8004192:	2b20      	cmp	r3, #32
 8004194:	d138      	bne.n	8004208 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800419c:	2b01      	cmp	r3, #1
 800419e:	d101      	bne.n	80041a4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80041a0:	2302      	movs	r3, #2
 80041a2:	e032      	b.n	800420a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	2201      	movs	r2, #1
 80041a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	2224      	movs	r2, #36	; 0x24
 80041b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	681a      	ldr	r2, [r3, #0]
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	f022 0201 	bic.w	r2, r2, #1
 80041c2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	681a      	ldr	r2, [r3, #0]
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80041d2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	6819      	ldr	r1, [r3, #0]
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	683a      	ldr	r2, [r7, #0]
 80041e0:	430a      	orrs	r2, r1
 80041e2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	681a      	ldr	r2, [r3, #0]
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	f042 0201 	orr.w	r2, r2, #1
 80041f2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	2220      	movs	r2, #32
 80041f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	2200      	movs	r2, #0
 8004200:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004204:	2300      	movs	r3, #0
 8004206:	e000      	b.n	800420a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004208:	2302      	movs	r3, #2
  }
}
 800420a:	4618      	mov	r0, r3
 800420c:	370c      	adds	r7, #12
 800420e:	46bd      	mov	sp, r7
 8004210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004214:	4770      	bx	lr

08004216 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004216:	b480      	push	{r7}
 8004218:	b085      	sub	sp, #20
 800421a:	af00      	add	r7, sp, #0
 800421c:	6078      	str	r0, [r7, #4]
 800421e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004226:	b2db      	uxtb	r3, r3
 8004228:	2b20      	cmp	r3, #32
 800422a:	d139      	bne.n	80042a0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004232:	2b01      	cmp	r3, #1
 8004234:	d101      	bne.n	800423a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004236:	2302      	movs	r3, #2
 8004238:	e033      	b.n	80042a2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	2201      	movs	r2, #1
 800423e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	2224      	movs	r2, #36	; 0x24
 8004246:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	681a      	ldr	r2, [r3, #0]
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	f022 0201 	bic.w	r2, r2, #1
 8004258:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004268:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800426a:	683b      	ldr	r3, [r7, #0]
 800426c:	021b      	lsls	r3, r3, #8
 800426e:	68fa      	ldr	r2, [r7, #12]
 8004270:	4313      	orrs	r3, r2
 8004272:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	68fa      	ldr	r2, [r7, #12]
 800427a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	681a      	ldr	r2, [r3, #0]
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	f042 0201 	orr.w	r2, r2, #1
 800428a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	2220      	movs	r2, #32
 8004290:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	2200      	movs	r2, #0
 8004298:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800429c:	2300      	movs	r3, #0
 800429e:	e000      	b.n	80042a2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80042a0:	2302      	movs	r3, #2
  }
}
 80042a2:	4618      	mov	r0, r3
 80042a4:	3714      	adds	r7, #20
 80042a6:	46bd      	mov	sp, r7
 80042a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ac:	4770      	bx	lr
	...

080042b0 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80042b0:	b480      	push	{r7}
 80042b2:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80042b4:	4b05      	ldr	r3, [pc, #20]	; (80042cc <HAL_PWR_EnableBkUpAccess+0x1c>)
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	4a04      	ldr	r2, [pc, #16]	; (80042cc <HAL_PWR_EnableBkUpAccess+0x1c>)
 80042ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80042be:	6013      	str	r3, [r2, #0]
}
 80042c0:	bf00      	nop
 80042c2:	46bd      	mov	sp, r7
 80042c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c8:	4770      	bx	lr
 80042ca:	bf00      	nop
 80042cc:	40007000 	.word	0x40007000

080042d0 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80042d0:	b580      	push	{r7, lr}
 80042d2:	b082      	sub	sp, #8
 80042d4:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80042d6:	2300      	movs	r3, #0
 80042d8:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80042da:	4b23      	ldr	r3, [pc, #140]	; (8004368 <HAL_PWREx_EnableOverDrive+0x98>)
 80042dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042de:	4a22      	ldr	r2, [pc, #136]	; (8004368 <HAL_PWREx_EnableOverDrive+0x98>)
 80042e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80042e4:	6413      	str	r3, [r2, #64]	; 0x40
 80042e6:	4b20      	ldr	r3, [pc, #128]	; (8004368 <HAL_PWREx_EnableOverDrive+0x98>)
 80042e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80042ee:	603b      	str	r3, [r7, #0]
 80042f0:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80042f2:	4b1e      	ldr	r3, [pc, #120]	; (800436c <HAL_PWREx_EnableOverDrive+0x9c>)
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	4a1d      	ldr	r2, [pc, #116]	; (800436c <HAL_PWREx_EnableOverDrive+0x9c>)
 80042f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80042fc:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80042fe:	f7fe fd3d 	bl	8002d7c <HAL_GetTick>
 8004302:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004304:	e009      	b.n	800431a <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004306:	f7fe fd39 	bl	8002d7c <HAL_GetTick>
 800430a:	4602      	mov	r2, r0
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	1ad3      	subs	r3, r2, r3
 8004310:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004314:	d901      	bls.n	800431a <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8004316:	2303      	movs	r3, #3
 8004318:	e022      	b.n	8004360 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800431a:	4b14      	ldr	r3, [pc, #80]	; (800436c <HAL_PWREx_EnableOverDrive+0x9c>)
 800431c:	685b      	ldr	r3, [r3, #4]
 800431e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004322:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004326:	d1ee      	bne.n	8004306 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8004328:	4b10      	ldr	r3, [pc, #64]	; (800436c <HAL_PWREx_EnableOverDrive+0x9c>)
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	4a0f      	ldr	r2, [pc, #60]	; (800436c <HAL_PWREx_EnableOverDrive+0x9c>)
 800432e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004332:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004334:	f7fe fd22 	bl	8002d7c <HAL_GetTick>
 8004338:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800433a:	e009      	b.n	8004350 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800433c:	f7fe fd1e 	bl	8002d7c <HAL_GetTick>
 8004340:	4602      	mov	r2, r0
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	1ad3      	subs	r3, r2, r3
 8004346:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800434a:	d901      	bls.n	8004350 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 800434c:	2303      	movs	r3, #3
 800434e:	e007      	b.n	8004360 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004350:	4b06      	ldr	r3, [pc, #24]	; (800436c <HAL_PWREx_EnableOverDrive+0x9c>)
 8004352:	685b      	ldr	r3, [r3, #4]
 8004354:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004358:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800435c:	d1ee      	bne.n	800433c <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800435e:	2300      	movs	r3, #0
}
 8004360:	4618      	mov	r0, r3
 8004362:	3708      	adds	r7, #8
 8004364:	46bd      	mov	sp, r7
 8004366:	bd80      	pop	{r7, pc}
 8004368:	40023800 	.word	0x40023800
 800436c:	40007000 	.word	0x40007000

08004370 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004370:	b580      	push	{r7, lr}
 8004372:	b086      	sub	sp, #24
 8004374:	af00      	add	r7, sp, #0
 8004376:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8004378:	2300      	movs	r3, #0
 800437a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	2b00      	cmp	r3, #0
 8004380:	d101      	bne.n	8004386 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8004382:	2301      	movs	r3, #1
 8004384:	e29b      	b.n	80048be <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	f003 0301 	and.w	r3, r3, #1
 800438e:	2b00      	cmp	r3, #0
 8004390:	f000 8087 	beq.w	80044a2 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004394:	4b96      	ldr	r3, [pc, #600]	; (80045f0 <HAL_RCC_OscConfig+0x280>)
 8004396:	689b      	ldr	r3, [r3, #8]
 8004398:	f003 030c 	and.w	r3, r3, #12
 800439c:	2b04      	cmp	r3, #4
 800439e:	d00c      	beq.n	80043ba <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80043a0:	4b93      	ldr	r3, [pc, #588]	; (80045f0 <HAL_RCC_OscConfig+0x280>)
 80043a2:	689b      	ldr	r3, [r3, #8]
 80043a4:	f003 030c 	and.w	r3, r3, #12
 80043a8:	2b08      	cmp	r3, #8
 80043aa:	d112      	bne.n	80043d2 <HAL_RCC_OscConfig+0x62>
 80043ac:	4b90      	ldr	r3, [pc, #576]	; (80045f0 <HAL_RCC_OscConfig+0x280>)
 80043ae:	685b      	ldr	r3, [r3, #4]
 80043b0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80043b4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80043b8:	d10b      	bne.n	80043d2 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80043ba:	4b8d      	ldr	r3, [pc, #564]	; (80045f0 <HAL_RCC_OscConfig+0x280>)
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d06c      	beq.n	80044a0 <HAL_RCC_OscConfig+0x130>
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	685b      	ldr	r3, [r3, #4]
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d168      	bne.n	80044a0 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80043ce:	2301      	movs	r3, #1
 80043d0:	e275      	b.n	80048be <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	685b      	ldr	r3, [r3, #4]
 80043d6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80043da:	d106      	bne.n	80043ea <HAL_RCC_OscConfig+0x7a>
 80043dc:	4b84      	ldr	r3, [pc, #528]	; (80045f0 <HAL_RCC_OscConfig+0x280>)
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	4a83      	ldr	r2, [pc, #524]	; (80045f0 <HAL_RCC_OscConfig+0x280>)
 80043e2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80043e6:	6013      	str	r3, [r2, #0]
 80043e8:	e02e      	b.n	8004448 <HAL_RCC_OscConfig+0xd8>
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	685b      	ldr	r3, [r3, #4]
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d10c      	bne.n	800440c <HAL_RCC_OscConfig+0x9c>
 80043f2:	4b7f      	ldr	r3, [pc, #508]	; (80045f0 <HAL_RCC_OscConfig+0x280>)
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	4a7e      	ldr	r2, [pc, #504]	; (80045f0 <HAL_RCC_OscConfig+0x280>)
 80043f8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80043fc:	6013      	str	r3, [r2, #0]
 80043fe:	4b7c      	ldr	r3, [pc, #496]	; (80045f0 <HAL_RCC_OscConfig+0x280>)
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	4a7b      	ldr	r2, [pc, #492]	; (80045f0 <HAL_RCC_OscConfig+0x280>)
 8004404:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004408:	6013      	str	r3, [r2, #0]
 800440a:	e01d      	b.n	8004448 <HAL_RCC_OscConfig+0xd8>
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	685b      	ldr	r3, [r3, #4]
 8004410:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004414:	d10c      	bne.n	8004430 <HAL_RCC_OscConfig+0xc0>
 8004416:	4b76      	ldr	r3, [pc, #472]	; (80045f0 <HAL_RCC_OscConfig+0x280>)
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	4a75      	ldr	r2, [pc, #468]	; (80045f0 <HAL_RCC_OscConfig+0x280>)
 800441c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004420:	6013      	str	r3, [r2, #0]
 8004422:	4b73      	ldr	r3, [pc, #460]	; (80045f0 <HAL_RCC_OscConfig+0x280>)
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	4a72      	ldr	r2, [pc, #456]	; (80045f0 <HAL_RCC_OscConfig+0x280>)
 8004428:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800442c:	6013      	str	r3, [r2, #0]
 800442e:	e00b      	b.n	8004448 <HAL_RCC_OscConfig+0xd8>
 8004430:	4b6f      	ldr	r3, [pc, #444]	; (80045f0 <HAL_RCC_OscConfig+0x280>)
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	4a6e      	ldr	r2, [pc, #440]	; (80045f0 <HAL_RCC_OscConfig+0x280>)
 8004436:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800443a:	6013      	str	r3, [r2, #0]
 800443c:	4b6c      	ldr	r3, [pc, #432]	; (80045f0 <HAL_RCC_OscConfig+0x280>)
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	4a6b      	ldr	r2, [pc, #428]	; (80045f0 <HAL_RCC_OscConfig+0x280>)
 8004442:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004446:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	685b      	ldr	r3, [r3, #4]
 800444c:	2b00      	cmp	r3, #0
 800444e:	d013      	beq.n	8004478 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004450:	f7fe fc94 	bl	8002d7c <HAL_GetTick>
 8004454:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004456:	e008      	b.n	800446a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004458:	f7fe fc90 	bl	8002d7c <HAL_GetTick>
 800445c:	4602      	mov	r2, r0
 800445e:	693b      	ldr	r3, [r7, #16]
 8004460:	1ad3      	subs	r3, r2, r3
 8004462:	2b64      	cmp	r3, #100	; 0x64
 8004464:	d901      	bls.n	800446a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004466:	2303      	movs	r3, #3
 8004468:	e229      	b.n	80048be <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800446a:	4b61      	ldr	r3, [pc, #388]	; (80045f0 <HAL_RCC_OscConfig+0x280>)
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004472:	2b00      	cmp	r3, #0
 8004474:	d0f0      	beq.n	8004458 <HAL_RCC_OscConfig+0xe8>
 8004476:	e014      	b.n	80044a2 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004478:	f7fe fc80 	bl	8002d7c <HAL_GetTick>
 800447c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800447e:	e008      	b.n	8004492 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004480:	f7fe fc7c 	bl	8002d7c <HAL_GetTick>
 8004484:	4602      	mov	r2, r0
 8004486:	693b      	ldr	r3, [r7, #16]
 8004488:	1ad3      	subs	r3, r2, r3
 800448a:	2b64      	cmp	r3, #100	; 0x64
 800448c:	d901      	bls.n	8004492 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800448e:	2303      	movs	r3, #3
 8004490:	e215      	b.n	80048be <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004492:	4b57      	ldr	r3, [pc, #348]	; (80045f0 <HAL_RCC_OscConfig+0x280>)
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800449a:	2b00      	cmp	r3, #0
 800449c:	d1f0      	bne.n	8004480 <HAL_RCC_OscConfig+0x110>
 800449e:	e000      	b.n	80044a2 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80044a0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	f003 0302 	and.w	r3, r3, #2
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d069      	beq.n	8004582 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80044ae:	4b50      	ldr	r3, [pc, #320]	; (80045f0 <HAL_RCC_OscConfig+0x280>)
 80044b0:	689b      	ldr	r3, [r3, #8]
 80044b2:	f003 030c 	and.w	r3, r3, #12
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d00b      	beq.n	80044d2 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80044ba:	4b4d      	ldr	r3, [pc, #308]	; (80045f0 <HAL_RCC_OscConfig+0x280>)
 80044bc:	689b      	ldr	r3, [r3, #8]
 80044be:	f003 030c 	and.w	r3, r3, #12
 80044c2:	2b08      	cmp	r3, #8
 80044c4:	d11c      	bne.n	8004500 <HAL_RCC_OscConfig+0x190>
 80044c6:	4b4a      	ldr	r3, [pc, #296]	; (80045f0 <HAL_RCC_OscConfig+0x280>)
 80044c8:	685b      	ldr	r3, [r3, #4]
 80044ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d116      	bne.n	8004500 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80044d2:	4b47      	ldr	r3, [pc, #284]	; (80045f0 <HAL_RCC_OscConfig+0x280>)
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	f003 0302 	and.w	r3, r3, #2
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d005      	beq.n	80044ea <HAL_RCC_OscConfig+0x17a>
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	68db      	ldr	r3, [r3, #12]
 80044e2:	2b01      	cmp	r3, #1
 80044e4:	d001      	beq.n	80044ea <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80044e6:	2301      	movs	r3, #1
 80044e8:	e1e9      	b.n	80048be <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80044ea:	4b41      	ldr	r3, [pc, #260]	; (80045f0 <HAL_RCC_OscConfig+0x280>)
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	691b      	ldr	r3, [r3, #16]
 80044f6:	00db      	lsls	r3, r3, #3
 80044f8:	493d      	ldr	r1, [pc, #244]	; (80045f0 <HAL_RCC_OscConfig+0x280>)
 80044fa:	4313      	orrs	r3, r2
 80044fc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80044fe:	e040      	b.n	8004582 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	68db      	ldr	r3, [r3, #12]
 8004504:	2b00      	cmp	r3, #0
 8004506:	d023      	beq.n	8004550 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004508:	4b39      	ldr	r3, [pc, #228]	; (80045f0 <HAL_RCC_OscConfig+0x280>)
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	4a38      	ldr	r2, [pc, #224]	; (80045f0 <HAL_RCC_OscConfig+0x280>)
 800450e:	f043 0301 	orr.w	r3, r3, #1
 8004512:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004514:	f7fe fc32 	bl	8002d7c <HAL_GetTick>
 8004518:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800451a:	e008      	b.n	800452e <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800451c:	f7fe fc2e 	bl	8002d7c <HAL_GetTick>
 8004520:	4602      	mov	r2, r0
 8004522:	693b      	ldr	r3, [r7, #16]
 8004524:	1ad3      	subs	r3, r2, r3
 8004526:	2b02      	cmp	r3, #2
 8004528:	d901      	bls.n	800452e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800452a:	2303      	movs	r3, #3
 800452c:	e1c7      	b.n	80048be <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800452e:	4b30      	ldr	r3, [pc, #192]	; (80045f0 <HAL_RCC_OscConfig+0x280>)
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	f003 0302 	and.w	r3, r3, #2
 8004536:	2b00      	cmp	r3, #0
 8004538:	d0f0      	beq.n	800451c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800453a:	4b2d      	ldr	r3, [pc, #180]	; (80045f0 <HAL_RCC_OscConfig+0x280>)
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	691b      	ldr	r3, [r3, #16]
 8004546:	00db      	lsls	r3, r3, #3
 8004548:	4929      	ldr	r1, [pc, #164]	; (80045f0 <HAL_RCC_OscConfig+0x280>)
 800454a:	4313      	orrs	r3, r2
 800454c:	600b      	str	r3, [r1, #0]
 800454e:	e018      	b.n	8004582 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004550:	4b27      	ldr	r3, [pc, #156]	; (80045f0 <HAL_RCC_OscConfig+0x280>)
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	4a26      	ldr	r2, [pc, #152]	; (80045f0 <HAL_RCC_OscConfig+0x280>)
 8004556:	f023 0301 	bic.w	r3, r3, #1
 800455a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800455c:	f7fe fc0e 	bl	8002d7c <HAL_GetTick>
 8004560:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004562:	e008      	b.n	8004576 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004564:	f7fe fc0a 	bl	8002d7c <HAL_GetTick>
 8004568:	4602      	mov	r2, r0
 800456a:	693b      	ldr	r3, [r7, #16]
 800456c:	1ad3      	subs	r3, r2, r3
 800456e:	2b02      	cmp	r3, #2
 8004570:	d901      	bls.n	8004576 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8004572:	2303      	movs	r3, #3
 8004574:	e1a3      	b.n	80048be <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004576:	4b1e      	ldr	r3, [pc, #120]	; (80045f0 <HAL_RCC_OscConfig+0x280>)
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	f003 0302 	and.w	r3, r3, #2
 800457e:	2b00      	cmp	r3, #0
 8004580:	d1f0      	bne.n	8004564 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	f003 0308 	and.w	r3, r3, #8
 800458a:	2b00      	cmp	r3, #0
 800458c:	d038      	beq.n	8004600 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	695b      	ldr	r3, [r3, #20]
 8004592:	2b00      	cmp	r3, #0
 8004594:	d019      	beq.n	80045ca <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004596:	4b16      	ldr	r3, [pc, #88]	; (80045f0 <HAL_RCC_OscConfig+0x280>)
 8004598:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800459a:	4a15      	ldr	r2, [pc, #84]	; (80045f0 <HAL_RCC_OscConfig+0x280>)
 800459c:	f043 0301 	orr.w	r3, r3, #1
 80045a0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045a2:	f7fe fbeb 	bl	8002d7c <HAL_GetTick>
 80045a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80045a8:	e008      	b.n	80045bc <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80045aa:	f7fe fbe7 	bl	8002d7c <HAL_GetTick>
 80045ae:	4602      	mov	r2, r0
 80045b0:	693b      	ldr	r3, [r7, #16]
 80045b2:	1ad3      	subs	r3, r2, r3
 80045b4:	2b02      	cmp	r3, #2
 80045b6:	d901      	bls.n	80045bc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80045b8:	2303      	movs	r3, #3
 80045ba:	e180      	b.n	80048be <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80045bc:	4b0c      	ldr	r3, [pc, #48]	; (80045f0 <HAL_RCC_OscConfig+0x280>)
 80045be:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80045c0:	f003 0302 	and.w	r3, r3, #2
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d0f0      	beq.n	80045aa <HAL_RCC_OscConfig+0x23a>
 80045c8:	e01a      	b.n	8004600 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80045ca:	4b09      	ldr	r3, [pc, #36]	; (80045f0 <HAL_RCC_OscConfig+0x280>)
 80045cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80045ce:	4a08      	ldr	r2, [pc, #32]	; (80045f0 <HAL_RCC_OscConfig+0x280>)
 80045d0:	f023 0301 	bic.w	r3, r3, #1
 80045d4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045d6:	f7fe fbd1 	bl	8002d7c <HAL_GetTick>
 80045da:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80045dc:	e00a      	b.n	80045f4 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80045de:	f7fe fbcd 	bl	8002d7c <HAL_GetTick>
 80045e2:	4602      	mov	r2, r0
 80045e4:	693b      	ldr	r3, [r7, #16]
 80045e6:	1ad3      	subs	r3, r2, r3
 80045e8:	2b02      	cmp	r3, #2
 80045ea:	d903      	bls.n	80045f4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80045ec:	2303      	movs	r3, #3
 80045ee:	e166      	b.n	80048be <HAL_RCC_OscConfig+0x54e>
 80045f0:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80045f4:	4b92      	ldr	r3, [pc, #584]	; (8004840 <HAL_RCC_OscConfig+0x4d0>)
 80045f6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80045f8:	f003 0302 	and.w	r3, r3, #2
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d1ee      	bne.n	80045de <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	f003 0304 	and.w	r3, r3, #4
 8004608:	2b00      	cmp	r3, #0
 800460a:	f000 80a4 	beq.w	8004756 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800460e:	4b8c      	ldr	r3, [pc, #560]	; (8004840 <HAL_RCC_OscConfig+0x4d0>)
 8004610:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004612:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004616:	2b00      	cmp	r3, #0
 8004618:	d10d      	bne.n	8004636 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800461a:	4b89      	ldr	r3, [pc, #548]	; (8004840 <HAL_RCC_OscConfig+0x4d0>)
 800461c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800461e:	4a88      	ldr	r2, [pc, #544]	; (8004840 <HAL_RCC_OscConfig+0x4d0>)
 8004620:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004624:	6413      	str	r3, [r2, #64]	; 0x40
 8004626:	4b86      	ldr	r3, [pc, #536]	; (8004840 <HAL_RCC_OscConfig+0x4d0>)
 8004628:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800462a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800462e:	60bb      	str	r3, [r7, #8]
 8004630:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004632:	2301      	movs	r3, #1
 8004634:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004636:	4b83      	ldr	r3, [pc, #524]	; (8004844 <HAL_RCC_OscConfig+0x4d4>)
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800463e:	2b00      	cmp	r3, #0
 8004640:	d118      	bne.n	8004674 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8004642:	4b80      	ldr	r3, [pc, #512]	; (8004844 <HAL_RCC_OscConfig+0x4d4>)
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	4a7f      	ldr	r2, [pc, #508]	; (8004844 <HAL_RCC_OscConfig+0x4d4>)
 8004648:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800464c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800464e:	f7fe fb95 	bl	8002d7c <HAL_GetTick>
 8004652:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004654:	e008      	b.n	8004668 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004656:	f7fe fb91 	bl	8002d7c <HAL_GetTick>
 800465a:	4602      	mov	r2, r0
 800465c:	693b      	ldr	r3, [r7, #16]
 800465e:	1ad3      	subs	r3, r2, r3
 8004660:	2b64      	cmp	r3, #100	; 0x64
 8004662:	d901      	bls.n	8004668 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8004664:	2303      	movs	r3, #3
 8004666:	e12a      	b.n	80048be <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004668:	4b76      	ldr	r3, [pc, #472]	; (8004844 <HAL_RCC_OscConfig+0x4d4>)
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004670:	2b00      	cmp	r3, #0
 8004672:	d0f0      	beq.n	8004656 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	689b      	ldr	r3, [r3, #8]
 8004678:	2b01      	cmp	r3, #1
 800467a:	d106      	bne.n	800468a <HAL_RCC_OscConfig+0x31a>
 800467c:	4b70      	ldr	r3, [pc, #448]	; (8004840 <HAL_RCC_OscConfig+0x4d0>)
 800467e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004680:	4a6f      	ldr	r2, [pc, #444]	; (8004840 <HAL_RCC_OscConfig+0x4d0>)
 8004682:	f043 0301 	orr.w	r3, r3, #1
 8004686:	6713      	str	r3, [r2, #112]	; 0x70
 8004688:	e02d      	b.n	80046e6 <HAL_RCC_OscConfig+0x376>
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	689b      	ldr	r3, [r3, #8]
 800468e:	2b00      	cmp	r3, #0
 8004690:	d10c      	bne.n	80046ac <HAL_RCC_OscConfig+0x33c>
 8004692:	4b6b      	ldr	r3, [pc, #428]	; (8004840 <HAL_RCC_OscConfig+0x4d0>)
 8004694:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004696:	4a6a      	ldr	r2, [pc, #424]	; (8004840 <HAL_RCC_OscConfig+0x4d0>)
 8004698:	f023 0301 	bic.w	r3, r3, #1
 800469c:	6713      	str	r3, [r2, #112]	; 0x70
 800469e:	4b68      	ldr	r3, [pc, #416]	; (8004840 <HAL_RCC_OscConfig+0x4d0>)
 80046a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046a2:	4a67      	ldr	r2, [pc, #412]	; (8004840 <HAL_RCC_OscConfig+0x4d0>)
 80046a4:	f023 0304 	bic.w	r3, r3, #4
 80046a8:	6713      	str	r3, [r2, #112]	; 0x70
 80046aa:	e01c      	b.n	80046e6 <HAL_RCC_OscConfig+0x376>
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	689b      	ldr	r3, [r3, #8]
 80046b0:	2b05      	cmp	r3, #5
 80046b2:	d10c      	bne.n	80046ce <HAL_RCC_OscConfig+0x35e>
 80046b4:	4b62      	ldr	r3, [pc, #392]	; (8004840 <HAL_RCC_OscConfig+0x4d0>)
 80046b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046b8:	4a61      	ldr	r2, [pc, #388]	; (8004840 <HAL_RCC_OscConfig+0x4d0>)
 80046ba:	f043 0304 	orr.w	r3, r3, #4
 80046be:	6713      	str	r3, [r2, #112]	; 0x70
 80046c0:	4b5f      	ldr	r3, [pc, #380]	; (8004840 <HAL_RCC_OscConfig+0x4d0>)
 80046c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046c4:	4a5e      	ldr	r2, [pc, #376]	; (8004840 <HAL_RCC_OscConfig+0x4d0>)
 80046c6:	f043 0301 	orr.w	r3, r3, #1
 80046ca:	6713      	str	r3, [r2, #112]	; 0x70
 80046cc:	e00b      	b.n	80046e6 <HAL_RCC_OscConfig+0x376>
 80046ce:	4b5c      	ldr	r3, [pc, #368]	; (8004840 <HAL_RCC_OscConfig+0x4d0>)
 80046d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046d2:	4a5b      	ldr	r2, [pc, #364]	; (8004840 <HAL_RCC_OscConfig+0x4d0>)
 80046d4:	f023 0301 	bic.w	r3, r3, #1
 80046d8:	6713      	str	r3, [r2, #112]	; 0x70
 80046da:	4b59      	ldr	r3, [pc, #356]	; (8004840 <HAL_RCC_OscConfig+0x4d0>)
 80046dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046de:	4a58      	ldr	r2, [pc, #352]	; (8004840 <HAL_RCC_OscConfig+0x4d0>)
 80046e0:	f023 0304 	bic.w	r3, r3, #4
 80046e4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	689b      	ldr	r3, [r3, #8]
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d015      	beq.n	800471a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046ee:	f7fe fb45 	bl	8002d7c <HAL_GetTick>
 80046f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80046f4:	e00a      	b.n	800470c <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80046f6:	f7fe fb41 	bl	8002d7c <HAL_GetTick>
 80046fa:	4602      	mov	r2, r0
 80046fc:	693b      	ldr	r3, [r7, #16]
 80046fe:	1ad3      	subs	r3, r2, r3
 8004700:	f241 3288 	movw	r2, #5000	; 0x1388
 8004704:	4293      	cmp	r3, r2
 8004706:	d901      	bls.n	800470c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8004708:	2303      	movs	r3, #3
 800470a:	e0d8      	b.n	80048be <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800470c:	4b4c      	ldr	r3, [pc, #304]	; (8004840 <HAL_RCC_OscConfig+0x4d0>)
 800470e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004710:	f003 0302 	and.w	r3, r3, #2
 8004714:	2b00      	cmp	r3, #0
 8004716:	d0ee      	beq.n	80046f6 <HAL_RCC_OscConfig+0x386>
 8004718:	e014      	b.n	8004744 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800471a:	f7fe fb2f 	bl	8002d7c <HAL_GetTick>
 800471e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004720:	e00a      	b.n	8004738 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004722:	f7fe fb2b 	bl	8002d7c <HAL_GetTick>
 8004726:	4602      	mov	r2, r0
 8004728:	693b      	ldr	r3, [r7, #16]
 800472a:	1ad3      	subs	r3, r2, r3
 800472c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004730:	4293      	cmp	r3, r2
 8004732:	d901      	bls.n	8004738 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8004734:	2303      	movs	r3, #3
 8004736:	e0c2      	b.n	80048be <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004738:	4b41      	ldr	r3, [pc, #260]	; (8004840 <HAL_RCC_OscConfig+0x4d0>)
 800473a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800473c:	f003 0302 	and.w	r3, r3, #2
 8004740:	2b00      	cmp	r3, #0
 8004742:	d1ee      	bne.n	8004722 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004744:	7dfb      	ldrb	r3, [r7, #23]
 8004746:	2b01      	cmp	r3, #1
 8004748:	d105      	bne.n	8004756 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800474a:	4b3d      	ldr	r3, [pc, #244]	; (8004840 <HAL_RCC_OscConfig+0x4d0>)
 800474c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800474e:	4a3c      	ldr	r2, [pc, #240]	; (8004840 <HAL_RCC_OscConfig+0x4d0>)
 8004750:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004754:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	699b      	ldr	r3, [r3, #24]
 800475a:	2b00      	cmp	r3, #0
 800475c:	f000 80ae 	beq.w	80048bc <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004760:	4b37      	ldr	r3, [pc, #220]	; (8004840 <HAL_RCC_OscConfig+0x4d0>)
 8004762:	689b      	ldr	r3, [r3, #8]
 8004764:	f003 030c 	and.w	r3, r3, #12
 8004768:	2b08      	cmp	r3, #8
 800476a:	d06d      	beq.n	8004848 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	699b      	ldr	r3, [r3, #24]
 8004770:	2b02      	cmp	r3, #2
 8004772:	d14b      	bne.n	800480c <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004774:	4b32      	ldr	r3, [pc, #200]	; (8004840 <HAL_RCC_OscConfig+0x4d0>)
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	4a31      	ldr	r2, [pc, #196]	; (8004840 <HAL_RCC_OscConfig+0x4d0>)
 800477a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800477e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004780:	f7fe fafc 	bl	8002d7c <HAL_GetTick>
 8004784:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004786:	e008      	b.n	800479a <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004788:	f7fe faf8 	bl	8002d7c <HAL_GetTick>
 800478c:	4602      	mov	r2, r0
 800478e:	693b      	ldr	r3, [r7, #16]
 8004790:	1ad3      	subs	r3, r2, r3
 8004792:	2b02      	cmp	r3, #2
 8004794:	d901      	bls.n	800479a <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8004796:	2303      	movs	r3, #3
 8004798:	e091      	b.n	80048be <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800479a:	4b29      	ldr	r3, [pc, #164]	; (8004840 <HAL_RCC_OscConfig+0x4d0>)
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d1f0      	bne.n	8004788 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	69da      	ldr	r2, [r3, #28]
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	6a1b      	ldr	r3, [r3, #32]
 80047ae:	431a      	orrs	r2, r3
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047b4:	019b      	lsls	r3, r3, #6
 80047b6:	431a      	orrs	r2, r3
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047bc:	085b      	lsrs	r3, r3, #1
 80047be:	3b01      	subs	r3, #1
 80047c0:	041b      	lsls	r3, r3, #16
 80047c2:	431a      	orrs	r2, r3
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047c8:	061b      	lsls	r3, r3, #24
 80047ca:	431a      	orrs	r2, r3
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047d0:	071b      	lsls	r3, r3, #28
 80047d2:	491b      	ldr	r1, [pc, #108]	; (8004840 <HAL_RCC_OscConfig+0x4d0>)
 80047d4:	4313      	orrs	r3, r2
 80047d6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80047d8:	4b19      	ldr	r3, [pc, #100]	; (8004840 <HAL_RCC_OscConfig+0x4d0>)
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	4a18      	ldr	r2, [pc, #96]	; (8004840 <HAL_RCC_OscConfig+0x4d0>)
 80047de:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80047e2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047e4:	f7fe faca 	bl	8002d7c <HAL_GetTick>
 80047e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80047ea:	e008      	b.n	80047fe <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80047ec:	f7fe fac6 	bl	8002d7c <HAL_GetTick>
 80047f0:	4602      	mov	r2, r0
 80047f2:	693b      	ldr	r3, [r7, #16]
 80047f4:	1ad3      	subs	r3, r2, r3
 80047f6:	2b02      	cmp	r3, #2
 80047f8:	d901      	bls.n	80047fe <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 80047fa:	2303      	movs	r3, #3
 80047fc:	e05f      	b.n	80048be <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80047fe:	4b10      	ldr	r3, [pc, #64]	; (8004840 <HAL_RCC_OscConfig+0x4d0>)
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004806:	2b00      	cmp	r3, #0
 8004808:	d0f0      	beq.n	80047ec <HAL_RCC_OscConfig+0x47c>
 800480a:	e057      	b.n	80048bc <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800480c:	4b0c      	ldr	r3, [pc, #48]	; (8004840 <HAL_RCC_OscConfig+0x4d0>)
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	4a0b      	ldr	r2, [pc, #44]	; (8004840 <HAL_RCC_OscConfig+0x4d0>)
 8004812:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004816:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004818:	f7fe fab0 	bl	8002d7c <HAL_GetTick>
 800481c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800481e:	e008      	b.n	8004832 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004820:	f7fe faac 	bl	8002d7c <HAL_GetTick>
 8004824:	4602      	mov	r2, r0
 8004826:	693b      	ldr	r3, [r7, #16]
 8004828:	1ad3      	subs	r3, r2, r3
 800482a:	2b02      	cmp	r3, #2
 800482c:	d901      	bls.n	8004832 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 800482e:	2303      	movs	r3, #3
 8004830:	e045      	b.n	80048be <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004832:	4b03      	ldr	r3, [pc, #12]	; (8004840 <HAL_RCC_OscConfig+0x4d0>)
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800483a:	2b00      	cmp	r3, #0
 800483c:	d1f0      	bne.n	8004820 <HAL_RCC_OscConfig+0x4b0>
 800483e:	e03d      	b.n	80048bc <HAL_RCC_OscConfig+0x54c>
 8004840:	40023800 	.word	0x40023800
 8004844:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8004848:	4b1f      	ldr	r3, [pc, #124]	; (80048c8 <HAL_RCC_OscConfig+0x558>)
 800484a:	685b      	ldr	r3, [r3, #4]
 800484c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	699b      	ldr	r3, [r3, #24]
 8004852:	2b01      	cmp	r3, #1
 8004854:	d030      	beq.n	80048b8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004860:	429a      	cmp	r2, r3
 8004862:	d129      	bne.n	80048b8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800486e:	429a      	cmp	r2, r3
 8004870:	d122      	bne.n	80048b8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004872:	68fa      	ldr	r2, [r7, #12]
 8004874:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004878:	4013      	ands	r3, r2
 800487a:	687a      	ldr	r2, [r7, #4]
 800487c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800487e:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004880:	4293      	cmp	r3, r2
 8004882:	d119      	bne.n	80048b8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800488e:	085b      	lsrs	r3, r3, #1
 8004890:	3b01      	subs	r3, #1
 8004892:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004894:	429a      	cmp	r2, r3
 8004896:	d10f      	bne.n	80048b8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048a2:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80048a4:	429a      	cmp	r2, r3
 80048a6:	d107      	bne.n	80048b8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048b2:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80048b4:	429a      	cmp	r2, r3
 80048b6:	d001      	beq.n	80048bc <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 80048b8:	2301      	movs	r3, #1
 80048ba:	e000      	b.n	80048be <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 80048bc:	2300      	movs	r3, #0
}
 80048be:	4618      	mov	r0, r3
 80048c0:	3718      	adds	r7, #24
 80048c2:	46bd      	mov	sp, r7
 80048c4:	bd80      	pop	{r7, pc}
 80048c6:	bf00      	nop
 80048c8:	40023800 	.word	0x40023800

080048cc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80048cc:	b580      	push	{r7, lr}
 80048ce:	b084      	sub	sp, #16
 80048d0:	af00      	add	r7, sp, #0
 80048d2:	6078      	str	r0, [r7, #4]
 80048d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80048d6:	2300      	movs	r3, #0
 80048d8:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d101      	bne.n	80048e4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80048e0:	2301      	movs	r3, #1
 80048e2:	e0d0      	b.n	8004a86 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80048e4:	4b6a      	ldr	r3, [pc, #424]	; (8004a90 <HAL_RCC_ClockConfig+0x1c4>)
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	f003 030f 	and.w	r3, r3, #15
 80048ec:	683a      	ldr	r2, [r7, #0]
 80048ee:	429a      	cmp	r2, r3
 80048f0:	d910      	bls.n	8004914 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80048f2:	4b67      	ldr	r3, [pc, #412]	; (8004a90 <HAL_RCC_ClockConfig+0x1c4>)
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	f023 020f 	bic.w	r2, r3, #15
 80048fa:	4965      	ldr	r1, [pc, #404]	; (8004a90 <HAL_RCC_ClockConfig+0x1c4>)
 80048fc:	683b      	ldr	r3, [r7, #0]
 80048fe:	4313      	orrs	r3, r2
 8004900:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004902:	4b63      	ldr	r3, [pc, #396]	; (8004a90 <HAL_RCC_ClockConfig+0x1c4>)
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	f003 030f 	and.w	r3, r3, #15
 800490a:	683a      	ldr	r2, [r7, #0]
 800490c:	429a      	cmp	r2, r3
 800490e:	d001      	beq.n	8004914 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004910:	2301      	movs	r3, #1
 8004912:	e0b8      	b.n	8004a86 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	f003 0302 	and.w	r3, r3, #2
 800491c:	2b00      	cmp	r3, #0
 800491e:	d020      	beq.n	8004962 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	f003 0304 	and.w	r3, r3, #4
 8004928:	2b00      	cmp	r3, #0
 800492a:	d005      	beq.n	8004938 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800492c:	4b59      	ldr	r3, [pc, #356]	; (8004a94 <HAL_RCC_ClockConfig+0x1c8>)
 800492e:	689b      	ldr	r3, [r3, #8]
 8004930:	4a58      	ldr	r2, [pc, #352]	; (8004a94 <HAL_RCC_ClockConfig+0x1c8>)
 8004932:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004936:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	f003 0308 	and.w	r3, r3, #8
 8004940:	2b00      	cmp	r3, #0
 8004942:	d005      	beq.n	8004950 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004944:	4b53      	ldr	r3, [pc, #332]	; (8004a94 <HAL_RCC_ClockConfig+0x1c8>)
 8004946:	689b      	ldr	r3, [r3, #8]
 8004948:	4a52      	ldr	r2, [pc, #328]	; (8004a94 <HAL_RCC_ClockConfig+0x1c8>)
 800494a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800494e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004950:	4b50      	ldr	r3, [pc, #320]	; (8004a94 <HAL_RCC_ClockConfig+0x1c8>)
 8004952:	689b      	ldr	r3, [r3, #8]
 8004954:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	689b      	ldr	r3, [r3, #8]
 800495c:	494d      	ldr	r1, [pc, #308]	; (8004a94 <HAL_RCC_ClockConfig+0x1c8>)
 800495e:	4313      	orrs	r3, r2
 8004960:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	f003 0301 	and.w	r3, r3, #1
 800496a:	2b00      	cmp	r3, #0
 800496c:	d040      	beq.n	80049f0 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	685b      	ldr	r3, [r3, #4]
 8004972:	2b01      	cmp	r3, #1
 8004974:	d107      	bne.n	8004986 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004976:	4b47      	ldr	r3, [pc, #284]	; (8004a94 <HAL_RCC_ClockConfig+0x1c8>)
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800497e:	2b00      	cmp	r3, #0
 8004980:	d115      	bne.n	80049ae <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004982:	2301      	movs	r3, #1
 8004984:	e07f      	b.n	8004a86 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	685b      	ldr	r3, [r3, #4]
 800498a:	2b02      	cmp	r3, #2
 800498c:	d107      	bne.n	800499e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800498e:	4b41      	ldr	r3, [pc, #260]	; (8004a94 <HAL_RCC_ClockConfig+0x1c8>)
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004996:	2b00      	cmp	r3, #0
 8004998:	d109      	bne.n	80049ae <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800499a:	2301      	movs	r3, #1
 800499c:	e073      	b.n	8004a86 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800499e:	4b3d      	ldr	r3, [pc, #244]	; (8004a94 <HAL_RCC_ClockConfig+0x1c8>)
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	f003 0302 	and.w	r3, r3, #2
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d101      	bne.n	80049ae <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80049aa:	2301      	movs	r3, #1
 80049ac:	e06b      	b.n	8004a86 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80049ae:	4b39      	ldr	r3, [pc, #228]	; (8004a94 <HAL_RCC_ClockConfig+0x1c8>)
 80049b0:	689b      	ldr	r3, [r3, #8]
 80049b2:	f023 0203 	bic.w	r2, r3, #3
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	685b      	ldr	r3, [r3, #4]
 80049ba:	4936      	ldr	r1, [pc, #216]	; (8004a94 <HAL_RCC_ClockConfig+0x1c8>)
 80049bc:	4313      	orrs	r3, r2
 80049be:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80049c0:	f7fe f9dc 	bl	8002d7c <HAL_GetTick>
 80049c4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80049c6:	e00a      	b.n	80049de <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80049c8:	f7fe f9d8 	bl	8002d7c <HAL_GetTick>
 80049cc:	4602      	mov	r2, r0
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	1ad3      	subs	r3, r2, r3
 80049d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80049d6:	4293      	cmp	r3, r2
 80049d8:	d901      	bls.n	80049de <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80049da:	2303      	movs	r3, #3
 80049dc:	e053      	b.n	8004a86 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80049de:	4b2d      	ldr	r3, [pc, #180]	; (8004a94 <HAL_RCC_ClockConfig+0x1c8>)
 80049e0:	689b      	ldr	r3, [r3, #8]
 80049e2:	f003 020c 	and.w	r2, r3, #12
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	685b      	ldr	r3, [r3, #4]
 80049ea:	009b      	lsls	r3, r3, #2
 80049ec:	429a      	cmp	r2, r3
 80049ee:	d1eb      	bne.n	80049c8 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80049f0:	4b27      	ldr	r3, [pc, #156]	; (8004a90 <HAL_RCC_ClockConfig+0x1c4>)
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	f003 030f 	and.w	r3, r3, #15
 80049f8:	683a      	ldr	r2, [r7, #0]
 80049fa:	429a      	cmp	r2, r3
 80049fc:	d210      	bcs.n	8004a20 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80049fe:	4b24      	ldr	r3, [pc, #144]	; (8004a90 <HAL_RCC_ClockConfig+0x1c4>)
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	f023 020f 	bic.w	r2, r3, #15
 8004a06:	4922      	ldr	r1, [pc, #136]	; (8004a90 <HAL_RCC_ClockConfig+0x1c4>)
 8004a08:	683b      	ldr	r3, [r7, #0]
 8004a0a:	4313      	orrs	r3, r2
 8004a0c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a0e:	4b20      	ldr	r3, [pc, #128]	; (8004a90 <HAL_RCC_ClockConfig+0x1c4>)
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	f003 030f 	and.w	r3, r3, #15
 8004a16:	683a      	ldr	r2, [r7, #0]
 8004a18:	429a      	cmp	r2, r3
 8004a1a:	d001      	beq.n	8004a20 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8004a1c:	2301      	movs	r3, #1
 8004a1e:	e032      	b.n	8004a86 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	f003 0304 	and.w	r3, r3, #4
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d008      	beq.n	8004a3e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004a2c:	4b19      	ldr	r3, [pc, #100]	; (8004a94 <HAL_RCC_ClockConfig+0x1c8>)
 8004a2e:	689b      	ldr	r3, [r3, #8]
 8004a30:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	68db      	ldr	r3, [r3, #12]
 8004a38:	4916      	ldr	r1, [pc, #88]	; (8004a94 <HAL_RCC_ClockConfig+0x1c8>)
 8004a3a:	4313      	orrs	r3, r2
 8004a3c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	f003 0308 	and.w	r3, r3, #8
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d009      	beq.n	8004a5e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004a4a:	4b12      	ldr	r3, [pc, #72]	; (8004a94 <HAL_RCC_ClockConfig+0x1c8>)
 8004a4c:	689b      	ldr	r3, [r3, #8]
 8004a4e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	691b      	ldr	r3, [r3, #16]
 8004a56:	00db      	lsls	r3, r3, #3
 8004a58:	490e      	ldr	r1, [pc, #56]	; (8004a94 <HAL_RCC_ClockConfig+0x1c8>)
 8004a5a:	4313      	orrs	r3, r2
 8004a5c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004a5e:	f000 f821 	bl	8004aa4 <HAL_RCC_GetSysClockFreq>
 8004a62:	4602      	mov	r2, r0
 8004a64:	4b0b      	ldr	r3, [pc, #44]	; (8004a94 <HAL_RCC_ClockConfig+0x1c8>)
 8004a66:	689b      	ldr	r3, [r3, #8]
 8004a68:	091b      	lsrs	r3, r3, #4
 8004a6a:	f003 030f 	and.w	r3, r3, #15
 8004a6e:	490a      	ldr	r1, [pc, #40]	; (8004a98 <HAL_RCC_ClockConfig+0x1cc>)
 8004a70:	5ccb      	ldrb	r3, [r1, r3]
 8004a72:	fa22 f303 	lsr.w	r3, r2, r3
 8004a76:	4a09      	ldr	r2, [pc, #36]	; (8004a9c <HAL_RCC_ClockConfig+0x1d0>)
 8004a78:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004a7a:	4b09      	ldr	r3, [pc, #36]	; (8004aa0 <HAL_RCC_ClockConfig+0x1d4>)
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	4618      	mov	r0, r3
 8004a80:	f7fe f938 	bl	8002cf4 <HAL_InitTick>

  return HAL_OK;
 8004a84:	2300      	movs	r3, #0
}
 8004a86:	4618      	mov	r0, r3
 8004a88:	3710      	adds	r7, #16
 8004a8a:	46bd      	mov	sp, r7
 8004a8c:	bd80      	pop	{r7, pc}
 8004a8e:	bf00      	nop
 8004a90:	40023c00 	.word	0x40023c00
 8004a94:	40023800 	.word	0x40023800
 8004a98:	0802f8bc 	.word	0x0802f8bc
 8004a9c:	2000001c 	.word	0x2000001c
 8004aa0:	20000024 	.word	0x20000024

08004aa4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004aa4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004aa8:	b094      	sub	sp, #80	; 0x50
 8004aaa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8004aac:	2300      	movs	r3, #0
 8004aae:	647b      	str	r3, [r7, #68]	; 0x44
 8004ab0:	2300      	movs	r3, #0
 8004ab2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004ab4:	2300      	movs	r3, #0
 8004ab6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8004ab8:	2300      	movs	r3, #0
 8004aba:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004abc:	4b79      	ldr	r3, [pc, #484]	; (8004ca4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004abe:	689b      	ldr	r3, [r3, #8]
 8004ac0:	f003 030c 	and.w	r3, r3, #12
 8004ac4:	2b08      	cmp	r3, #8
 8004ac6:	d00d      	beq.n	8004ae4 <HAL_RCC_GetSysClockFreq+0x40>
 8004ac8:	2b08      	cmp	r3, #8
 8004aca:	f200 80e1 	bhi.w	8004c90 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d002      	beq.n	8004ad8 <HAL_RCC_GetSysClockFreq+0x34>
 8004ad2:	2b04      	cmp	r3, #4
 8004ad4:	d003      	beq.n	8004ade <HAL_RCC_GetSysClockFreq+0x3a>
 8004ad6:	e0db      	b.n	8004c90 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004ad8:	4b73      	ldr	r3, [pc, #460]	; (8004ca8 <HAL_RCC_GetSysClockFreq+0x204>)
 8004ada:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004adc:	e0db      	b.n	8004c96 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004ade:	4b73      	ldr	r3, [pc, #460]	; (8004cac <HAL_RCC_GetSysClockFreq+0x208>)
 8004ae0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004ae2:	e0d8      	b.n	8004c96 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004ae4:	4b6f      	ldr	r3, [pc, #444]	; (8004ca4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004ae6:	685b      	ldr	r3, [r3, #4]
 8004ae8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004aec:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8004aee:	4b6d      	ldr	r3, [pc, #436]	; (8004ca4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004af0:	685b      	ldr	r3, [r3, #4]
 8004af2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d063      	beq.n	8004bc2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004afa:	4b6a      	ldr	r3, [pc, #424]	; (8004ca4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004afc:	685b      	ldr	r3, [r3, #4]
 8004afe:	099b      	lsrs	r3, r3, #6
 8004b00:	2200      	movs	r2, #0
 8004b02:	63bb      	str	r3, [r7, #56]	; 0x38
 8004b04:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004b06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b08:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b0c:	633b      	str	r3, [r7, #48]	; 0x30
 8004b0e:	2300      	movs	r3, #0
 8004b10:	637b      	str	r3, [r7, #52]	; 0x34
 8004b12:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004b16:	4622      	mov	r2, r4
 8004b18:	462b      	mov	r3, r5
 8004b1a:	f04f 0000 	mov.w	r0, #0
 8004b1e:	f04f 0100 	mov.w	r1, #0
 8004b22:	0159      	lsls	r1, r3, #5
 8004b24:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004b28:	0150      	lsls	r0, r2, #5
 8004b2a:	4602      	mov	r2, r0
 8004b2c:	460b      	mov	r3, r1
 8004b2e:	4621      	mov	r1, r4
 8004b30:	1a51      	subs	r1, r2, r1
 8004b32:	6139      	str	r1, [r7, #16]
 8004b34:	4629      	mov	r1, r5
 8004b36:	eb63 0301 	sbc.w	r3, r3, r1
 8004b3a:	617b      	str	r3, [r7, #20]
 8004b3c:	f04f 0200 	mov.w	r2, #0
 8004b40:	f04f 0300 	mov.w	r3, #0
 8004b44:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004b48:	4659      	mov	r1, fp
 8004b4a:	018b      	lsls	r3, r1, #6
 8004b4c:	4651      	mov	r1, sl
 8004b4e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004b52:	4651      	mov	r1, sl
 8004b54:	018a      	lsls	r2, r1, #6
 8004b56:	4651      	mov	r1, sl
 8004b58:	ebb2 0801 	subs.w	r8, r2, r1
 8004b5c:	4659      	mov	r1, fp
 8004b5e:	eb63 0901 	sbc.w	r9, r3, r1
 8004b62:	f04f 0200 	mov.w	r2, #0
 8004b66:	f04f 0300 	mov.w	r3, #0
 8004b6a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004b6e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004b72:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004b76:	4690      	mov	r8, r2
 8004b78:	4699      	mov	r9, r3
 8004b7a:	4623      	mov	r3, r4
 8004b7c:	eb18 0303 	adds.w	r3, r8, r3
 8004b80:	60bb      	str	r3, [r7, #8]
 8004b82:	462b      	mov	r3, r5
 8004b84:	eb49 0303 	adc.w	r3, r9, r3
 8004b88:	60fb      	str	r3, [r7, #12]
 8004b8a:	f04f 0200 	mov.w	r2, #0
 8004b8e:	f04f 0300 	mov.w	r3, #0
 8004b92:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004b96:	4629      	mov	r1, r5
 8004b98:	024b      	lsls	r3, r1, #9
 8004b9a:	4621      	mov	r1, r4
 8004b9c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004ba0:	4621      	mov	r1, r4
 8004ba2:	024a      	lsls	r2, r1, #9
 8004ba4:	4610      	mov	r0, r2
 8004ba6:	4619      	mov	r1, r3
 8004ba8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004baa:	2200      	movs	r2, #0
 8004bac:	62bb      	str	r3, [r7, #40]	; 0x28
 8004bae:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004bb0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004bb4:	f7fb fb9c 	bl	80002f0 <__aeabi_uldivmod>
 8004bb8:	4602      	mov	r2, r0
 8004bba:	460b      	mov	r3, r1
 8004bbc:	4613      	mov	r3, r2
 8004bbe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004bc0:	e058      	b.n	8004c74 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004bc2:	4b38      	ldr	r3, [pc, #224]	; (8004ca4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004bc4:	685b      	ldr	r3, [r3, #4]
 8004bc6:	099b      	lsrs	r3, r3, #6
 8004bc8:	2200      	movs	r2, #0
 8004bca:	4618      	mov	r0, r3
 8004bcc:	4611      	mov	r1, r2
 8004bce:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004bd2:	623b      	str	r3, [r7, #32]
 8004bd4:	2300      	movs	r3, #0
 8004bd6:	627b      	str	r3, [r7, #36]	; 0x24
 8004bd8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004bdc:	4642      	mov	r2, r8
 8004bde:	464b      	mov	r3, r9
 8004be0:	f04f 0000 	mov.w	r0, #0
 8004be4:	f04f 0100 	mov.w	r1, #0
 8004be8:	0159      	lsls	r1, r3, #5
 8004bea:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004bee:	0150      	lsls	r0, r2, #5
 8004bf0:	4602      	mov	r2, r0
 8004bf2:	460b      	mov	r3, r1
 8004bf4:	4641      	mov	r1, r8
 8004bf6:	ebb2 0a01 	subs.w	sl, r2, r1
 8004bfa:	4649      	mov	r1, r9
 8004bfc:	eb63 0b01 	sbc.w	fp, r3, r1
 8004c00:	f04f 0200 	mov.w	r2, #0
 8004c04:	f04f 0300 	mov.w	r3, #0
 8004c08:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004c0c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004c10:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004c14:	ebb2 040a 	subs.w	r4, r2, sl
 8004c18:	eb63 050b 	sbc.w	r5, r3, fp
 8004c1c:	f04f 0200 	mov.w	r2, #0
 8004c20:	f04f 0300 	mov.w	r3, #0
 8004c24:	00eb      	lsls	r3, r5, #3
 8004c26:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004c2a:	00e2      	lsls	r2, r4, #3
 8004c2c:	4614      	mov	r4, r2
 8004c2e:	461d      	mov	r5, r3
 8004c30:	4643      	mov	r3, r8
 8004c32:	18e3      	adds	r3, r4, r3
 8004c34:	603b      	str	r3, [r7, #0]
 8004c36:	464b      	mov	r3, r9
 8004c38:	eb45 0303 	adc.w	r3, r5, r3
 8004c3c:	607b      	str	r3, [r7, #4]
 8004c3e:	f04f 0200 	mov.w	r2, #0
 8004c42:	f04f 0300 	mov.w	r3, #0
 8004c46:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004c4a:	4629      	mov	r1, r5
 8004c4c:	028b      	lsls	r3, r1, #10
 8004c4e:	4621      	mov	r1, r4
 8004c50:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004c54:	4621      	mov	r1, r4
 8004c56:	028a      	lsls	r2, r1, #10
 8004c58:	4610      	mov	r0, r2
 8004c5a:	4619      	mov	r1, r3
 8004c5c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004c5e:	2200      	movs	r2, #0
 8004c60:	61bb      	str	r3, [r7, #24]
 8004c62:	61fa      	str	r2, [r7, #28]
 8004c64:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004c68:	f7fb fb42 	bl	80002f0 <__aeabi_uldivmod>
 8004c6c:	4602      	mov	r2, r0
 8004c6e:	460b      	mov	r3, r1
 8004c70:	4613      	mov	r3, r2
 8004c72:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8004c74:	4b0b      	ldr	r3, [pc, #44]	; (8004ca4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004c76:	685b      	ldr	r3, [r3, #4]
 8004c78:	0c1b      	lsrs	r3, r3, #16
 8004c7a:	f003 0303 	and.w	r3, r3, #3
 8004c7e:	3301      	adds	r3, #1
 8004c80:	005b      	lsls	r3, r3, #1
 8004c82:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8004c84:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004c86:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004c88:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c8c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004c8e:	e002      	b.n	8004c96 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004c90:	4b05      	ldr	r3, [pc, #20]	; (8004ca8 <HAL_RCC_GetSysClockFreq+0x204>)
 8004c92:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004c94:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004c96:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004c98:	4618      	mov	r0, r3
 8004c9a:	3750      	adds	r7, #80	; 0x50
 8004c9c:	46bd      	mov	sp, r7
 8004c9e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004ca2:	bf00      	nop
 8004ca4:	40023800 	.word	0x40023800
 8004ca8:	00f42400 	.word	0x00f42400
 8004cac:	007a1200 	.word	0x007a1200

08004cb0 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004cb0:	b480      	push	{r7}
 8004cb2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004cb4:	4b03      	ldr	r3, [pc, #12]	; (8004cc4 <HAL_RCC_GetHCLKFreq+0x14>)
 8004cb6:	681b      	ldr	r3, [r3, #0]
}
 8004cb8:	4618      	mov	r0, r3
 8004cba:	46bd      	mov	sp, r7
 8004cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc0:	4770      	bx	lr
 8004cc2:	bf00      	nop
 8004cc4:	2000001c 	.word	0x2000001c

08004cc8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004cc8:	b580      	push	{r7, lr}
 8004cca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004ccc:	f7ff fff0 	bl	8004cb0 <HAL_RCC_GetHCLKFreq>
 8004cd0:	4602      	mov	r2, r0
 8004cd2:	4b05      	ldr	r3, [pc, #20]	; (8004ce8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004cd4:	689b      	ldr	r3, [r3, #8]
 8004cd6:	0a9b      	lsrs	r3, r3, #10
 8004cd8:	f003 0307 	and.w	r3, r3, #7
 8004cdc:	4903      	ldr	r1, [pc, #12]	; (8004cec <HAL_RCC_GetPCLK1Freq+0x24>)
 8004cde:	5ccb      	ldrb	r3, [r1, r3]
 8004ce0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004ce4:	4618      	mov	r0, r3
 8004ce6:	bd80      	pop	{r7, pc}
 8004ce8:	40023800 	.word	0x40023800
 8004cec:	0802f8cc 	.word	0x0802f8cc

08004cf0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004cf0:	b580      	push	{r7, lr}
 8004cf2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004cf4:	f7ff ffdc 	bl	8004cb0 <HAL_RCC_GetHCLKFreq>
 8004cf8:	4602      	mov	r2, r0
 8004cfa:	4b05      	ldr	r3, [pc, #20]	; (8004d10 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004cfc:	689b      	ldr	r3, [r3, #8]
 8004cfe:	0b5b      	lsrs	r3, r3, #13
 8004d00:	f003 0307 	and.w	r3, r3, #7
 8004d04:	4903      	ldr	r1, [pc, #12]	; (8004d14 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004d06:	5ccb      	ldrb	r3, [r1, r3]
 8004d08:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004d0c:	4618      	mov	r0, r3
 8004d0e:	bd80      	pop	{r7, pc}
 8004d10:	40023800 	.word	0x40023800
 8004d14:	0802f8cc 	.word	0x0802f8cc

08004d18 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004d18:	b580      	push	{r7, lr}
 8004d1a:	b088      	sub	sp, #32
 8004d1c:	af00      	add	r7, sp, #0
 8004d1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8004d20:	2300      	movs	r3, #0
 8004d22:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8004d24:	2300      	movs	r3, #0
 8004d26:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8004d28:	2300      	movs	r3, #0
 8004d2a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8004d2c:	2300      	movs	r3, #0
 8004d2e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8004d30:	2300      	movs	r3, #0
 8004d32:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	f003 0301 	and.w	r3, r3, #1
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d012      	beq.n	8004d66 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004d40:	4b69      	ldr	r3, [pc, #420]	; (8004ee8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004d42:	689b      	ldr	r3, [r3, #8]
 8004d44:	4a68      	ldr	r2, [pc, #416]	; (8004ee8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004d46:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8004d4a:	6093      	str	r3, [r2, #8]
 8004d4c:	4b66      	ldr	r3, [pc, #408]	; (8004ee8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004d4e:	689a      	ldr	r2, [r3, #8]
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d54:	4964      	ldr	r1, [pc, #400]	; (8004ee8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004d56:	4313      	orrs	r3, r2
 8004d58:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d101      	bne.n	8004d66 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8004d62:	2301      	movs	r3, #1
 8004d64:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d017      	beq.n	8004da2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004d72:	4b5d      	ldr	r3, [pc, #372]	; (8004ee8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004d74:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004d78:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d80:	4959      	ldr	r1, [pc, #356]	; (8004ee8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004d82:	4313      	orrs	r3, r2
 8004d84:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d8c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004d90:	d101      	bne.n	8004d96 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8004d92:	2301      	movs	r3, #1
 8004d94:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d101      	bne.n	8004da2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8004d9e:	2301      	movs	r3, #1
 8004da0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d017      	beq.n	8004dde <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004dae:	4b4e      	ldr	r3, [pc, #312]	; (8004ee8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004db0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004db4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dbc:	494a      	ldr	r1, [pc, #296]	; (8004ee8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004dbe:	4313      	orrs	r3, r2
 8004dc0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dc8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004dcc:	d101      	bne.n	8004dd2 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8004dce:	2301      	movs	r3, #1
 8004dd0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d101      	bne.n	8004dde <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8004dda:	2301      	movs	r3, #1
 8004ddc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d001      	beq.n	8004dee <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8004dea:	2301      	movs	r3, #1
 8004dec:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	f003 0320 	and.w	r3, r3, #32
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	f000 808b 	beq.w	8004f12 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004dfc:	4b3a      	ldr	r3, [pc, #232]	; (8004ee8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004dfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e00:	4a39      	ldr	r2, [pc, #228]	; (8004ee8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004e02:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004e06:	6413      	str	r3, [r2, #64]	; 0x40
 8004e08:	4b37      	ldr	r3, [pc, #220]	; (8004ee8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004e0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e0c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e10:	60bb      	str	r3, [r7, #8]
 8004e12:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004e14:	4b35      	ldr	r3, [pc, #212]	; (8004eec <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	4a34      	ldr	r2, [pc, #208]	; (8004eec <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004e1a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004e1e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004e20:	f7fd ffac 	bl	8002d7c <HAL_GetTick>
 8004e24:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004e26:	e008      	b.n	8004e3a <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004e28:	f7fd ffa8 	bl	8002d7c <HAL_GetTick>
 8004e2c:	4602      	mov	r2, r0
 8004e2e:	697b      	ldr	r3, [r7, #20]
 8004e30:	1ad3      	subs	r3, r2, r3
 8004e32:	2b64      	cmp	r3, #100	; 0x64
 8004e34:	d901      	bls.n	8004e3a <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8004e36:	2303      	movs	r3, #3
 8004e38:	e38f      	b.n	800555a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004e3a:	4b2c      	ldr	r3, [pc, #176]	; (8004eec <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d0f0      	beq.n	8004e28 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004e46:	4b28      	ldr	r3, [pc, #160]	; (8004ee8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004e48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e4a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004e4e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004e50:	693b      	ldr	r3, [r7, #16]
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d035      	beq.n	8004ec2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e5a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004e5e:	693a      	ldr	r2, [r7, #16]
 8004e60:	429a      	cmp	r2, r3
 8004e62:	d02e      	beq.n	8004ec2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004e64:	4b20      	ldr	r3, [pc, #128]	; (8004ee8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004e66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e68:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004e6c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004e6e:	4b1e      	ldr	r3, [pc, #120]	; (8004ee8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004e70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e72:	4a1d      	ldr	r2, [pc, #116]	; (8004ee8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004e74:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004e78:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004e7a:	4b1b      	ldr	r3, [pc, #108]	; (8004ee8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004e7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e7e:	4a1a      	ldr	r2, [pc, #104]	; (8004ee8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004e80:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004e84:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8004e86:	4a18      	ldr	r2, [pc, #96]	; (8004ee8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004e88:	693b      	ldr	r3, [r7, #16]
 8004e8a:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004e8c:	4b16      	ldr	r3, [pc, #88]	; (8004ee8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004e8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e90:	f003 0301 	and.w	r3, r3, #1
 8004e94:	2b01      	cmp	r3, #1
 8004e96:	d114      	bne.n	8004ec2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e98:	f7fd ff70 	bl	8002d7c <HAL_GetTick>
 8004e9c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004e9e:	e00a      	b.n	8004eb6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004ea0:	f7fd ff6c 	bl	8002d7c <HAL_GetTick>
 8004ea4:	4602      	mov	r2, r0
 8004ea6:	697b      	ldr	r3, [r7, #20]
 8004ea8:	1ad3      	subs	r3, r2, r3
 8004eaa:	f241 3288 	movw	r2, #5000	; 0x1388
 8004eae:	4293      	cmp	r3, r2
 8004eb0:	d901      	bls.n	8004eb6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8004eb2:	2303      	movs	r3, #3
 8004eb4:	e351      	b.n	800555a <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004eb6:	4b0c      	ldr	r3, [pc, #48]	; (8004ee8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004eb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004eba:	f003 0302 	and.w	r3, r3, #2
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d0ee      	beq.n	8004ea0 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ec6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004eca:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004ece:	d111      	bne.n	8004ef4 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8004ed0:	4b05      	ldr	r3, [pc, #20]	; (8004ee8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004ed2:	689b      	ldr	r3, [r3, #8]
 8004ed4:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004edc:	4b04      	ldr	r3, [pc, #16]	; (8004ef0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004ede:	400b      	ands	r3, r1
 8004ee0:	4901      	ldr	r1, [pc, #4]	; (8004ee8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004ee2:	4313      	orrs	r3, r2
 8004ee4:	608b      	str	r3, [r1, #8]
 8004ee6:	e00b      	b.n	8004f00 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8004ee8:	40023800 	.word	0x40023800
 8004eec:	40007000 	.word	0x40007000
 8004ef0:	0ffffcff 	.word	0x0ffffcff
 8004ef4:	4bac      	ldr	r3, [pc, #688]	; (80051a8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004ef6:	689b      	ldr	r3, [r3, #8]
 8004ef8:	4aab      	ldr	r2, [pc, #684]	; (80051a8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004efa:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004efe:	6093      	str	r3, [r2, #8]
 8004f00:	4ba9      	ldr	r3, [pc, #676]	; (80051a8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004f02:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f08:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004f0c:	49a6      	ldr	r1, [pc, #664]	; (80051a8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004f0e:	4313      	orrs	r3, r2
 8004f10:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	f003 0310 	and.w	r3, r3, #16
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d010      	beq.n	8004f40 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004f1e:	4ba2      	ldr	r3, [pc, #648]	; (80051a8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004f20:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004f24:	4aa0      	ldr	r2, [pc, #640]	; (80051a8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004f26:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004f2a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8004f2e:	4b9e      	ldr	r3, [pc, #632]	; (80051a8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004f30:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f38:	499b      	ldr	r1, [pc, #620]	; (80051a8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004f3a:	4313      	orrs	r3, r2
 8004f3c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d00a      	beq.n	8004f62 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004f4c:	4b96      	ldr	r3, [pc, #600]	; (80051a8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004f4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f52:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004f5a:	4993      	ldr	r1, [pc, #588]	; (80051a8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004f5c:	4313      	orrs	r3, r2
 8004f5e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d00a      	beq.n	8004f84 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004f6e:	4b8e      	ldr	r3, [pc, #568]	; (80051a8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004f70:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f74:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004f7c:	498a      	ldr	r1, [pc, #552]	; (80051a8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004f7e:	4313      	orrs	r3, r2
 8004f80:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d00a      	beq.n	8004fa6 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004f90:	4b85      	ldr	r3, [pc, #532]	; (80051a8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004f92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f96:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004f9e:	4982      	ldr	r1, [pc, #520]	; (80051a8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004fa0:	4313      	orrs	r3, r2
 8004fa2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d00a      	beq.n	8004fc8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004fb2:	4b7d      	ldr	r3, [pc, #500]	; (80051a8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004fb4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004fb8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004fc0:	4979      	ldr	r1, [pc, #484]	; (80051a8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004fc2:	4313      	orrs	r3, r2
 8004fc4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d00a      	beq.n	8004fea <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004fd4:	4b74      	ldr	r3, [pc, #464]	; (80051a8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004fd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004fda:	f023 0203 	bic.w	r2, r3, #3
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004fe2:	4971      	ldr	r1, [pc, #452]	; (80051a8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004fe4:	4313      	orrs	r3, r2
 8004fe6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d00a      	beq.n	800500c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004ff6:	4b6c      	ldr	r3, [pc, #432]	; (80051a8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004ff8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ffc:	f023 020c 	bic.w	r2, r3, #12
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005004:	4968      	ldr	r1, [pc, #416]	; (80051a8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005006:	4313      	orrs	r3, r2
 8005008:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005014:	2b00      	cmp	r3, #0
 8005016:	d00a      	beq.n	800502e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005018:	4b63      	ldr	r3, [pc, #396]	; (80051a8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800501a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800501e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005026:	4960      	ldr	r1, [pc, #384]	; (80051a8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005028:	4313      	orrs	r3, r2
 800502a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005036:	2b00      	cmp	r3, #0
 8005038:	d00a      	beq.n	8005050 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800503a:	4b5b      	ldr	r3, [pc, #364]	; (80051a8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800503c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005040:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005048:	4957      	ldr	r1, [pc, #348]	; (80051a8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800504a:	4313      	orrs	r3, r2
 800504c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005058:	2b00      	cmp	r3, #0
 800505a:	d00a      	beq.n	8005072 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800505c:	4b52      	ldr	r3, [pc, #328]	; (80051a8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800505e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005062:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800506a:	494f      	ldr	r1, [pc, #316]	; (80051a8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800506c:	4313      	orrs	r3, r2
 800506e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800507a:	2b00      	cmp	r3, #0
 800507c:	d00a      	beq.n	8005094 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800507e:	4b4a      	ldr	r3, [pc, #296]	; (80051a8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005080:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005084:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800508c:	4946      	ldr	r1, [pc, #280]	; (80051a8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800508e:	4313      	orrs	r3, r2
 8005090:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800509c:	2b00      	cmp	r3, #0
 800509e:	d00a      	beq.n	80050b6 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80050a0:	4b41      	ldr	r3, [pc, #260]	; (80051a8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80050a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050a6:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80050ae:	493e      	ldr	r1, [pc, #248]	; (80051a8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80050b0:	4313      	orrs	r3, r2
 80050b2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d00a      	beq.n	80050d8 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80050c2:	4b39      	ldr	r3, [pc, #228]	; (80051a8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80050c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050c8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80050d0:	4935      	ldr	r1, [pc, #212]	; (80051a8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80050d2:	4313      	orrs	r3, r2
 80050d4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d00a      	beq.n	80050fa <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80050e4:	4b30      	ldr	r3, [pc, #192]	; (80051a8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80050e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050ea:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80050f2:	492d      	ldr	r1, [pc, #180]	; (80051a8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80050f4:	4313      	orrs	r3, r2
 80050f6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005102:	2b00      	cmp	r3, #0
 8005104:	d011      	beq.n	800512a <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8005106:	4b28      	ldr	r3, [pc, #160]	; (80051a8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005108:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800510c:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005114:	4924      	ldr	r1, [pc, #144]	; (80051a8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005116:	4313      	orrs	r3, r2
 8005118:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005120:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005124:	d101      	bne.n	800512a <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8005126:	2301      	movs	r3, #1
 8005128:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	f003 0308 	and.w	r3, r3, #8
 8005132:	2b00      	cmp	r3, #0
 8005134:	d001      	beq.n	800513a <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8005136:	2301      	movs	r3, #1
 8005138:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005142:	2b00      	cmp	r3, #0
 8005144:	d00a      	beq.n	800515c <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005146:	4b18      	ldr	r3, [pc, #96]	; (80051a8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005148:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800514c:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005154:	4914      	ldr	r1, [pc, #80]	; (80051a8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005156:	4313      	orrs	r3, r2
 8005158:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005164:	2b00      	cmp	r3, #0
 8005166:	d00b      	beq.n	8005180 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005168:	4b0f      	ldr	r3, [pc, #60]	; (80051a8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800516a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800516e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005178:	490b      	ldr	r1, [pc, #44]	; (80051a8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800517a:	4313      	orrs	r3, r2
 800517c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005188:	2b00      	cmp	r3, #0
 800518a:	d00f      	beq.n	80051ac <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 800518c:	4b06      	ldr	r3, [pc, #24]	; (80051a8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800518e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005192:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800519c:	4902      	ldr	r1, [pc, #8]	; (80051a8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800519e:	4313      	orrs	r3, r2
 80051a0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80051a4:	e002      	b.n	80051ac <HAL_RCCEx_PeriphCLKConfig+0x494>
 80051a6:	bf00      	nop
 80051a8:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d00b      	beq.n	80051d0 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80051b8:	4b8a      	ldr	r3, [pc, #552]	; (80053e4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80051ba:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80051be:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051c8:	4986      	ldr	r1, [pc, #536]	; (80053e4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80051ca:	4313      	orrs	r3, r2
 80051cc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d00b      	beq.n	80051f4 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80051dc:	4b81      	ldr	r3, [pc, #516]	; (80053e4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80051de:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80051e2:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80051ec:	497d      	ldr	r1, [pc, #500]	; (80053e4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80051ee:	4313      	orrs	r3, r2
 80051f0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80051f4:	69fb      	ldr	r3, [r7, #28]
 80051f6:	2b01      	cmp	r3, #1
 80051f8:	d006      	beq.n	8005208 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005202:	2b00      	cmp	r3, #0
 8005204:	f000 80d6 	beq.w	80053b4 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005208:	4b76      	ldr	r3, [pc, #472]	; (80053e4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	4a75      	ldr	r2, [pc, #468]	; (80053e4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800520e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005212:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005214:	f7fd fdb2 	bl	8002d7c <HAL_GetTick>
 8005218:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800521a:	e008      	b.n	800522e <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800521c:	f7fd fdae 	bl	8002d7c <HAL_GetTick>
 8005220:	4602      	mov	r2, r0
 8005222:	697b      	ldr	r3, [r7, #20]
 8005224:	1ad3      	subs	r3, r2, r3
 8005226:	2b64      	cmp	r3, #100	; 0x64
 8005228:	d901      	bls.n	800522e <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800522a:	2303      	movs	r3, #3
 800522c:	e195      	b.n	800555a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800522e:	4b6d      	ldr	r3, [pc, #436]	; (80053e4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005236:	2b00      	cmp	r3, #0
 8005238:	d1f0      	bne.n	800521c <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	f003 0301 	and.w	r3, r3, #1
 8005242:	2b00      	cmp	r3, #0
 8005244:	d021      	beq.n	800528a <HAL_RCCEx_PeriphCLKConfig+0x572>
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800524a:	2b00      	cmp	r3, #0
 800524c:	d11d      	bne.n	800528a <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800524e:	4b65      	ldr	r3, [pc, #404]	; (80053e4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005250:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005254:	0c1b      	lsrs	r3, r3, #16
 8005256:	f003 0303 	and.w	r3, r3, #3
 800525a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800525c:	4b61      	ldr	r3, [pc, #388]	; (80053e4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800525e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005262:	0e1b      	lsrs	r3, r3, #24
 8005264:	f003 030f 	and.w	r3, r3, #15
 8005268:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	685b      	ldr	r3, [r3, #4]
 800526e:	019a      	lsls	r2, r3, #6
 8005270:	693b      	ldr	r3, [r7, #16]
 8005272:	041b      	lsls	r3, r3, #16
 8005274:	431a      	orrs	r2, r3
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	061b      	lsls	r3, r3, #24
 800527a:	431a      	orrs	r2, r3
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	689b      	ldr	r3, [r3, #8]
 8005280:	071b      	lsls	r3, r3, #28
 8005282:	4958      	ldr	r1, [pc, #352]	; (80053e4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005284:	4313      	orrs	r3, r2
 8005286:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005292:	2b00      	cmp	r3, #0
 8005294:	d004      	beq.n	80052a0 <HAL_RCCEx_PeriphCLKConfig+0x588>
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800529a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800529e:	d00a      	beq.n	80052b6 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d02e      	beq.n	800530a <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052b0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80052b4:	d129      	bne.n	800530a <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80052b6:	4b4b      	ldr	r3, [pc, #300]	; (80053e4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80052b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80052bc:	0c1b      	lsrs	r3, r3, #16
 80052be:	f003 0303 	and.w	r3, r3, #3
 80052c2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80052c4:	4b47      	ldr	r3, [pc, #284]	; (80053e4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80052c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80052ca:	0f1b      	lsrs	r3, r3, #28
 80052cc:	f003 0307 	and.w	r3, r3, #7
 80052d0:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	685b      	ldr	r3, [r3, #4]
 80052d6:	019a      	lsls	r2, r3, #6
 80052d8:	693b      	ldr	r3, [r7, #16]
 80052da:	041b      	lsls	r3, r3, #16
 80052dc:	431a      	orrs	r2, r3
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	68db      	ldr	r3, [r3, #12]
 80052e2:	061b      	lsls	r3, r3, #24
 80052e4:	431a      	orrs	r2, r3
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	071b      	lsls	r3, r3, #28
 80052ea:	493e      	ldr	r1, [pc, #248]	; (80053e4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80052ec:	4313      	orrs	r3, r2
 80052ee:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80052f2:	4b3c      	ldr	r3, [pc, #240]	; (80053e4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80052f4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80052f8:	f023 021f 	bic.w	r2, r3, #31
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005300:	3b01      	subs	r3, #1
 8005302:	4938      	ldr	r1, [pc, #224]	; (80053e4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005304:	4313      	orrs	r3, r2
 8005306:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005312:	2b00      	cmp	r3, #0
 8005314:	d01d      	beq.n	8005352 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8005316:	4b33      	ldr	r3, [pc, #204]	; (80053e4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005318:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800531c:	0e1b      	lsrs	r3, r3, #24
 800531e:	f003 030f 	and.w	r3, r3, #15
 8005322:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005324:	4b2f      	ldr	r3, [pc, #188]	; (80053e4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005326:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800532a:	0f1b      	lsrs	r3, r3, #28
 800532c:	f003 0307 	and.w	r3, r3, #7
 8005330:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	685b      	ldr	r3, [r3, #4]
 8005336:	019a      	lsls	r2, r3, #6
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	691b      	ldr	r3, [r3, #16]
 800533c:	041b      	lsls	r3, r3, #16
 800533e:	431a      	orrs	r2, r3
 8005340:	693b      	ldr	r3, [r7, #16]
 8005342:	061b      	lsls	r3, r3, #24
 8005344:	431a      	orrs	r2, r3
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	071b      	lsls	r3, r3, #28
 800534a:	4926      	ldr	r1, [pc, #152]	; (80053e4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800534c:	4313      	orrs	r3, r2
 800534e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800535a:	2b00      	cmp	r3, #0
 800535c:	d011      	beq.n	8005382 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	685b      	ldr	r3, [r3, #4]
 8005362:	019a      	lsls	r2, r3, #6
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	691b      	ldr	r3, [r3, #16]
 8005368:	041b      	lsls	r3, r3, #16
 800536a:	431a      	orrs	r2, r3
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	68db      	ldr	r3, [r3, #12]
 8005370:	061b      	lsls	r3, r3, #24
 8005372:	431a      	orrs	r2, r3
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	689b      	ldr	r3, [r3, #8]
 8005378:	071b      	lsls	r3, r3, #28
 800537a:	491a      	ldr	r1, [pc, #104]	; (80053e4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800537c:	4313      	orrs	r3, r2
 800537e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005382:	4b18      	ldr	r3, [pc, #96]	; (80053e4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	4a17      	ldr	r2, [pc, #92]	; (80053e4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005388:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800538c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800538e:	f7fd fcf5 	bl	8002d7c <HAL_GetTick>
 8005392:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005394:	e008      	b.n	80053a8 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005396:	f7fd fcf1 	bl	8002d7c <HAL_GetTick>
 800539a:	4602      	mov	r2, r0
 800539c:	697b      	ldr	r3, [r7, #20]
 800539e:	1ad3      	subs	r3, r2, r3
 80053a0:	2b64      	cmp	r3, #100	; 0x64
 80053a2:	d901      	bls.n	80053a8 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80053a4:	2303      	movs	r3, #3
 80053a6:	e0d8      	b.n	800555a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80053a8:	4b0e      	ldr	r3, [pc, #56]	; (80053e4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d0f0      	beq.n	8005396 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80053b4:	69bb      	ldr	r3, [r7, #24]
 80053b6:	2b01      	cmp	r3, #1
 80053b8:	f040 80ce 	bne.w	8005558 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80053bc:	4b09      	ldr	r3, [pc, #36]	; (80053e4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	4a08      	ldr	r2, [pc, #32]	; (80053e4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80053c2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80053c6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80053c8:	f7fd fcd8 	bl	8002d7c <HAL_GetTick>
 80053cc:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80053ce:	e00b      	b.n	80053e8 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80053d0:	f7fd fcd4 	bl	8002d7c <HAL_GetTick>
 80053d4:	4602      	mov	r2, r0
 80053d6:	697b      	ldr	r3, [r7, #20]
 80053d8:	1ad3      	subs	r3, r2, r3
 80053da:	2b64      	cmp	r3, #100	; 0x64
 80053dc:	d904      	bls.n	80053e8 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80053de:	2303      	movs	r3, #3
 80053e0:	e0bb      	b.n	800555a <HAL_RCCEx_PeriphCLKConfig+0x842>
 80053e2:	bf00      	nop
 80053e4:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80053e8:	4b5e      	ldr	r3, [pc, #376]	; (8005564 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80053f0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80053f4:	d0ec      	beq.n	80053d0 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d003      	beq.n	800540a <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005406:	2b00      	cmp	r3, #0
 8005408:	d009      	beq.n	800541e <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8005412:	2b00      	cmp	r3, #0
 8005414:	d02e      	beq.n	8005474 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800541a:	2b00      	cmp	r3, #0
 800541c:	d12a      	bne.n	8005474 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800541e:	4b51      	ldr	r3, [pc, #324]	; (8005564 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005420:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005424:	0c1b      	lsrs	r3, r3, #16
 8005426:	f003 0303 	and.w	r3, r3, #3
 800542a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800542c:	4b4d      	ldr	r3, [pc, #308]	; (8005564 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800542e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005432:	0f1b      	lsrs	r3, r3, #28
 8005434:	f003 0307 	and.w	r3, r3, #7
 8005438:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	695b      	ldr	r3, [r3, #20]
 800543e:	019a      	lsls	r2, r3, #6
 8005440:	693b      	ldr	r3, [r7, #16]
 8005442:	041b      	lsls	r3, r3, #16
 8005444:	431a      	orrs	r2, r3
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	699b      	ldr	r3, [r3, #24]
 800544a:	061b      	lsls	r3, r3, #24
 800544c:	431a      	orrs	r2, r3
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	071b      	lsls	r3, r3, #28
 8005452:	4944      	ldr	r1, [pc, #272]	; (8005564 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005454:	4313      	orrs	r3, r2
 8005456:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800545a:	4b42      	ldr	r3, [pc, #264]	; (8005564 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800545c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005460:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005468:	3b01      	subs	r3, #1
 800546a:	021b      	lsls	r3, r3, #8
 800546c:	493d      	ldr	r1, [pc, #244]	; (8005564 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800546e:	4313      	orrs	r3, r2
 8005470:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800547c:	2b00      	cmp	r3, #0
 800547e:	d022      	beq.n	80054c6 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005484:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005488:	d11d      	bne.n	80054c6 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800548a:	4b36      	ldr	r3, [pc, #216]	; (8005564 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800548c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005490:	0e1b      	lsrs	r3, r3, #24
 8005492:	f003 030f 	and.w	r3, r3, #15
 8005496:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005498:	4b32      	ldr	r3, [pc, #200]	; (8005564 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800549a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800549e:	0f1b      	lsrs	r3, r3, #28
 80054a0:	f003 0307 	and.w	r3, r3, #7
 80054a4:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	695b      	ldr	r3, [r3, #20]
 80054aa:	019a      	lsls	r2, r3, #6
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	6a1b      	ldr	r3, [r3, #32]
 80054b0:	041b      	lsls	r3, r3, #16
 80054b2:	431a      	orrs	r2, r3
 80054b4:	693b      	ldr	r3, [r7, #16]
 80054b6:	061b      	lsls	r3, r3, #24
 80054b8:	431a      	orrs	r2, r3
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	071b      	lsls	r3, r3, #28
 80054be:	4929      	ldr	r1, [pc, #164]	; (8005564 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80054c0:	4313      	orrs	r3, r2
 80054c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	f003 0308 	and.w	r3, r3, #8
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d028      	beq.n	8005524 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80054d2:	4b24      	ldr	r3, [pc, #144]	; (8005564 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80054d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054d8:	0e1b      	lsrs	r3, r3, #24
 80054da:	f003 030f 	and.w	r3, r3, #15
 80054de:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80054e0:	4b20      	ldr	r3, [pc, #128]	; (8005564 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80054e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054e6:	0c1b      	lsrs	r3, r3, #16
 80054e8:	f003 0303 	and.w	r3, r3, #3
 80054ec:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	695b      	ldr	r3, [r3, #20]
 80054f2:	019a      	lsls	r2, r3, #6
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	041b      	lsls	r3, r3, #16
 80054f8:	431a      	orrs	r2, r3
 80054fa:	693b      	ldr	r3, [r7, #16]
 80054fc:	061b      	lsls	r3, r3, #24
 80054fe:	431a      	orrs	r2, r3
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	69db      	ldr	r3, [r3, #28]
 8005504:	071b      	lsls	r3, r3, #28
 8005506:	4917      	ldr	r1, [pc, #92]	; (8005564 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005508:	4313      	orrs	r3, r2
 800550a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800550e:	4b15      	ldr	r3, [pc, #84]	; (8005564 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005510:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005514:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800551c:	4911      	ldr	r1, [pc, #68]	; (8005564 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800551e:	4313      	orrs	r3, r2
 8005520:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8005524:	4b0f      	ldr	r3, [pc, #60]	; (8005564 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	4a0e      	ldr	r2, [pc, #56]	; (8005564 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800552a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800552e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005530:	f7fd fc24 	bl	8002d7c <HAL_GetTick>
 8005534:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005536:	e008      	b.n	800554a <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005538:	f7fd fc20 	bl	8002d7c <HAL_GetTick>
 800553c:	4602      	mov	r2, r0
 800553e:	697b      	ldr	r3, [r7, #20]
 8005540:	1ad3      	subs	r3, r2, r3
 8005542:	2b64      	cmp	r3, #100	; 0x64
 8005544:	d901      	bls.n	800554a <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005546:	2303      	movs	r3, #3
 8005548:	e007      	b.n	800555a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800554a:	4b06      	ldr	r3, [pc, #24]	; (8005564 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005552:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005556:	d1ef      	bne.n	8005538 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8005558:	2300      	movs	r3, #0
}
 800555a:	4618      	mov	r0, r3
 800555c:	3720      	adds	r7, #32
 800555e:	46bd      	mov	sp, r7
 8005560:	bd80      	pop	{r7, pc}
 8005562:	bf00      	nop
 8005564:	40023800 	.word	0x40023800

08005568 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 8005568:	b580      	push	{r7, lr}
 800556a:	b082      	sub	sp, #8
 800556c:	af00      	add	r7, sp, #0
 800556e:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	2b00      	cmp	r3, #0
 8005574:	d101      	bne.n	800557a <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 8005576:	2301      	movs	r3, #1
 8005578:	e01c      	b.n	80055b4 <HAL_RNG_Init+0x4c>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	795b      	ldrb	r3, [r3, #5]
 800557e:	b2db      	uxtb	r3, r3
 8005580:	2b00      	cmp	r3, #0
 8005582:	d105      	bne.n	8005590 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	2200      	movs	r2, #0
 8005588:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 800558a:	6878      	ldr	r0, [r7, #4]
 800558c:	f7fb ffda 	bl	8001544 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	2202      	movs	r2, #2
 8005594:	715a      	strb	r2, [r3, #5]


  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	681a      	ldr	r2, [r3, #0]
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	f042 0204 	orr.w	r2, r2, #4
 80055a4:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	2201      	movs	r2, #1
 80055aa:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	2200      	movs	r2, #0
 80055b0:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 80055b2:	2300      	movs	r3, #0
}
 80055b4:	4618      	mov	r0, r3
 80055b6:	3708      	adds	r7, #8
 80055b8:	46bd      	mov	sp, r7
 80055ba:	bd80      	pop	{r7, pc}

080055bc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80055bc:	b580      	push	{r7, lr}
 80055be:	b084      	sub	sp, #16
 80055c0:	af00      	add	r7, sp, #0
 80055c2:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d101      	bne.n	80055ce <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80055ca:	2301      	movs	r3, #1
 80055cc:	e09d      	b.n	800570a <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d108      	bne.n	80055e8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	685b      	ldr	r3, [r3, #4]
 80055da:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80055de:	d009      	beq.n	80055f4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	2200      	movs	r2, #0
 80055e4:	61da      	str	r2, [r3, #28]
 80055e6:	e005      	b.n	80055f4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	2200      	movs	r2, #0
 80055ec:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	2200      	movs	r2, #0
 80055f2:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	2200      	movs	r2, #0
 80055f8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005600:	b2db      	uxtb	r3, r3
 8005602:	2b00      	cmp	r3, #0
 8005604:	d106      	bne.n	8005614 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	2200      	movs	r2, #0
 800560a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800560e:	6878      	ldr	r0, [r7, #4]
 8005610:	f7fb fff6 	bl	8001600 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	2202      	movs	r2, #2
 8005618:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	681a      	ldr	r2, [r3, #0]
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800562a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	68db      	ldr	r3, [r3, #12]
 8005630:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005634:	d902      	bls.n	800563c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005636:	2300      	movs	r3, #0
 8005638:	60fb      	str	r3, [r7, #12]
 800563a:	e002      	b.n	8005642 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800563c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005640:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	68db      	ldr	r3, [r3, #12]
 8005646:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800564a:	d007      	beq.n	800565c <HAL_SPI_Init+0xa0>
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	68db      	ldr	r3, [r3, #12]
 8005650:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005654:	d002      	beq.n	800565c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	2200      	movs	r2, #0
 800565a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	685b      	ldr	r3, [r3, #4]
 8005660:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	689b      	ldr	r3, [r3, #8]
 8005668:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800566c:	431a      	orrs	r2, r3
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	691b      	ldr	r3, [r3, #16]
 8005672:	f003 0302 	and.w	r3, r3, #2
 8005676:	431a      	orrs	r2, r3
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	695b      	ldr	r3, [r3, #20]
 800567c:	f003 0301 	and.w	r3, r3, #1
 8005680:	431a      	orrs	r2, r3
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	699b      	ldr	r3, [r3, #24]
 8005686:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800568a:	431a      	orrs	r2, r3
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	69db      	ldr	r3, [r3, #28]
 8005690:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005694:	431a      	orrs	r2, r3
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	6a1b      	ldr	r3, [r3, #32]
 800569a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800569e:	ea42 0103 	orr.w	r1, r2, r3
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056a6:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	430a      	orrs	r2, r1
 80056b0:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	699b      	ldr	r3, [r3, #24]
 80056b6:	0c1b      	lsrs	r3, r3, #16
 80056b8:	f003 0204 	and.w	r2, r3, #4
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056c0:	f003 0310 	and.w	r3, r3, #16
 80056c4:	431a      	orrs	r2, r3
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80056ca:	f003 0308 	and.w	r3, r3, #8
 80056ce:	431a      	orrs	r2, r3
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	68db      	ldr	r3, [r3, #12]
 80056d4:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80056d8:	ea42 0103 	orr.w	r1, r2, r3
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	430a      	orrs	r2, r1
 80056e8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	69da      	ldr	r2, [r3, #28]
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80056f8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	2200      	movs	r2, #0
 80056fe:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	2201      	movs	r2, #1
 8005704:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8005708:	2300      	movs	r3, #0
}
 800570a:	4618      	mov	r0, r3
 800570c:	3710      	adds	r7, #16
 800570e:	46bd      	mov	sp, r7
 8005710:	bd80      	pop	{r7, pc}

08005712 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005712:	b580      	push	{r7, lr}
 8005714:	b088      	sub	sp, #32
 8005716:	af00      	add	r7, sp, #0
 8005718:	60f8      	str	r0, [r7, #12]
 800571a:	60b9      	str	r1, [r7, #8]
 800571c:	603b      	str	r3, [r7, #0]
 800571e:	4613      	mov	r3, r2
 8005720:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005722:	2300      	movs	r3, #0
 8005724:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800572c:	2b01      	cmp	r3, #1
 800572e:	d101      	bne.n	8005734 <HAL_SPI_Transmit+0x22>
 8005730:	2302      	movs	r3, #2
 8005732:	e158      	b.n	80059e6 <HAL_SPI_Transmit+0x2d4>
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	2201      	movs	r2, #1
 8005738:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800573c:	f7fd fb1e 	bl	8002d7c <HAL_GetTick>
 8005740:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8005742:	88fb      	ldrh	r3, [r7, #6]
 8005744:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800574c:	b2db      	uxtb	r3, r3
 800574e:	2b01      	cmp	r3, #1
 8005750:	d002      	beq.n	8005758 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8005752:	2302      	movs	r3, #2
 8005754:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005756:	e13d      	b.n	80059d4 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8005758:	68bb      	ldr	r3, [r7, #8]
 800575a:	2b00      	cmp	r3, #0
 800575c:	d002      	beq.n	8005764 <HAL_SPI_Transmit+0x52>
 800575e:	88fb      	ldrh	r3, [r7, #6]
 8005760:	2b00      	cmp	r3, #0
 8005762:	d102      	bne.n	800576a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8005764:	2301      	movs	r3, #1
 8005766:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005768:	e134      	b.n	80059d4 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	2203      	movs	r2, #3
 800576e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	2200      	movs	r2, #0
 8005776:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	68ba      	ldr	r2, [r7, #8]
 800577c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	88fa      	ldrh	r2, [r7, #6]
 8005782:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	88fa      	ldrh	r2, [r7, #6]
 8005788:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	2200      	movs	r2, #0
 800578e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	2200      	movs	r2, #0
 8005794:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	2200      	movs	r2, #0
 800579c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	2200      	movs	r2, #0
 80057a4:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	2200      	movs	r2, #0
 80057aa:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	689b      	ldr	r3, [r3, #8]
 80057b0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80057b4:	d10f      	bne.n	80057d6 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	681a      	ldr	r2, [r3, #0]
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80057c4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	681a      	ldr	r2, [r3, #0]
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80057d4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057e0:	2b40      	cmp	r3, #64	; 0x40
 80057e2:	d007      	beq.n	80057f4 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	681a      	ldr	r2, [r3, #0]
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80057f2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	68db      	ldr	r3, [r3, #12]
 80057f8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80057fc:	d94b      	bls.n	8005896 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	685b      	ldr	r3, [r3, #4]
 8005802:	2b00      	cmp	r3, #0
 8005804:	d002      	beq.n	800580c <HAL_SPI_Transmit+0xfa>
 8005806:	8afb      	ldrh	r3, [r7, #22]
 8005808:	2b01      	cmp	r3, #1
 800580a:	d13e      	bne.n	800588a <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005810:	881a      	ldrh	r2, [r3, #0]
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800581c:	1c9a      	adds	r2, r3, #2
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005826:	b29b      	uxth	r3, r3
 8005828:	3b01      	subs	r3, #1
 800582a:	b29a      	uxth	r2, r3
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005830:	e02b      	b.n	800588a <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	689b      	ldr	r3, [r3, #8]
 8005838:	f003 0302 	and.w	r3, r3, #2
 800583c:	2b02      	cmp	r3, #2
 800583e:	d112      	bne.n	8005866 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005844:	881a      	ldrh	r2, [r3, #0]
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005850:	1c9a      	adds	r2, r3, #2
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800585a:	b29b      	uxth	r3, r3
 800585c:	3b01      	subs	r3, #1
 800585e:	b29a      	uxth	r2, r3
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005864:	e011      	b.n	800588a <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005866:	f7fd fa89 	bl	8002d7c <HAL_GetTick>
 800586a:	4602      	mov	r2, r0
 800586c:	69bb      	ldr	r3, [r7, #24]
 800586e:	1ad3      	subs	r3, r2, r3
 8005870:	683a      	ldr	r2, [r7, #0]
 8005872:	429a      	cmp	r2, r3
 8005874:	d803      	bhi.n	800587e <HAL_SPI_Transmit+0x16c>
 8005876:	683b      	ldr	r3, [r7, #0]
 8005878:	f1b3 3fff 	cmp.w	r3, #4294967295
 800587c:	d102      	bne.n	8005884 <HAL_SPI_Transmit+0x172>
 800587e:	683b      	ldr	r3, [r7, #0]
 8005880:	2b00      	cmp	r3, #0
 8005882:	d102      	bne.n	800588a <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8005884:	2303      	movs	r3, #3
 8005886:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005888:	e0a4      	b.n	80059d4 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800588e:	b29b      	uxth	r3, r3
 8005890:	2b00      	cmp	r3, #0
 8005892:	d1ce      	bne.n	8005832 <HAL_SPI_Transmit+0x120>
 8005894:	e07c      	b.n	8005990 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	685b      	ldr	r3, [r3, #4]
 800589a:	2b00      	cmp	r3, #0
 800589c:	d002      	beq.n	80058a4 <HAL_SPI_Transmit+0x192>
 800589e:	8afb      	ldrh	r3, [r7, #22]
 80058a0:	2b01      	cmp	r3, #1
 80058a2:	d170      	bne.n	8005986 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80058a8:	b29b      	uxth	r3, r3
 80058aa:	2b01      	cmp	r3, #1
 80058ac:	d912      	bls.n	80058d4 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058b2:	881a      	ldrh	r2, [r3, #0]
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058be:	1c9a      	adds	r2, r3, #2
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80058c8:	b29b      	uxth	r3, r3
 80058ca:	3b02      	subs	r3, #2
 80058cc:	b29a      	uxth	r2, r3
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	87da      	strh	r2, [r3, #62]	; 0x3e
 80058d2:	e058      	b.n	8005986 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	330c      	adds	r3, #12
 80058de:	7812      	ldrb	r2, [r2, #0]
 80058e0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058e6:	1c5a      	adds	r2, r3, #1
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80058f0:	b29b      	uxth	r3, r3
 80058f2:	3b01      	subs	r3, #1
 80058f4:	b29a      	uxth	r2, r3
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 80058fa:	e044      	b.n	8005986 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	689b      	ldr	r3, [r3, #8]
 8005902:	f003 0302 	and.w	r3, r3, #2
 8005906:	2b02      	cmp	r3, #2
 8005908:	d12b      	bne.n	8005962 <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800590e:	b29b      	uxth	r3, r3
 8005910:	2b01      	cmp	r3, #1
 8005912:	d912      	bls.n	800593a <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005918:	881a      	ldrh	r2, [r3, #0]
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005924:	1c9a      	adds	r2, r3, #2
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800592e:	b29b      	uxth	r3, r3
 8005930:	3b02      	subs	r3, #2
 8005932:	b29a      	uxth	r2, r3
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005938:	e025      	b.n	8005986 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	330c      	adds	r3, #12
 8005944:	7812      	ldrb	r2, [r2, #0]
 8005946:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800594c:	1c5a      	adds	r2, r3, #1
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005956:	b29b      	uxth	r3, r3
 8005958:	3b01      	subs	r3, #1
 800595a:	b29a      	uxth	r2, r3
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005960:	e011      	b.n	8005986 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005962:	f7fd fa0b 	bl	8002d7c <HAL_GetTick>
 8005966:	4602      	mov	r2, r0
 8005968:	69bb      	ldr	r3, [r7, #24]
 800596a:	1ad3      	subs	r3, r2, r3
 800596c:	683a      	ldr	r2, [r7, #0]
 800596e:	429a      	cmp	r2, r3
 8005970:	d803      	bhi.n	800597a <HAL_SPI_Transmit+0x268>
 8005972:	683b      	ldr	r3, [r7, #0]
 8005974:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005978:	d102      	bne.n	8005980 <HAL_SPI_Transmit+0x26e>
 800597a:	683b      	ldr	r3, [r7, #0]
 800597c:	2b00      	cmp	r3, #0
 800597e:	d102      	bne.n	8005986 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8005980:	2303      	movs	r3, #3
 8005982:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005984:	e026      	b.n	80059d4 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800598a:	b29b      	uxth	r3, r3
 800598c:	2b00      	cmp	r3, #0
 800598e:	d1b5      	bne.n	80058fc <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005990:	69ba      	ldr	r2, [r7, #24]
 8005992:	6839      	ldr	r1, [r7, #0]
 8005994:	68f8      	ldr	r0, [r7, #12]
 8005996:	f000 f945 	bl	8005c24 <SPI_EndRxTxTransaction>
 800599a:	4603      	mov	r3, r0
 800599c:	2b00      	cmp	r3, #0
 800599e:	d002      	beq.n	80059a6 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	2220      	movs	r2, #32
 80059a4:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	689b      	ldr	r3, [r3, #8]
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d10a      	bne.n	80059c4 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80059ae:	2300      	movs	r3, #0
 80059b0:	613b      	str	r3, [r7, #16]
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	68db      	ldr	r3, [r3, #12]
 80059b8:	613b      	str	r3, [r7, #16]
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	689b      	ldr	r3, [r3, #8]
 80059c0:	613b      	str	r3, [r7, #16]
 80059c2:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d002      	beq.n	80059d2 <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 80059cc:	2301      	movs	r3, #1
 80059ce:	77fb      	strb	r3, [r7, #31]
 80059d0:	e000      	b.n	80059d4 <HAL_SPI_Transmit+0x2c2>
  }

error:
 80059d2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	2201      	movs	r2, #1
 80059d8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	2200      	movs	r2, #0
 80059e0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80059e4:	7ffb      	ldrb	r3, [r7, #31]
}
 80059e6:	4618      	mov	r0, r3
 80059e8:	3720      	adds	r7, #32
 80059ea:	46bd      	mov	sp, r7
 80059ec:	bd80      	pop	{r7, pc}
	...

080059f0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80059f0:	b580      	push	{r7, lr}
 80059f2:	b088      	sub	sp, #32
 80059f4:	af00      	add	r7, sp, #0
 80059f6:	60f8      	str	r0, [r7, #12]
 80059f8:	60b9      	str	r1, [r7, #8]
 80059fa:	603b      	str	r3, [r7, #0]
 80059fc:	4613      	mov	r3, r2
 80059fe:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005a00:	f7fd f9bc 	bl	8002d7c <HAL_GetTick>
 8005a04:	4602      	mov	r2, r0
 8005a06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a08:	1a9b      	subs	r3, r3, r2
 8005a0a:	683a      	ldr	r2, [r7, #0]
 8005a0c:	4413      	add	r3, r2
 8005a0e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005a10:	f7fd f9b4 	bl	8002d7c <HAL_GetTick>
 8005a14:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005a16:	4b39      	ldr	r3, [pc, #228]	; (8005afc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	015b      	lsls	r3, r3, #5
 8005a1c:	0d1b      	lsrs	r3, r3, #20
 8005a1e:	69fa      	ldr	r2, [r7, #28]
 8005a20:	fb02 f303 	mul.w	r3, r2, r3
 8005a24:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005a26:	e054      	b.n	8005ad2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005a28:	683b      	ldr	r3, [r7, #0]
 8005a2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a2e:	d050      	beq.n	8005ad2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005a30:	f7fd f9a4 	bl	8002d7c <HAL_GetTick>
 8005a34:	4602      	mov	r2, r0
 8005a36:	69bb      	ldr	r3, [r7, #24]
 8005a38:	1ad3      	subs	r3, r2, r3
 8005a3a:	69fa      	ldr	r2, [r7, #28]
 8005a3c:	429a      	cmp	r2, r3
 8005a3e:	d902      	bls.n	8005a46 <SPI_WaitFlagStateUntilTimeout+0x56>
 8005a40:	69fb      	ldr	r3, [r7, #28]
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d13d      	bne.n	8005ac2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	685a      	ldr	r2, [r3, #4]
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005a54:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	685b      	ldr	r3, [r3, #4]
 8005a5a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005a5e:	d111      	bne.n	8005a84 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	689b      	ldr	r3, [r3, #8]
 8005a64:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005a68:	d004      	beq.n	8005a74 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	689b      	ldr	r3, [r3, #8]
 8005a6e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005a72:	d107      	bne.n	8005a84 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	681a      	ldr	r2, [r3, #0]
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005a82:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a88:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005a8c:	d10f      	bne.n	8005aae <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	681a      	ldr	r2, [r3, #0]
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005a9c:	601a      	str	r2, [r3, #0]
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	681a      	ldr	r2, [r3, #0]
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005aac:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	2201      	movs	r2, #1
 8005ab2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	2200      	movs	r2, #0
 8005aba:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8005abe:	2303      	movs	r3, #3
 8005ac0:	e017      	b.n	8005af2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8005ac2:	697b      	ldr	r3, [r7, #20]
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d101      	bne.n	8005acc <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005ac8:	2300      	movs	r3, #0
 8005aca:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005acc:	697b      	ldr	r3, [r7, #20]
 8005ace:	3b01      	subs	r3, #1
 8005ad0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	689a      	ldr	r2, [r3, #8]
 8005ad8:	68bb      	ldr	r3, [r7, #8]
 8005ada:	4013      	ands	r3, r2
 8005adc:	68ba      	ldr	r2, [r7, #8]
 8005ade:	429a      	cmp	r2, r3
 8005ae0:	bf0c      	ite	eq
 8005ae2:	2301      	moveq	r3, #1
 8005ae4:	2300      	movne	r3, #0
 8005ae6:	b2db      	uxtb	r3, r3
 8005ae8:	461a      	mov	r2, r3
 8005aea:	79fb      	ldrb	r3, [r7, #7]
 8005aec:	429a      	cmp	r2, r3
 8005aee:	d19b      	bne.n	8005a28 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005af0:	2300      	movs	r3, #0
}
 8005af2:	4618      	mov	r0, r3
 8005af4:	3720      	adds	r7, #32
 8005af6:	46bd      	mov	sp, r7
 8005af8:	bd80      	pop	{r7, pc}
 8005afa:	bf00      	nop
 8005afc:	2000001c 	.word	0x2000001c

08005b00 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005b00:	b580      	push	{r7, lr}
 8005b02:	b088      	sub	sp, #32
 8005b04:	af00      	add	r7, sp, #0
 8005b06:	60f8      	str	r0, [r7, #12]
 8005b08:	60b9      	str	r1, [r7, #8]
 8005b0a:	607a      	str	r2, [r7, #4]
 8005b0c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8005b0e:	f7fd f935 	bl	8002d7c <HAL_GetTick>
 8005b12:	4602      	mov	r2, r0
 8005b14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b16:	1a9b      	subs	r3, r3, r2
 8005b18:	683a      	ldr	r2, [r7, #0]
 8005b1a:	4413      	add	r3, r2
 8005b1c:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005b1e:	f7fd f92d 	bl	8002d7c <HAL_GetTick>
 8005b22:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8005b24:	4b3e      	ldr	r3, [pc, #248]	; (8005c20 <SPI_WaitFifoStateUntilTimeout+0x120>)
 8005b26:	681a      	ldr	r2, [r3, #0]
 8005b28:	4613      	mov	r3, r2
 8005b2a:	009b      	lsls	r3, r3, #2
 8005b2c:	4413      	add	r3, r2
 8005b2e:	00da      	lsls	r2, r3, #3
 8005b30:	1ad3      	subs	r3, r2, r3
 8005b32:	0d1b      	lsrs	r3, r3, #20
 8005b34:	69fa      	ldr	r2, [r7, #28]
 8005b36:	fb02 f303 	mul.w	r3, r2, r3
 8005b3a:	613b      	str	r3, [r7, #16]

  while ((hspi->Instance->SR & Fifo) != State)
 8005b3c:	e062      	b.n	8005c04 <SPI_WaitFifoStateUntilTimeout+0x104>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8005b3e:	68bb      	ldr	r3, [r7, #8]
 8005b40:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8005b44:	d109      	bne.n	8005b5a <SPI_WaitFifoStateUntilTimeout+0x5a>
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d106      	bne.n	8005b5a <SPI_WaitFifoStateUntilTimeout+0x5a>
    {
      /* Flush Data Register by a blank read */
      tmpreg = READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	330c      	adds	r3, #12
 8005b52:	781b      	ldrb	r3, [r3, #0]
 8005b54:	b2db      	uxtb	r3, r3
 8005b56:	617b      	str	r3, [r7, #20]
      /* To avoid GCC warning */
      UNUSED(tmpreg);
 8005b58:	697b      	ldr	r3, [r7, #20]
    }

    if (Timeout != HAL_MAX_DELAY)
 8005b5a:	683b      	ldr	r3, [r7, #0]
 8005b5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b60:	d050      	beq.n	8005c04 <SPI_WaitFifoStateUntilTimeout+0x104>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005b62:	f7fd f90b 	bl	8002d7c <HAL_GetTick>
 8005b66:	4602      	mov	r2, r0
 8005b68:	69bb      	ldr	r3, [r7, #24]
 8005b6a:	1ad3      	subs	r3, r2, r3
 8005b6c:	69fa      	ldr	r2, [r7, #28]
 8005b6e:	429a      	cmp	r2, r3
 8005b70:	d902      	bls.n	8005b78 <SPI_WaitFifoStateUntilTimeout+0x78>
 8005b72:	69fb      	ldr	r3, [r7, #28]
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d13d      	bne.n	8005bf4 <SPI_WaitFifoStateUntilTimeout+0xf4>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	685a      	ldr	r2, [r3, #4]
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005b86:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	685b      	ldr	r3, [r3, #4]
 8005b8c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005b90:	d111      	bne.n	8005bb6 <SPI_WaitFifoStateUntilTimeout+0xb6>
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	689b      	ldr	r3, [r3, #8]
 8005b96:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005b9a:	d004      	beq.n	8005ba6 <SPI_WaitFifoStateUntilTimeout+0xa6>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	689b      	ldr	r3, [r3, #8]
 8005ba0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005ba4:	d107      	bne.n	8005bb6 <SPI_WaitFifoStateUntilTimeout+0xb6>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	681a      	ldr	r2, [r3, #0]
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005bb4:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005bbe:	d10f      	bne.n	8005be0 <SPI_WaitFifoStateUntilTimeout+0xe0>
        {
          SPI_RESET_CRC(hspi);
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	681a      	ldr	r2, [r3, #0]
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005bce:	601a      	str	r2, [r3, #0]
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	681a      	ldr	r2, [r3, #0]
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005bde:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	2201      	movs	r2, #1
 8005be4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	2200      	movs	r2, #0
 8005bec:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8005bf0:	2303      	movs	r3, #3
 8005bf2:	e010      	b.n	8005c16 <SPI_WaitFifoStateUntilTimeout+0x116>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8005bf4:	693b      	ldr	r3, [r7, #16]
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d101      	bne.n	8005bfe <SPI_WaitFifoStateUntilTimeout+0xfe>
      {
        tmp_timeout = 0U;
 8005bfa:	2300      	movs	r3, #0
 8005bfc:	61fb      	str	r3, [r7, #28]
      }      
      count--;
 8005bfe:	693b      	ldr	r3, [r7, #16]
 8005c00:	3b01      	subs	r3, #1
 8005c02:	613b      	str	r3, [r7, #16]
  while ((hspi->Instance->SR & Fifo) != State)
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	689a      	ldr	r2, [r3, #8]
 8005c0a:	68bb      	ldr	r3, [r7, #8]
 8005c0c:	4013      	ands	r3, r2
 8005c0e:	687a      	ldr	r2, [r7, #4]
 8005c10:	429a      	cmp	r2, r3
 8005c12:	d194      	bne.n	8005b3e <SPI_WaitFifoStateUntilTimeout+0x3e>
    }
  }

  return HAL_OK;
 8005c14:	2300      	movs	r3, #0
}
 8005c16:	4618      	mov	r0, r3
 8005c18:	3720      	adds	r7, #32
 8005c1a:	46bd      	mov	sp, r7
 8005c1c:	bd80      	pop	{r7, pc}
 8005c1e:	bf00      	nop
 8005c20:	2000001c 	.word	0x2000001c

08005c24 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005c24:	b580      	push	{r7, lr}
 8005c26:	b086      	sub	sp, #24
 8005c28:	af02      	add	r7, sp, #8
 8005c2a:	60f8      	str	r0, [r7, #12]
 8005c2c:	60b9      	str	r1, [r7, #8]
 8005c2e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	9300      	str	r3, [sp, #0]
 8005c34:	68bb      	ldr	r3, [r7, #8]
 8005c36:	2200      	movs	r2, #0
 8005c38:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8005c3c:	68f8      	ldr	r0, [r7, #12]
 8005c3e:	f7ff ff5f 	bl	8005b00 <SPI_WaitFifoStateUntilTimeout>
 8005c42:	4603      	mov	r3, r0
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d007      	beq.n	8005c58 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005c4c:	f043 0220 	orr.w	r2, r3, #32
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005c54:	2303      	movs	r3, #3
 8005c56:	e027      	b.n	8005ca8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	9300      	str	r3, [sp, #0]
 8005c5c:	68bb      	ldr	r3, [r7, #8]
 8005c5e:	2200      	movs	r2, #0
 8005c60:	2180      	movs	r1, #128	; 0x80
 8005c62:	68f8      	ldr	r0, [r7, #12]
 8005c64:	f7ff fec4 	bl	80059f0 <SPI_WaitFlagStateUntilTimeout>
 8005c68:	4603      	mov	r3, r0
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d007      	beq.n	8005c7e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005c72:	f043 0220 	orr.w	r2, r3, #32
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005c7a:	2303      	movs	r3, #3
 8005c7c:	e014      	b.n	8005ca8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	9300      	str	r3, [sp, #0]
 8005c82:	68bb      	ldr	r3, [r7, #8]
 8005c84:	2200      	movs	r2, #0
 8005c86:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8005c8a:	68f8      	ldr	r0, [r7, #12]
 8005c8c:	f7ff ff38 	bl	8005b00 <SPI_WaitFifoStateUntilTimeout>
 8005c90:	4603      	mov	r3, r0
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d007      	beq.n	8005ca6 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005c9a:	f043 0220 	orr.w	r2, r3, #32
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005ca2:	2303      	movs	r3, #3
 8005ca4:	e000      	b.n	8005ca8 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8005ca6:	2300      	movs	r3, #0
}
 8005ca8:	4618      	mov	r0, r3
 8005caa:	3710      	adds	r7, #16
 8005cac:	46bd      	mov	sp, r7
 8005cae:	bd80      	pop	{r7, pc}

08005cb0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005cb0:	b580      	push	{r7, lr}
 8005cb2:	b082      	sub	sp, #8
 8005cb4:	af00      	add	r7, sp, #0
 8005cb6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d101      	bne.n	8005cc2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005cbe:	2301      	movs	r3, #1
 8005cc0:	e049      	b.n	8005d56 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005cc8:	b2db      	uxtb	r3, r3
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d106      	bne.n	8005cdc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	2200      	movs	r2, #0
 8005cd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005cd6:	6878      	ldr	r0, [r7, #4]
 8005cd8:	f7fb feae 	bl	8001a38 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	2202      	movs	r2, #2
 8005ce0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681a      	ldr	r2, [r3, #0]
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	3304      	adds	r3, #4
 8005cec:	4619      	mov	r1, r3
 8005cee:	4610      	mov	r0, r2
 8005cf0:	f000 fac6 	bl	8006280 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	2201      	movs	r2, #1
 8005cf8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	2201      	movs	r2, #1
 8005d00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	2201      	movs	r2, #1
 8005d08:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	2201      	movs	r2, #1
 8005d10:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	2201      	movs	r2, #1
 8005d18:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	2201      	movs	r2, #1
 8005d20:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	2201      	movs	r2, #1
 8005d28:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	2201      	movs	r2, #1
 8005d30:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	2201      	movs	r2, #1
 8005d38:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	2201      	movs	r2, #1
 8005d40:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	2201      	movs	r2, #1
 8005d48:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	2201      	movs	r2, #1
 8005d50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005d54:	2300      	movs	r3, #0
}
 8005d56:	4618      	mov	r0, r3
 8005d58:	3708      	adds	r7, #8
 8005d5a:	46bd      	mov	sp, r7
 8005d5c:	bd80      	pop	{r7, pc}
	...

08005d60 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005d60:	b480      	push	{r7}
 8005d62:	b085      	sub	sp, #20
 8005d64:	af00      	add	r7, sp, #0
 8005d66:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d6e:	b2db      	uxtb	r3, r3
 8005d70:	2b01      	cmp	r3, #1
 8005d72:	d001      	beq.n	8005d78 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005d74:	2301      	movs	r3, #1
 8005d76:	e054      	b.n	8005e22 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	2202      	movs	r2, #2
 8005d7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	68da      	ldr	r2, [r3, #12]
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	f042 0201 	orr.w	r2, r2, #1
 8005d8e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	4a26      	ldr	r2, [pc, #152]	; (8005e30 <HAL_TIM_Base_Start_IT+0xd0>)
 8005d96:	4293      	cmp	r3, r2
 8005d98:	d022      	beq.n	8005de0 <HAL_TIM_Base_Start_IT+0x80>
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005da2:	d01d      	beq.n	8005de0 <HAL_TIM_Base_Start_IT+0x80>
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	4a22      	ldr	r2, [pc, #136]	; (8005e34 <HAL_TIM_Base_Start_IT+0xd4>)
 8005daa:	4293      	cmp	r3, r2
 8005dac:	d018      	beq.n	8005de0 <HAL_TIM_Base_Start_IT+0x80>
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	4a21      	ldr	r2, [pc, #132]	; (8005e38 <HAL_TIM_Base_Start_IT+0xd8>)
 8005db4:	4293      	cmp	r3, r2
 8005db6:	d013      	beq.n	8005de0 <HAL_TIM_Base_Start_IT+0x80>
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	4a1f      	ldr	r2, [pc, #124]	; (8005e3c <HAL_TIM_Base_Start_IT+0xdc>)
 8005dbe:	4293      	cmp	r3, r2
 8005dc0:	d00e      	beq.n	8005de0 <HAL_TIM_Base_Start_IT+0x80>
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	4a1e      	ldr	r2, [pc, #120]	; (8005e40 <HAL_TIM_Base_Start_IT+0xe0>)
 8005dc8:	4293      	cmp	r3, r2
 8005dca:	d009      	beq.n	8005de0 <HAL_TIM_Base_Start_IT+0x80>
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	4a1c      	ldr	r2, [pc, #112]	; (8005e44 <HAL_TIM_Base_Start_IT+0xe4>)
 8005dd2:	4293      	cmp	r3, r2
 8005dd4:	d004      	beq.n	8005de0 <HAL_TIM_Base_Start_IT+0x80>
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	4a1b      	ldr	r2, [pc, #108]	; (8005e48 <HAL_TIM_Base_Start_IT+0xe8>)
 8005ddc:	4293      	cmp	r3, r2
 8005dde:	d115      	bne.n	8005e0c <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	689a      	ldr	r2, [r3, #8]
 8005de6:	4b19      	ldr	r3, [pc, #100]	; (8005e4c <HAL_TIM_Base_Start_IT+0xec>)
 8005de8:	4013      	ands	r3, r2
 8005dea:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	2b06      	cmp	r3, #6
 8005df0:	d015      	beq.n	8005e1e <HAL_TIM_Base_Start_IT+0xbe>
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005df8:	d011      	beq.n	8005e1e <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	681a      	ldr	r2, [r3, #0]
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	f042 0201 	orr.w	r2, r2, #1
 8005e08:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005e0a:	e008      	b.n	8005e1e <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	681a      	ldr	r2, [r3, #0]
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	f042 0201 	orr.w	r2, r2, #1
 8005e1a:	601a      	str	r2, [r3, #0]
 8005e1c:	e000      	b.n	8005e20 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005e1e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005e20:	2300      	movs	r3, #0
}
 8005e22:	4618      	mov	r0, r3
 8005e24:	3714      	adds	r7, #20
 8005e26:	46bd      	mov	sp, r7
 8005e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e2c:	4770      	bx	lr
 8005e2e:	bf00      	nop
 8005e30:	40010000 	.word	0x40010000
 8005e34:	40000400 	.word	0x40000400
 8005e38:	40000800 	.word	0x40000800
 8005e3c:	40000c00 	.word	0x40000c00
 8005e40:	40010400 	.word	0x40010400
 8005e44:	40014000 	.word	0x40014000
 8005e48:	40001800 	.word	0x40001800
 8005e4c:	00010007 	.word	0x00010007

08005e50 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005e50:	b580      	push	{r7, lr}
 8005e52:	b082      	sub	sp, #8
 8005e54:	af00      	add	r7, sp, #0
 8005e56:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	691b      	ldr	r3, [r3, #16]
 8005e5e:	f003 0302 	and.w	r3, r3, #2
 8005e62:	2b02      	cmp	r3, #2
 8005e64:	d122      	bne.n	8005eac <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	68db      	ldr	r3, [r3, #12]
 8005e6c:	f003 0302 	and.w	r3, r3, #2
 8005e70:	2b02      	cmp	r3, #2
 8005e72:	d11b      	bne.n	8005eac <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	f06f 0202 	mvn.w	r2, #2
 8005e7c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	2201      	movs	r2, #1
 8005e82:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	699b      	ldr	r3, [r3, #24]
 8005e8a:	f003 0303 	and.w	r3, r3, #3
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d003      	beq.n	8005e9a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005e92:	6878      	ldr	r0, [r7, #4]
 8005e94:	f000 f9d6 	bl	8006244 <HAL_TIM_IC_CaptureCallback>
 8005e98:	e005      	b.n	8005ea6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005e9a:	6878      	ldr	r0, [r7, #4]
 8005e9c:	f000 f9c8 	bl	8006230 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ea0:	6878      	ldr	r0, [r7, #4]
 8005ea2:	f000 f9d9 	bl	8006258 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	2200      	movs	r2, #0
 8005eaa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	691b      	ldr	r3, [r3, #16]
 8005eb2:	f003 0304 	and.w	r3, r3, #4
 8005eb6:	2b04      	cmp	r3, #4
 8005eb8:	d122      	bne.n	8005f00 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	68db      	ldr	r3, [r3, #12]
 8005ec0:	f003 0304 	and.w	r3, r3, #4
 8005ec4:	2b04      	cmp	r3, #4
 8005ec6:	d11b      	bne.n	8005f00 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	f06f 0204 	mvn.w	r2, #4
 8005ed0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	2202      	movs	r2, #2
 8005ed6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	699b      	ldr	r3, [r3, #24]
 8005ede:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d003      	beq.n	8005eee <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005ee6:	6878      	ldr	r0, [r7, #4]
 8005ee8:	f000 f9ac 	bl	8006244 <HAL_TIM_IC_CaptureCallback>
 8005eec:	e005      	b.n	8005efa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005eee:	6878      	ldr	r0, [r7, #4]
 8005ef0:	f000 f99e 	bl	8006230 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ef4:	6878      	ldr	r0, [r7, #4]
 8005ef6:	f000 f9af 	bl	8006258 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	2200      	movs	r2, #0
 8005efe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	691b      	ldr	r3, [r3, #16]
 8005f06:	f003 0308 	and.w	r3, r3, #8
 8005f0a:	2b08      	cmp	r3, #8
 8005f0c:	d122      	bne.n	8005f54 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	68db      	ldr	r3, [r3, #12]
 8005f14:	f003 0308 	and.w	r3, r3, #8
 8005f18:	2b08      	cmp	r3, #8
 8005f1a:	d11b      	bne.n	8005f54 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	f06f 0208 	mvn.w	r2, #8
 8005f24:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	2204      	movs	r2, #4
 8005f2a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	69db      	ldr	r3, [r3, #28]
 8005f32:	f003 0303 	and.w	r3, r3, #3
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d003      	beq.n	8005f42 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005f3a:	6878      	ldr	r0, [r7, #4]
 8005f3c:	f000 f982 	bl	8006244 <HAL_TIM_IC_CaptureCallback>
 8005f40:	e005      	b.n	8005f4e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005f42:	6878      	ldr	r0, [r7, #4]
 8005f44:	f000 f974 	bl	8006230 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f48:	6878      	ldr	r0, [r7, #4]
 8005f4a:	f000 f985 	bl	8006258 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	2200      	movs	r2, #0
 8005f52:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	691b      	ldr	r3, [r3, #16]
 8005f5a:	f003 0310 	and.w	r3, r3, #16
 8005f5e:	2b10      	cmp	r3, #16
 8005f60:	d122      	bne.n	8005fa8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	68db      	ldr	r3, [r3, #12]
 8005f68:	f003 0310 	and.w	r3, r3, #16
 8005f6c:	2b10      	cmp	r3, #16
 8005f6e:	d11b      	bne.n	8005fa8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	f06f 0210 	mvn.w	r2, #16
 8005f78:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	2208      	movs	r2, #8
 8005f7e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	69db      	ldr	r3, [r3, #28]
 8005f86:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d003      	beq.n	8005f96 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005f8e:	6878      	ldr	r0, [r7, #4]
 8005f90:	f000 f958 	bl	8006244 <HAL_TIM_IC_CaptureCallback>
 8005f94:	e005      	b.n	8005fa2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005f96:	6878      	ldr	r0, [r7, #4]
 8005f98:	f000 f94a 	bl	8006230 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f9c:	6878      	ldr	r0, [r7, #4]
 8005f9e:	f000 f95b 	bl	8006258 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	2200      	movs	r2, #0
 8005fa6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	691b      	ldr	r3, [r3, #16]
 8005fae:	f003 0301 	and.w	r3, r3, #1
 8005fb2:	2b01      	cmp	r3, #1
 8005fb4:	d10e      	bne.n	8005fd4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	68db      	ldr	r3, [r3, #12]
 8005fbc:	f003 0301 	and.w	r3, r3, #1
 8005fc0:	2b01      	cmp	r3, #1
 8005fc2:	d107      	bne.n	8005fd4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	f06f 0201 	mvn.w	r2, #1
 8005fcc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005fce:	6878      	ldr	r0, [r7, #4]
 8005fd0:	f000 f924 	bl	800621c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	691b      	ldr	r3, [r3, #16]
 8005fda:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005fde:	2b80      	cmp	r3, #128	; 0x80
 8005fe0:	d10e      	bne.n	8006000 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	68db      	ldr	r3, [r3, #12]
 8005fe8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005fec:	2b80      	cmp	r3, #128	; 0x80
 8005fee:	d107      	bne.n	8006000 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005ff8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005ffa:	6878      	ldr	r0, [r7, #4]
 8005ffc:	f000 fb12 	bl	8006624 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	691b      	ldr	r3, [r3, #16]
 8006006:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800600a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800600e:	d10e      	bne.n	800602e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	68db      	ldr	r3, [r3, #12]
 8006016:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800601a:	2b80      	cmp	r3, #128	; 0x80
 800601c:	d107      	bne.n	800602e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8006026:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006028:	6878      	ldr	r0, [r7, #4]
 800602a:	f000 fb05 	bl	8006638 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	691b      	ldr	r3, [r3, #16]
 8006034:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006038:	2b40      	cmp	r3, #64	; 0x40
 800603a:	d10e      	bne.n	800605a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	68db      	ldr	r3, [r3, #12]
 8006042:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006046:	2b40      	cmp	r3, #64	; 0x40
 8006048:	d107      	bne.n	800605a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006052:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006054:	6878      	ldr	r0, [r7, #4]
 8006056:	f000 f909 	bl	800626c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	691b      	ldr	r3, [r3, #16]
 8006060:	f003 0320 	and.w	r3, r3, #32
 8006064:	2b20      	cmp	r3, #32
 8006066:	d10e      	bne.n	8006086 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	68db      	ldr	r3, [r3, #12]
 800606e:	f003 0320 	and.w	r3, r3, #32
 8006072:	2b20      	cmp	r3, #32
 8006074:	d107      	bne.n	8006086 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	f06f 0220 	mvn.w	r2, #32
 800607e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006080:	6878      	ldr	r0, [r7, #4]
 8006082:	f000 fac5 	bl	8006610 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006086:	bf00      	nop
 8006088:	3708      	adds	r7, #8
 800608a:	46bd      	mov	sp, r7
 800608c:	bd80      	pop	{r7, pc}
	...

08006090 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006090:	b580      	push	{r7, lr}
 8006092:	b084      	sub	sp, #16
 8006094:	af00      	add	r7, sp, #0
 8006096:	6078      	str	r0, [r7, #4]
 8006098:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80060a0:	2b01      	cmp	r3, #1
 80060a2:	d101      	bne.n	80060a8 <HAL_TIM_ConfigClockSource+0x18>
 80060a4:	2302      	movs	r3, #2
 80060a6:	e0b3      	b.n	8006210 <HAL_TIM_ConfigClockSource+0x180>
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	2201      	movs	r2, #1
 80060ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	2202      	movs	r2, #2
 80060b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	689b      	ldr	r3, [r3, #8]
 80060be:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80060c0:	68fa      	ldr	r2, [r7, #12]
 80060c2:	4b55      	ldr	r3, [pc, #340]	; (8006218 <HAL_TIM_ConfigClockSource+0x188>)
 80060c4:	4013      	ands	r3, r2
 80060c6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80060ce:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	68fa      	ldr	r2, [r7, #12]
 80060d6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80060d8:	683b      	ldr	r3, [r7, #0]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80060e0:	d03e      	beq.n	8006160 <HAL_TIM_ConfigClockSource+0xd0>
 80060e2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80060e6:	f200 8087 	bhi.w	80061f8 <HAL_TIM_ConfigClockSource+0x168>
 80060ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80060ee:	f000 8085 	beq.w	80061fc <HAL_TIM_ConfigClockSource+0x16c>
 80060f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80060f6:	d87f      	bhi.n	80061f8 <HAL_TIM_ConfigClockSource+0x168>
 80060f8:	2b70      	cmp	r3, #112	; 0x70
 80060fa:	d01a      	beq.n	8006132 <HAL_TIM_ConfigClockSource+0xa2>
 80060fc:	2b70      	cmp	r3, #112	; 0x70
 80060fe:	d87b      	bhi.n	80061f8 <HAL_TIM_ConfigClockSource+0x168>
 8006100:	2b60      	cmp	r3, #96	; 0x60
 8006102:	d050      	beq.n	80061a6 <HAL_TIM_ConfigClockSource+0x116>
 8006104:	2b60      	cmp	r3, #96	; 0x60
 8006106:	d877      	bhi.n	80061f8 <HAL_TIM_ConfigClockSource+0x168>
 8006108:	2b50      	cmp	r3, #80	; 0x50
 800610a:	d03c      	beq.n	8006186 <HAL_TIM_ConfigClockSource+0xf6>
 800610c:	2b50      	cmp	r3, #80	; 0x50
 800610e:	d873      	bhi.n	80061f8 <HAL_TIM_ConfigClockSource+0x168>
 8006110:	2b40      	cmp	r3, #64	; 0x40
 8006112:	d058      	beq.n	80061c6 <HAL_TIM_ConfigClockSource+0x136>
 8006114:	2b40      	cmp	r3, #64	; 0x40
 8006116:	d86f      	bhi.n	80061f8 <HAL_TIM_ConfigClockSource+0x168>
 8006118:	2b30      	cmp	r3, #48	; 0x30
 800611a:	d064      	beq.n	80061e6 <HAL_TIM_ConfigClockSource+0x156>
 800611c:	2b30      	cmp	r3, #48	; 0x30
 800611e:	d86b      	bhi.n	80061f8 <HAL_TIM_ConfigClockSource+0x168>
 8006120:	2b20      	cmp	r3, #32
 8006122:	d060      	beq.n	80061e6 <HAL_TIM_ConfigClockSource+0x156>
 8006124:	2b20      	cmp	r3, #32
 8006126:	d867      	bhi.n	80061f8 <HAL_TIM_ConfigClockSource+0x168>
 8006128:	2b00      	cmp	r3, #0
 800612a:	d05c      	beq.n	80061e6 <HAL_TIM_ConfigClockSource+0x156>
 800612c:	2b10      	cmp	r3, #16
 800612e:	d05a      	beq.n	80061e6 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8006130:	e062      	b.n	80061f8 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	6818      	ldr	r0, [r3, #0]
 8006136:	683b      	ldr	r3, [r7, #0]
 8006138:	6899      	ldr	r1, [r3, #8]
 800613a:	683b      	ldr	r3, [r7, #0]
 800613c:	685a      	ldr	r2, [r3, #4]
 800613e:	683b      	ldr	r3, [r7, #0]
 8006140:	68db      	ldr	r3, [r3, #12]
 8006142:	f000 f9b7 	bl	80064b4 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	689b      	ldr	r3, [r3, #8]
 800614c:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006154:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	68fa      	ldr	r2, [r7, #12]
 800615c:	609a      	str	r2, [r3, #8]
      break;
 800615e:	e04e      	b.n	80061fe <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	6818      	ldr	r0, [r3, #0]
 8006164:	683b      	ldr	r3, [r7, #0]
 8006166:	6899      	ldr	r1, [r3, #8]
 8006168:	683b      	ldr	r3, [r7, #0]
 800616a:	685a      	ldr	r2, [r3, #4]
 800616c:	683b      	ldr	r3, [r7, #0]
 800616e:	68db      	ldr	r3, [r3, #12]
 8006170:	f000 f9a0 	bl	80064b4 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	689a      	ldr	r2, [r3, #8]
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006182:	609a      	str	r2, [r3, #8]
      break;
 8006184:	e03b      	b.n	80061fe <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	6818      	ldr	r0, [r3, #0]
 800618a:	683b      	ldr	r3, [r7, #0]
 800618c:	6859      	ldr	r1, [r3, #4]
 800618e:	683b      	ldr	r3, [r7, #0]
 8006190:	68db      	ldr	r3, [r3, #12]
 8006192:	461a      	mov	r2, r3
 8006194:	f000 f914 	bl	80063c0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	2150      	movs	r1, #80	; 0x50
 800619e:	4618      	mov	r0, r3
 80061a0:	f000 f96d 	bl	800647e <TIM_ITRx_SetConfig>
      break;
 80061a4:	e02b      	b.n	80061fe <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	6818      	ldr	r0, [r3, #0]
 80061aa:	683b      	ldr	r3, [r7, #0]
 80061ac:	6859      	ldr	r1, [r3, #4]
 80061ae:	683b      	ldr	r3, [r7, #0]
 80061b0:	68db      	ldr	r3, [r3, #12]
 80061b2:	461a      	mov	r2, r3
 80061b4:	f000 f933 	bl	800641e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	2160      	movs	r1, #96	; 0x60
 80061be:	4618      	mov	r0, r3
 80061c0:	f000 f95d 	bl	800647e <TIM_ITRx_SetConfig>
      break;
 80061c4:	e01b      	b.n	80061fe <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	6818      	ldr	r0, [r3, #0]
 80061ca:	683b      	ldr	r3, [r7, #0]
 80061cc:	6859      	ldr	r1, [r3, #4]
 80061ce:	683b      	ldr	r3, [r7, #0]
 80061d0:	68db      	ldr	r3, [r3, #12]
 80061d2:	461a      	mov	r2, r3
 80061d4:	f000 f8f4 	bl	80063c0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	2140      	movs	r1, #64	; 0x40
 80061de:	4618      	mov	r0, r3
 80061e0:	f000 f94d 	bl	800647e <TIM_ITRx_SetConfig>
      break;
 80061e4:	e00b      	b.n	80061fe <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	681a      	ldr	r2, [r3, #0]
 80061ea:	683b      	ldr	r3, [r7, #0]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	4619      	mov	r1, r3
 80061f0:	4610      	mov	r0, r2
 80061f2:	f000 f944 	bl	800647e <TIM_ITRx_SetConfig>
        break;
 80061f6:	e002      	b.n	80061fe <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80061f8:	bf00      	nop
 80061fa:	e000      	b.n	80061fe <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80061fc:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	2201      	movs	r2, #1
 8006202:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	2200      	movs	r2, #0
 800620a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800620e:	2300      	movs	r3, #0
}
 8006210:	4618      	mov	r0, r3
 8006212:	3710      	adds	r7, #16
 8006214:	46bd      	mov	sp, r7
 8006216:	bd80      	pop	{r7, pc}
 8006218:	fffeff88 	.word	0xfffeff88

0800621c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800621c:	b480      	push	{r7}
 800621e:	b083      	sub	sp, #12
 8006220:	af00      	add	r7, sp, #0
 8006222:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8006224:	bf00      	nop
 8006226:	370c      	adds	r7, #12
 8006228:	46bd      	mov	sp, r7
 800622a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800622e:	4770      	bx	lr

08006230 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006230:	b480      	push	{r7}
 8006232:	b083      	sub	sp, #12
 8006234:	af00      	add	r7, sp, #0
 8006236:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006238:	bf00      	nop
 800623a:	370c      	adds	r7, #12
 800623c:	46bd      	mov	sp, r7
 800623e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006242:	4770      	bx	lr

08006244 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006244:	b480      	push	{r7}
 8006246:	b083      	sub	sp, #12
 8006248:	af00      	add	r7, sp, #0
 800624a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800624c:	bf00      	nop
 800624e:	370c      	adds	r7, #12
 8006250:	46bd      	mov	sp, r7
 8006252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006256:	4770      	bx	lr

08006258 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006258:	b480      	push	{r7}
 800625a:	b083      	sub	sp, #12
 800625c:	af00      	add	r7, sp, #0
 800625e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006260:	bf00      	nop
 8006262:	370c      	adds	r7, #12
 8006264:	46bd      	mov	sp, r7
 8006266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800626a:	4770      	bx	lr

0800626c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800626c:	b480      	push	{r7}
 800626e:	b083      	sub	sp, #12
 8006270:	af00      	add	r7, sp, #0
 8006272:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006274:	bf00      	nop
 8006276:	370c      	adds	r7, #12
 8006278:	46bd      	mov	sp, r7
 800627a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800627e:	4770      	bx	lr

08006280 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006280:	b480      	push	{r7}
 8006282:	b085      	sub	sp, #20
 8006284:	af00      	add	r7, sp, #0
 8006286:	6078      	str	r0, [r7, #4]
 8006288:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	4a40      	ldr	r2, [pc, #256]	; (8006394 <TIM_Base_SetConfig+0x114>)
 8006294:	4293      	cmp	r3, r2
 8006296:	d013      	beq.n	80062c0 <TIM_Base_SetConfig+0x40>
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800629e:	d00f      	beq.n	80062c0 <TIM_Base_SetConfig+0x40>
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	4a3d      	ldr	r2, [pc, #244]	; (8006398 <TIM_Base_SetConfig+0x118>)
 80062a4:	4293      	cmp	r3, r2
 80062a6:	d00b      	beq.n	80062c0 <TIM_Base_SetConfig+0x40>
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	4a3c      	ldr	r2, [pc, #240]	; (800639c <TIM_Base_SetConfig+0x11c>)
 80062ac:	4293      	cmp	r3, r2
 80062ae:	d007      	beq.n	80062c0 <TIM_Base_SetConfig+0x40>
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	4a3b      	ldr	r2, [pc, #236]	; (80063a0 <TIM_Base_SetConfig+0x120>)
 80062b4:	4293      	cmp	r3, r2
 80062b6:	d003      	beq.n	80062c0 <TIM_Base_SetConfig+0x40>
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	4a3a      	ldr	r2, [pc, #232]	; (80063a4 <TIM_Base_SetConfig+0x124>)
 80062bc:	4293      	cmp	r3, r2
 80062be:	d108      	bne.n	80062d2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80062c6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80062c8:	683b      	ldr	r3, [r7, #0]
 80062ca:	685b      	ldr	r3, [r3, #4]
 80062cc:	68fa      	ldr	r2, [r7, #12]
 80062ce:	4313      	orrs	r3, r2
 80062d0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	4a2f      	ldr	r2, [pc, #188]	; (8006394 <TIM_Base_SetConfig+0x114>)
 80062d6:	4293      	cmp	r3, r2
 80062d8:	d02b      	beq.n	8006332 <TIM_Base_SetConfig+0xb2>
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80062e0:	d027      	beq.n	8006332 <TIM_Base_SetConfig+0xb2>
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	4a2c      	ldr	r2, [pc, #176]	; (8006398 <TIM_Base_SetConfig+0x118>)
 80062e6:	4293      	cmp	r3, r2
 80062e8:	d023      	beq.n	8006332 <TIM_Base_SetConfig+0xb2>
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	4a2b      	ldr	r2, [pc, #172]	; (800639c <TIM_Base_SetConfig+0x11c>)
 80062ee:	4293      	cmp	r3, r2
 80062f0:	d01f      	beq.n	8006332 <TIM_Base_SetConfig+0xb2>
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	4a2a      	ldr	r2, [pc, #168]	; (80063a0 <TIM_Base_SetConfig+0x120>)
 80062f6:	4293      	cmp	r3, r2
 80062f8:	d01b      	beq.n	8006332 <TIM_Base_SetConfig+0xb2>
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	4a29      	ldr	r2, [pc, #164]	; (80063a4 <TIM_Base_SetConfig+0x124>)
 80062fe:	4293      	cmp	r3, r2
 8006300:	d017      	beq.n	8006332 <TIM_Base_SetConfig+0xb2>
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	4a28      	ldr	r2, [pc, #160]	; (80063a8 <TIM_Base_SetConfig+0x128>)
 8006306:	4293      	cmp	r3, r2
 8006308:	d013      	beq.n	8006332 <TIM_Base_SetConfig+0xb2>
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	4a27      	ldr	r2, [pc, #156]	; (80063ac <TIM_Base_SetConfig+0x12c>)
 800630e:	4293      	cmp	r3, r2
 8006310:	d00f      	beq.n	8006332 <TIM_Base_SetConfig+0xb2>
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	4a26      	ldr	r2, [pc, #152]	; (80063b0 <TIM_Base_SetConfig+0x130>)
 8006316:	4293      	cmp	r3, r2
 8006318:	d00b      	beq.n	8006332 <TIM_Base_SetConfig+0xb2>
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	4a25      	ldr	r2, [pc, #148]	; (80063b4 <TIM_Base_SetConfig+0x134>)
 800631e:	4293      	cmp	r3, r2
 8006320:	d007      	beq.n	8006332 <TIM_Base_SetConfig+0xb2>
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	4a24      	ldr	r2, [pc, #144]	; (80063b8 <TIM_Base_SetConfig+0x138>)
 8006326:	4293      	cmp	r3, r2
 8006328:	d003      	beq.n	8006332 <TIM_Base_SetConfig+0xb2>
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	4a23      	ldr	r2, [pc, #140]	; (80063bc <TIM_Base_SetConfig+0x13c>)
 800632e:	4293      	cmp	r3, r2
 8006330:	d108      	bne.n	8006344 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006338:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800633a:	683b      	ldr	r3, [r7, #0]
 800633c:	68db      	ldr	r3, [r3, #12]
 800633e:	68fa      	ldr	r2, [r7, #12]
 8006340:	4313      	orrs	r3, r2
 8006342:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800634a:	683b      	ldr	r3, [r7, #0]
 800634c:	695b      	ldr	r3, [r3, #20]
 800634e:	4313      	orrs	r3, r2
 8006350:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	68fa      	ldr	r2, [r7, #12]
 8006356:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006358:	683b      	ldr	r3, [r7, #0]
 800635a:	689a      	ldr	r2, [r3, #8]
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006360:	683b      	ldr	r3, [r7, #0]
 8006362:	681a      	ldr	r2, [r3, #0]
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	4a0a      	ldr	r2, [pc, #40]	; (8006394 <TIM_Base_SetConfig+0x114>)
 800636c:	4293      	cmp	r3, r2
 800636e:	d003      	beq.n	8006378 <TIM_Base_SetConfig+0xf8>
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	4a0c      	ldr	r2, [pc, #48]	; (80063a4 <TIM_Base_SetConfig+0x124>)
 8006374:	4293      	cmp	r3, r2
 8006376:	d103      	bne.n	8006380 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006378:	683b      	ldr	r3, [r7, #0]
 800637a:	691a      	ldr	r2, [r3, #16]
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	2201      	movs	r2, #1
 8006384:	615a      	str	r2, [r3, #20]
}
 8006386:	bf00      	nop
 8006388:	3714      	adds	r7, #20
 800638a:	46bd      	mov	sp, r7
 800638c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006390:	4770      	bx	lr
 8006392:	bf00      	nop
 8006394:	40010000 	.word	0x40010000
 8006398:	40000400 	.word	0x40000400
 800639c:	40000800 	.word	0x40000800
 80063a0:	40000c00 	.word	0x40000c00
 80063a4:	40010400 	.word	0x40010400
 80063a8:	40014000 	.word	0x40014000
 80063ac:	40014400 	.word	0x40014400
 80063b0:	40014800 	.word	0x40014800
 80063b4:	40001800 	.word	0x40001800
 80063b8:	40001c00 	.word	0x40001c00
 80063bc:	40002000 	.word	0x40002000

080063c0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80063c0:	b480      	push	{r7}
 80063c2:	b087      	sub	sp, #28
 80063c4:	af00      	add	r7, sp, #0
 80063c6:	60f8      	str	r0, [r7, #12]
 80063c8:	60b9      	str	r1, [r7, #8]
 80063ca:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	6a1b      	ldr	r3, [r3, #32]
 80063d0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	6a1b      	ldr	r3, [r3, #32]
 80063d6:	f023 0201 	bic.w	r2, r3, #1
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	699b      	ldr	r3, [r3, #24]
 80063e2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80063e4:	693b      	ldr	r3, [r7, #16]
 80063e6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80063ea:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	011b      	lsls	r3, r3, #4
 80063f0:	693a      	ldr	r2, [r7, #16]
 80063f2:	4313      	orrs	r3, r2
 80063f4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80063f6:	697b      	ldr	r3, [r7, #20]
 80063f8:	f023 030a 	bic.w	r3, r3, #10
 80063fc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80063fe:	697a      	ldr	r2, [r7, #20]
 8006400:	68bb      	ldr	r3, [r7, #8]
 8006402:	4313      	orrs	r3, r2
 8006404:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	693a      	ldr	r2, [r7, #16]
 800640a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	697a      	ldr	r2, [r7, #20]
 8006410:	621a      	str	r2, [r3, #32]
}
 8006412:	bf00      	nop
 8006414:	371c      	adds	r7, #28
 8006416:	46bd      	mov	sp, r7
 8006418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800641c:	4770      	bx	lr

0800641e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800641e:	b480      	push	{r7}
 8006420:	b087      	sub	sp, #28
 8006422:	af00      	add	r7, sp, #0
 8006424:	60f8      	str	r0, [r7, #12]
 8006426:	60b9      	str	r1, [r7, #8]
 8006428:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	6a1b      	ldr	r3, [r3, #32]
 800642e:	f023 0210 	bic.w	r2, r3, #16
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	699b      	ldr	r3, [r3, #24]
 800643a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	6a1b      	ldr	r3, [r3, #32]
 8006440:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006442:	697b      	ldr	r3, [r7, #20]
 8006444:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006448:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	031b      	lsls	r3, r3, #12
 800644e:	697a      	ldr	r2, [r7, #20]
 8006450:	4313      	orrs	r3, r2
 8006452:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006454:	693b      	ldr	r3, [r7, #16]
 8006456:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800645a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800645c:	68bb      	ldr	r3, [r7, #8]
 800645e:	011b      	lsls	r3, r3, #4
 8006460:	693a      	ldr	r2, [r7, #16]
 8006462:	4313      	orrs	r3, r2
 8006464:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	697a      	ldr	r2, [r7, #20]
 800646a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	693a      	ldr	r2, [r7, #16]
 8006470:	621a      	str	r2, [r3, #32]
}
 8006472:	bf00      	nop
 8006474:	371c      	adds	r7, #28
 8006476:	46bd      	mov	sp, r7
 8006478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800647c:	4770      	bx	lr

0800647e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800647e:	b480      	push	{r7}
 8006480:	b085      	sub	sp, #20
 8006482:	af00      	add	r7, sp, #0
 8006484:	6078      	str	r0, [r7, #4]
 8006486:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	689b      	ldr	r3, [r3, #8]
 800648c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006494:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006496:	683a      	ldr	r2, [r7, #0]
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	4313      	orrs	r3, r2
 800649c:	f043 0307 	orr.w	r3, r3, #7
 80064a0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	68fa      	ldr	r2, [r7, #12]
 80064a6:	609a      	str	r2, [r3, #8]
}
 80064a8:	bf00      	nop
 80064aa:	3714      	adds	r7, #20
 80064ac:	46bd      	mov	sp, r7
 80064ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064b2:	4770      	bx	lr

080064b4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80064b4:	b480      	push	{r7}
 80064b6:	b087      	sub	sp, #28
 80064b8:	af00      	add	r7, sp, #0
 80064ba:	60f8      	str	r0, [r7, #12]
 80064bc:	60b9      	str	r1, [r7, #8]
 80064be:	607a      	str	r2, [r7, #4]
 80064c0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	689b      	ldr	r3, [r3, #8]
 80064c6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80064c8:	697b      	ldr	r3, [r7, #20]
 80064ca:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80064ce:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80064d0:	683b      	ldr	r3, [r7, #0]
 80064d2:	021a      	lsls	r2, r3, #8
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	431a      	orrs	r2, r3
 80064d8:	68bb      	ldr	r3, [r7, #8]
 80064da:	4313      	orrs	r3, r2
 80064dc:	697a      	ldr	r2, [r7, #20]
 80064de:	4313      	orrs	r3, r2
 80064e0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	697a      	ldr	r2, [r7, #20]
 80064e6:	609a      	str	r2, [r3, #8]
}
 80064e8:	bf00      	nop
 80064ea:	371c      	adds	r7, #28
 80064ec:	46bd      	mov	sp, r7
 80064ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064f2:	4770      	bx	lr

080064f4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80064f4:	b480      	push	{r7}
 80064f6:	b085      	sub	sp, #20
 80064f8:	af00      	add	r7, sp, #0
 80064fa:	6078      	str	r0, [r7, #4]
 80064fc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006504:	2b01      	cmp	r3, #1
 8006506:	d101      	bne.n	800650c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006508:	2302      	movs	r3, #2
 800650a:	e06d      	b.n	80065e8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	2201      	movs	r2, #1
 8006510:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	2202      	movs	r2, #2
 8006518:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	685b      	ldr	r3, [r3, #4]
 8006522:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	689b      	ldr	r3, [r3, #8]
 800652a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	4a30      	ldr	r2, [pc, #192]	; (80065f4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006532:	4293      	cmp	r3, r2
 8006534:	d004      	beq.n	8006540 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	4a2f      	ldr	r2, [pc, #188]	; (80065f8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800653c:	4293      	cmp	r3, r2
 800653e:	d108      	bne.n	8006552 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006546:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006548:	683b      	ldr	r3, [r7, #0]
 800654a:	685b      	ldr	r3, [r3, #4]
 800654c:	68fa      	ldr	r2, [r7, #12]
 800654e:	4313      	orrs	r3, r2
 8006550:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006558:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800655a:	683b      	ldr	r3, [r7, #0]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	68fa      	ldr	r2, [r7, #12]
 8006560:	4313      	orrs	r3, r2
 8006562:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	68fa      	ldr	r2, [r7, #12]
 800656a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	4a20      	ldr	r2, [pc, #128]	; (80065f4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006572:	4293      	cmp	r3, r2
 8006574:	d022      	beq.n	80065bc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800657e:	d01d      	beq.n	80065bc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	4a1d      	ldr	r2, [pc, #116]	; (80065fc <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8006586:	4293      	cmp	r3, r2
 8006588:	d018      	beq.n	80065bc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	4a1c      	ldr	r2, [pc, #112]	; (8006600 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8006590:	4293      	cmp	r3, r2
 8006592:	d013      	beq.n	80065bc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	4a1a      	ldr	r2, [pc, #104]	; (8006604 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800659a:	4293      	cmp	r3, r2
 800659c:	d00e      	beq.n	80065bc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	4a15      	ldr	r2, [pc, #84]	; (80065f8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80065a4:	4293      	cmp	r3, r2
 80065a6:	d009      	beq.n	80065bc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	4a16      	ldr	r2, [pc, #88]	; (8006608 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80065ae:	4293      	cmp	r3, r2
 80065b0:	d004      	beq.n	80065bc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	4a15      	ldr	r2, [pc, #84]	; (800660c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80065b8:	4293      	cmp	r3, r2
 80065ba:	d10c      	bne.n	80065d6 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80065bc:	68bb      	ldr	r3, [r7, #8]
 80065be:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80065c2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80065c4:	683b      	ldr	r3, [r7, #0]
 80065c6:	689b      	ldr	r3, [r3, #8]
 80065c8:	68ba      	ldr	r2, [r7, #8]
 80065ca:	4313      	orrs	r3, r2
 80065cc:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	68ba      	ldr	r2, [r7, #8]
 80065d4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	2201      	movs	r2, #1
 80065da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	2200      	movs	r2, #0
 80065e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80065e6:	2300      	movs	r3, #0
}
 80065e8:	4618      	mov	r0, r3
 80065ea:	3714      	adds	r7, #20
 80065ec:	46bd      	mov	sp, r7
 80065ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065f2:	4770      	bx	lr
 80065f4:	40010000 	.word	0x40010000
 80065f8:	40010400 	.word	0x40010400
 80065fc:	40000400 	.word	0x40000400
 8006600:	40000800 	.word	0x40000800
 8006604:	40000c00 	.word	0x40000c00
 8006608:	40014000 	.word	0x40014000
 800660c:	40001800 	.word	0x40001800

08006610 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006610:	b480      	push	{r7}
 8006612:	b083      	sub	sp, #12
 8006614:	af00      	add	r7, sp, #0
 8006616:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006618:	bf00      	nop
 800661a:	370c      	adds	r7, #12
 800661c:	46bd      	mov	sp, r7
 800661e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006622:	4770      	bx	lr

08006624 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006624:	b480      	push	{r7}
 8006626:	b083      	sub	sp, #12
 8006628:	af00      	add	r7, sp, #0
 800662a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800662c:	bf00      	nop
 800662e:	370c      	adds	r7, #12
 8006630:	46bd      	mov	sp, r7
 8006632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006636:	4770      	bx	lr

08006638 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006638:	b480      	push	{r7}
 800663a:	b083      	sub	sp, #12
 800663c:	af00      	add	r7, sp, #0
 800663e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006640:	bf00      	nop
 8006642:	370c      	adds	r7, #12
 8006644:	46bd      	mov	sp, r7
 8006646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800664a:	4770      	bx	lr

0800664c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800664c:	b580      	push	{r7, lr}
 800664e:	b082      	sub	sp, #8
 8006650:	af00      	add	r7, sp, #0
 8006652:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	2b00      	cmp	r3, #0
 8006658:	d101      	bne.n	800665e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800665a:	2301      	movs	r3, #1
 800665c:	e040      	b.n	80066e0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006662:	2b00      	cmp	r3, #0
 8006664:	d106      	bne.n	8006674 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	2200      	movs	r2, #0
 800666a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800666e:	6878      	ldr	r0, [r7, #4]
 8006670:	f7fb fa4a 	bl	8001b08 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	2224      	movs	r2, #36	; 0x24
 8006678:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	681a      	ldr	r2, [r3, #0]
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	f022 0201 	bic.w	r2, r2, #1
 8006688:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800668a:	6878      	ldr	r0, [r7, #4]
 800668c:	f000 f82c 	bl	80066e8 <UART_SetConfig>
 8006690:	4603      	mov	r3, r0
 8006692:	2b01      	cmp	r3, #1
 8006694:	d101      	bne.n	800669a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8006696:	2301      	movs	r3, #1
 8006698:	e022      	b.n	80066e0 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d002      	beq.n	80066a8 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80066a2:	6878      	ldr	r0, [r7, #4]
 80066a4:	f000 fa84 	bl	8006bb0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	685a      	ldr	r2, [r3, #4]
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80066b6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	689a      	ldr	r2, [r3, #8]
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80066c6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	681a      	ldr	r2, [r3, #0]
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	f042 0201 	orr.w	r2, r2, #1
 80066d6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80066d8:	6878      	ldr	r0, [r7, #4]
 80066da:	f000 fb0b 	bl	8006cf4 <UART_CheckIdleState>
 80066de:	4603      	mov	r3, r0
}
 80066e0:	4618      	mov	r0, r3
 80066e2:	3708      	adds	r7, #8
 80066e4:	46bd      	mov	sp, r7
 80066e6:	bd80      	pop	{r7, pc}

080066e8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80066e8:	b580      	push	{r7, lr}
 80066ea:	b088      	sub	sp, #32
 80066ec:	af00      	add	r7, sp, #0
 80066ee:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80066f0:	2300      	movs	r3, #0
 80066f2:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	689a      	ldr	r2, [r3, #8]
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	691b      	ldr	r3, [r3, #16]
 80066fc:	431a      	orrs	r2, r3
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	695b      	ldr	r3, [r3, #20]
 8006702:	431a      	orrs	r2, r3
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	69db      	ldr	r3, [r3, #28]
 8006708:	4313      	orrs	r3, r2
 800670a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	681a      	ldr	r2, [r3, #0]
 8006712:	4ba6      	ldr	r3, [pc, #664]	; (80069ac <UART_SetConfig+0x2c4>)
 8006714:	4013      	ands	r3, r2
 8006716:	687a      	ldr	r2, [r7, #4]
 8006718:	6812      	ldr	r2, [r2, #0]
 800671a:	6979      	ldr	r1, [r7, #20]
 800671c:	430b      	orrs	r3, r1
 800671e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	685b      	ldr	r3, [r3, #4]
 8006726:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	68da      	ldr	r2, [r3, #12]
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	430a      	orrs	r2, r1
 8006734:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	699b      	ldr	r3, [r3, #24]
 800673a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	6a1b      	ldr	r3, [r3, #32]
 8006740:	697a      	ldr	r2, [r7, #20]
 8006742:	4313      	orrs	r3, r2
 8006744:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	689b      	ldr	r3, [r3, #8]
 800674c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	697a      	ldr	r2, [r7, #20]
 8006756:	430a      	orrs	r2, r1
 8006758:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	4a94      	ldr	r2, [pc, #592]	; (80069b0 <UART_SetConfig+0x2c8>)
 8006760:	4293      	cmp	r3, r2
 8006762:	d120      	bne.n	80067a6 <UART_SetConfig+0xbe>
 8006764:	4b93      	ldr	r3, [pc, #588]	; (80069b4 <UART_SetConfig+0x2cc>)
 8006766:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800676a:	f003 0303 	and.w	r3, r3, #3
 800676e:	2b03      	cmp	r3, #3
 8006770:	d816      	bhi.n	80067a0 <UART_SetConfig+0xb8>
 8006772:	a201      	add	r2, pc, #4	; (adr r2, 8006778 <UART_SetConfig+0x90>)
 8006774:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006778:	08006789 	.word	0x08006789
 800677c:	08006795 	.word	0x08006795
 8006780:	0800678f 	.word	0x0800678f
 8006784:	0800679b 	.word	0x0800679b
 8006788:	2301      	movs	r3, #1
 800678a:	77fb      	strb	r3, [r7, #31]
 800678c:	e150      	b.n	8006a30 <UART_SetConfig+0x348>
 800678e:	2302      	movs	r3, #2
 8006790:	77fb      	strb	r3, [r7, #31]
 8006792:	e14d      	b.n	8006a30 <UART_SetConfig+0x348>
 8006794:	2304      	movs	r3, #4
 8006796:	77fb      	strb	r3, [r7, #31]
 8006798:	e14a      	b.n	8006a30 <UART_SetConfig+0x348>
 800679a:	2308      	movs	r3, #8
 800679c:	77fb      	strb	r3, [r7, #31]
 800679e:	e147      	b.n	8006a30 <UART_SetConfig+0x348>
 80067a0:	2310      	movs	r3, #16
 80067a2:	77fb      	strb	r3, [r7, #31]
 80067a4:	e144      	b.n	8006a30 <UART_SetConfig+0x348>
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	4a83      	ldr	r2, [pc, #524]	; (80069b8 <UART_SetConfig+0x2d0>)
 80067ac:	4293      	cmp	r3, r2
 80067ae:	d132      	bne.n	8006816 <UART_SetConfig+0x12e>
 80067b0:	4b80      	ldr	r3, [pc, #512]	; (80069b4 <UART_SetConfig+0x2cc>)
 80067b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80067b6:	f003 030c 	and.w	r3, r3, #12
 80067ba:	2b0c      	cmp	r3, #12
 80067bc:	d828      	bhi.n	8006810 <UART_SetConfig+0x128>
 80067be:	a201      	add	r2, pc, #4	; (adr r2, 80067c4 <UART_SetConfig+0xdc>)
 80067c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067c4:	080067f9 	.word	0x080067f9
 80067c8:	08006811 	.word	0x08006811
 80067cc:	08006811 	.word	0x08006811
 80067d0:	08006811 	.word	0x08006811
 80067d4:	08006805 	.word	0x08006805
 80067d8:	08006811 	.word	0x08006811
 80067dc:	08006811 	.word	0x08006811
 80067e0:	08006811 	.word	0x08006811
 80067e4:	080067ff 	.word	0x080067ff
 80067e8:	08006811 	.word	0x08006811
 80067ec:	08006811 	.word	0x08006811
 80067f0:	08006811 	.word	0x08006811
 80067f4:	0800680b 	.word	0x0800680b
 80067f8:	2300      	movs	r3, #0
 80067fa:	77fb      	strb	r3, [r7, #31]
 80067fc:	e118      	b.n	8006a30 <UART_SetConfig+0x348>
 80067fe:	2302      	movs	r3, #2
 8006800:	77fb      	strb	r3, [r7, #31]
 8006802:	e115      	b.n	8006a30 <UART_SetConfig+0x348>
 8006804:	2304      	movs	r3, #4
 8006806:	77fb      	strb	r3, [r7, #31]
 8006808:	e112      	b.n	8006a30 <UART_SetConfig+0x348>
 800680a:	2308      	movs	r3, #8
 800680c:	77fb      	strb	r3, [r7, #31]
 800680e:	e10f      	b.n	8006a30 <UART_SetConfig+0x348>
 8006810:	2310      	movs	r3, #16
 8006812:	77fb      	strb	r3, [r7, #31]
 8006814:	e10c      	b.n	8006a30 <UART_SetConfig+0x348>
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	4a68      	ldr	r2, [pc, #416]	; (80069bc <UART_SetConfig+0x2d4>)
 800681c:	4293      	cmp	r3, r2
 800681e:	d120      	bne.n	8006862 <UART_SetConfig+0x17a>
 8006820:	4b64      	ldr	r3, [pc, #400]	; (80069b4 <UART_SetConfig+0x2cc>)
 8006822:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006826:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800682a:	2b30      	cmp	r3, #48	; 0x30
 800682c:	d013      	beq.n	8006856 <UART_SetConfig+0x16e>
 800682e:	2b30      	cmp	r3, #48	; 0x30
 8006830:	d814      	bhi.n	800685c <UART_SetConfig+0x174>
 8006832:	2b20      	cmp	r3, #32
 8006834:	d009      	beq.n	800684a <UART_SetConfig+0x162>
 8006836:	2b20      	cmp	r3, #32
 8006838:	d810      	bhi.n	800685c <UART_SetConfig+0x174>
 800683a:	2b00      	cmp	r3, #0
 800683c:	d002      	beq.n	8006844 <UART_SetConfig+0x15c>
 800683e:	2b10      	cmp	r3, #16
 8006840:	d006      	beq.n	8006850 <UART_SetConfig+0x168>
 8006842:	e00b      	b.n	800685c <UART_SetConfig+0x174>
 8006844:	2300      	movs	r3, #0
 8006846:	77fb      	strb	r3, [r7, #31]
 8006848:	e0f2      	b.n	8006a30 <UART_SetConfig+0x348>
 800684a:	2302      	movs	r3, #2
 800684c:	77fb      	strb	r3, [r7, #31]
 800684e:	e0ef      	b.n	8006a30 <UART_SetConfig+0x348>
 8006850:	2304      	movs	r3, #4
 8006852:	77fb      	strb	r3, [r7, #31]
 8006854:	e0ec      	b.n	8006a30 <UART_SetConfig+0x348>
 8006856:	2308      	movs	r3, #8
 8006858:	77fb      	strb	r3, [r7, #31]
 800685a:	e0e9      	b.n	8006a30 <UART_SetConfig+0x348>
 800685c:	2310      	movs	r3, #16
 800685e:	77fb      	strb	r3, [r7, #31]
 8006860:	e0e6      	b.n	8006a30 <UART_SetConfig+0x348>
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	4a56      	ldr	r2, [pc, #344]	; (80069c0 <UART_SetConfig+0x2d8>)
 8006868:	4293      	cmp	r3, r2
 800686a:	d120      	bne.n	80068ae <UART_SetConfig+0x1c6>
 800686c:	4b51      	ldr	r3, [pc, #324]	; (80069b4 <UART_SetConfig+0x2cc>)
 800686e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006872:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006876:	2bc0      	cmp	r3, #192	; 0xc0
 8006878:	d013      	beq.n	80068a2 <UART_SetConfig+0x1ba>
 800687a:	2bc0      	cmp	r3, #192	; 0xc0
 800687c:	d814      	bhi.n	80068a8 <UART_SetConfig+0x1c0>
 800687e:	2b80      	cmp	r3, #128	; 0x80
 8006880:	d009      	beq.n	8006896 <UART_SetConfig+0x1ae>
 8006882:	2b80      	cmp	r3, #128	; 0x80
 8006884:	d810      	bhi.n	80068a8 <UART_SetConfig+0x1c0>
 8006886:	2b00      	cmp	r3, #0
 8006888:	d002      	beq.n	8006890 <UART_SetConfig+0x1a8>
 800688a:	2b40      	cmp	r3, #64	; 0x40
 800688c:	d006      	beq.n	800689c <UART_SetConfig+0x1b4>
 800688e:	e00b      	b.n	80068a8 <UART_SetConfig+0x1c0>
 8006890:	2300      	movs	r3, #0
 8006892:	77fb      	strb	r3, [r7, #31]
 8006894:	e0cc      	b.n	8006a30 <UART_SetConfig+0x348>
 8006896:	2302      	movs	r3, #2
 8006898:	77fb      	strb	r3, [r7, #31]
 800689a:	e0c9      	b.n	8006a30 <UART_SetConfig+0x348>
 800689c:	2304      	movs	r3, #4
 800689e:	77fb      	strb	r3, [r7, #31]
 80068a0:	e0c6      	b.n	8006a30 <UART_SetConfig+0x348>
 80068a2:	2308      	movs	r3, #8
 80068a4:	77fb      	strb	r3, [r7, #31]
 80068a6:	e0c3      	b.n	8006a30 <UART_SetConfig+0x348>
 80068a8:	2310      	movs	r3, #16
 80068aa:	77fb      	strb	r3, [r7, #31]
 80068ac:	e0c0      	b.n	8006a30 <UART_SetConfig+0x348>
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	4a44      	ldr	r2, [pc, #272]	; (80069c4 <UART_SetConfig+0x2dc>)
 80068b4:	4293      	cmp	r3, r2
 80068b6:	d125      	bne.n	8006904 <UART_SetConfig+0x21c>
 80068b8:	4b3e      	ldr	r3, [pc, #248]	; (80069b4 <UART_SetConfig+0x2cc>)
 80068ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80068be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80068c2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80068c6:	d017      	beq.n	80068f8 <UART_SetConfig+0x210>
 80068c8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80068cc:	d817      	bhi.n	80068fe <UART_SetConfig+0x216>
 80068ce:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80068d2:	d00b      	beq.n	80068ec <UART_SetConfig+0x204>
 80068d4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80068d8:	d811      	bhi.n	80068fe <UART_SetConfig+0x216>
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d003      	beq.n	80068e6 <UART_SetConfig+0x1fe>
 80068de:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80068e2:	d006      	beq.n	80068f2 <UART_SetConfig+0x20a>
 80068e4:	e00b      	b.n	80068fe <UART_SetConfig+0x216>
 80068e6:	2300      	movs	r3, #0
 80068e8:	77fb      	strb	r3, [r7, #31]
 80068ea:	e0a1      	b.n	8006a30 <UART_SetConfig+0x348>
 80068ec:	2302      	movs	r3, #2
 80068ee:	77fb      	strb	r3, [r7, #31]
 80068f0:	e09e      	b.n	8006a30 <UART_SetConfig+0x348>
 80068f2:	2304      	movs	r3, #4
 80068f4:	77fb      	strb	r3, [r7, #31]
 80068f6:	e09b      	b.n	8006a30 <UART_SetConfig+0x348>
 80068f8:	2308      	movs	r3, #8
 80068fa:	77fb      	strb	r3, [r7, #31]
 80068fc:	e098      	b.n	8006a30 <UART_SetConfig+0x348>
 80068fe:	2310      	movs	r3, #16
 8006900:	77fb      	strb	r3, [r7, #31]
 8006902:	e095      	b.n	8006a30 <UART_SetConfig+0x348>
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	4a2f      	ldr	r2, [pc, #188]	; (80069c8 <UART_SetConfig+0x2e0>)
 800690a:	4293      	cmp	r3, r2
 800690c:	d125      	bne.n	800695a <UART_SetConfig+0x272>
 800690e:	4b29      	ldr	r3, [pc, #164]	; (80069b4 <UART_SetConfig+0x2cc>)
 8006910:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006914:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006918:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800691c:	d017      	beq.n	800694e <UART_SetConfig+0x266>
 800691e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006922:	d817      	bhi.n	8006954 <UART_SetConfig+0x26c>
 8006924:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006928:	d00b      	beq.n	8006942 <UART_SetConfig+0x25a>
 800692a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800692e:	d811      	bhi.n	8006954 <UART_SetConfig+0x26c>
 8006930:	2b00      	cmp	r3, #0
 8006932:	d003      	beq.n	800693c <UART_SetConfig+0x254>
 8006934:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006938:	d006      	beq.n	8006948 <UART_SetConfig+0x260>
 800693a:	e00b      	b.n	8006954 <UART_SetConfig+0x26c>
 800693c:	2301      	movs	r3, #1
 800693e:	77fb      	strb	r3, [r7, #31]
 8006940:	e076      	b.n	8006a30 <UART_SetConfig+0x348>
 8006942:	2302      	movs	r3, #2
 8006944:	77fb      	strb	r3, [r7, #31]
 8006946:	e073      	b.n	8006a30 <UART_SetConfig+0x348>
 8006948:	2304      	movs	r3, #4
 800694a:	77fb      	strb	r3, [r7, #31]
 800694c:	e070      	b.n	8006a30 <UART_SetConfig+0x348>
 800694e:	2308      	movs	r3, #8
 8006950:	77fb      	strb	r3, [r7, #31]
 8006952:	e06d      	b.n	8006a30 <UART_SetConfig+0x348>
 8006954:	2310      	movs	r3, #16
 8006956:	77fb      	strb	r3, [r7, #31]
 8006958:	e06a      	b.n	8006a30 <UART_SetConfig+0x348>
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	4a1b      	ldr	r2, [pc, #108]	; (80069cc <UART_SetConfig+0x2e4>)
 8006960:	4293      	cmp	r3, r2
 8006962:	d138      	bne.n	80069d6 <UART_SetConfig+0x2ee>
 8006964:	4b13      	ldr	r3, [pc, #76]	; (80069b4 <UART_SetConfig+0x2cc>)
 8006966:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800696a:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800696e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006972:	d017      	beq.n	80069a4 <UART_SetConfig+0x2bc>
 8006974:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006978:	d82a      	bhi.n	80069d0 <UART_SetConfig+0x2e8>
 800697a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800697e:	d00b      	beq.n	8006998 <UART_SetConfig+0x2b0>
 8006980:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006984:	d824      	bhi.n	80069d0 <UART_SetConfig+0x2e8>
 8006986:	2b00      	cmp	r3, #0
 8006988:	d003      	beq.n	8006992 <UART_SetConfig+0x2aa>
 800698a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800698e:	d006      	beq.n	800699e <UART_SetConfig+0x2b6>
 8006990:	e01e      	b.n	80069d0 <UART_SetConfig+0x2e8>
 8006992:	2300      	movs	r3, #0
 8006994:	77fb      	strb	r3, [r7, #31]
 8006996:	e04b      	b.n	8006a30 <UART_SetConfig+0x348>
 8006998:	2302      	movs	r3, #2
 800699a:	77fb      	strb	r3, [r7, #31]
 800699c:	e048      	b.n	8006a30 <UART_SetConfig+0x348>
 800699e:	2304      	movs	r3, #4
 80069a0:	77fb      	strb	r3, [r7, #31]
 80069a2:	e045      	b.n	8006a30 <UART_SetConfig+0x348>
 80069a4:	2308      	movs	r3, #8
 80069a6:	77fb      	strb	r3, [r7, #31]
 80069a8:	e042      	b.n	8006a30 <UART_SetConfig+0x348>
 80069aa:	bf00      	nop
 80069ac:	efff69f3 	.word	0xefff69f3
 80069b0:	40011000 	.word	0x40011000
 80069b4:	40023800 	.word	0x40023800
 80069b8:	40004400 	.word	0x40004400
 80069bc:	40004800 	.word	0x40004800
 80069c0:	40004c00 	.word	0x40004c00
 80069c4:	40005000 	.word	0x40005000
 80069c8:	40011400 	.word	0x40011400
 80069cc:	40007800 	.word	0x40007800
 80069d0:	2310      	movs	r3, #16
 80069d2:	77fb      	strb	r3, [r7, #31]
 80069d4:	e02c      	b.n	8006a30 <UART_SetConfig+0x348>
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	4a72      	ldr	r2, [pc, #456]	; (8006ba4 <UART_SetConfig+0x4bc>)
 80069dc:	4293      	cmp	r3, r2
 80069de:	d125      	bne.n	8006a2c <UART_SetConfig+0x344>
 80069e0:	4b71      	ldr	r3, [pc, #452]	; (8006ba8 <UART_SetConfig+0x4c0>)
 80069e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80069e6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80069ea:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80069ee:	d017      	beq.n	8006a20 <UART_SetConfig+0x338>
 80069f0:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80069f4:	d817      	bhi.n	8006a26 <UART_SetConfig+0x33e>
 80069f6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80069fa:	d00b      	beq.n	8006a14 <UART_SetConfig+0x32c>
 80069fc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006a00:	d811      	bhi.n	8006a26 <UART_SetConfig+0x33e>
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d003      	beq.n	8006a0e <UART_SetConfig+0x326>
 8006a06:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006a0a:	d006      	beq.n	8006a1a <UART_SetConfig+0x332>
 8006a0c:	e00b      	b.n	8006a26 <UART_SetConfig+0x33e>
 8006a0e:	2300      	movs	r3, #0
 8006a10:	77fb      	strb	r3, [r7, #31]
 8006a12:	e00d      	b.n	8006a30 <UART_SetConfig+0x348>
 8006a14:	2302      	movs	r3, #2
 8006a16:	77fb      	strb	r3, [r7, #31]
 8006a18:	e00a      	b.n	8006a30 <UART_SetConfig+0x348>
 8006a1a:	2304      	movs	r3, #4
 8006a1c:	77fb      	strb	r3, [r7, #31]
 8006a1e:	e007      	b.n	8006a30 <UART_SetConfig+0x348>
 8006a20:	2308      	movs	r3, #8
 8006a22:	77fb      	strb	r3, [r7, #31]
 8006a24:	e004      	b.n	8006a30 <UART_SetConfig+0x348>
 8006a26:	2310      	movs	r3, #16
 8006a28:	77fb      	strb	r3, [r7, #31]
 8006a2a:	e001      	b.n	8006a30 <UART_SetConfig+0x348>
 8006a2c:	2310      	movs	r3, #16
 8006a2e:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	69db      	ldr	r3, [r3, #28]
 8006a34:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006a38:	d15c      	bne.n	8006af4 <UART_SetConfig+0x40c>
  {
    switch (clocksource)
 8006a3a:	7ffb      	ldrb	r3, [r7, #31]
 8006a3c:	2b08      	cmp	r3, #8
 8006a3e:	d828      	bhi.n	8006a92 <UART_SetConfig+0x3aa>
 8006a40:	a201      	add	r2, pc, #4	; (adr r2, 8006a48 <UART_SetConfig+0x360>)
 8006a42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a46:	bf00      	nop
 8006a48:	08006a6d 	.word	0x08006a6d
 8006a4c:	08006a75 	.word	0x08006a75
 8006a50:	08006a7d 	.word	0x08006a7d
 8006a54:	08006a93 	.word	0x08006a93
 8006a58:	08006a83 	.word	0x08006a83
 8006a5c:	08006a93 	.word	0x08006a93
 8006a60:	08006a93 	.word	0x08006a93
 8006a64:	08006a93 	.word	0x08006a93
 8006a68:	08006a8b 	.word	0x08006a8b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006a6c:	f7fe f92c 	bl	8004cc8 <HAL_RCC_GetPCLK1Freq>
 8006a70:	61b8      	str	r0, [r7, #24]
        break;
 8006a72:	e013      	b.n	8006a9c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006a74:	f7fe f93c 	bl	8004cf0 <HAL_RCC_GetPCLK2Freq>
 8006a78:	61b8      	str	r0, [r7, #24]
        break;
 8006a7a:	e00f      	b.n	8006a9c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006a7c:	4b4b      	ldr	r3, [pc, #300]	; (8006bac <UART_SetConfig+0x4c4>)
 8006a7e:	61bb      	str	r3, [r7, #24]
        break;
 8006a80:	e00c      	b.n	8006a9c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006a82:	f7fe f80f 	bl	8004aa4 <HAL_RCC_GetSysClockFreq>
 8006a86:	61b8      	str	r0, [r7, #24]
        break;
 8006a88:	e008      	b.n	8006a9c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006a8a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006a8e:	61bb      	str	r3, [r7, #24]
        break;
 8006a90:	e004      	b.n	8006a9c <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8006a92:	2300      	movs	r3, #0
 8006a94:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006a96:	2301      	movs	r3, #1
 8006a98:	77bb      	strb	r3, [r7, #30]
        break;
 8006a9a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006a9c:	69bb      	ldr	r3, [r7, #24]
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d074      	beq.n	8006b8c <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006aa2:	69bb      	ldr	r3, [r7, #24]
 8006aa4:	005a      	lsls	r2, r3, #1
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	685b      	ldr	r3, [r3, #4]
 8006aaa:	085b      	lsrs	r3, r3, #1
 8006aac:	441a      	add	r2, r3
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	685b      	ldr	r3, [r3, #4]
 8006ab2:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ab6:	b29b      	uxth	r3, r3
 8006ab8:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006aba:	693b      	ldr	r3, [r7, #16]
 8006abc:	2b0f      	cmp	r3, #15
 8006abe:	d916      	bls.n	8006aee <UART_SetConfig+0x406>
 8006ac0:	693b      	ldr	r3, [r7, #16]
 8006ac2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006ac6:	d212      	bcs.n	8006aee <UART_SetConfig+0x406>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006ac8:	693b      	ldr	r3, [r7, #16]
 8006aca:	b29b      	uxth	r3, r3
 8006acc:	f023 030f 	bic.w	r3, r3, #15
 8006ad0:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006ad2:	693b      	ldr	r3, [r7, #16]
 8006ad4:	085b      	lsrs	r3, r3, #1
 8006ad6:	b29b      	uxth	r3, r3
 8006ad8:	f003 0307 	and.w	r3, r3, #7
 8006adc:	b29a      	uxth	r2, r3
 8006ade:	89fb      	ldrh	r3, [r7, #14]
 8006ae0:	4313      	orrs	r3, r2
 8006ae2:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	89fa      	ldrh	r2, [r7, #14]
 8006aea:	60da      	str	r2, [r3, #12]
 8006aec:	e04e      	b.n	8006b8c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8006aee:	2301      	movs	r3, #1
 8006af0:	77bb      	strb	r3, [r7, #30]
 8006af2:	e04b      	b.n	8006b8c <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006af4:	7ffb      	ldrb	r3, [r7, #31]
 8006af6:	2b08      	cmp	r3, #8
 8006af8:	d827      	bhi.n	8006b4a <UART_SetConfig+0x462>
 8006afa:	a201      	add	r2, pc, #4	; (adr r2, 8006b00 <UART_SetConfig+0x418>)
 8006afc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b00:	08006b25 	.word	0x08006b25
 8006b04:	08006b2d 	.word	0x08006b2d
 8006b08:	08006b35 	.word	0x08006b35
 8006b0c:	08006b4b 	.word	0x08006b4b
 8006b10:	08006b3b 	.word	0x08006b3b
 8006b14:	08006b4b 	.word	0x08006b4b
 8006b18:	08006b4b 	.word	0x08006b4b
 8006b1c:	08006b4b 	.word	0x08006b4b
 8006b20:	08006b43 	.word	0x08006b43
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006b24:	f7fe f8d0 	bl	8004cc8 <HAL_RCC_GetPCLK1Freq>
 8006b28:	61b8      	str	r0, [r7, #24]
        break;
 8006b2a:	e013      	b.n	8006b54 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006b2c:	f7fe f8e0 	bl	8004cf0 <HAL_RCC_GetPCLK2Freq>
 8006b30:	61b8      	str	r0, [r7, #24]
        break;
 8006b32:	e00f      	b.n	8006b54 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006b34:	4b1d      	ldr	r3, [pc, #116]	; (8006bac <UART_SetConfig+0x4c4>)
 8006b36:	61bb      	str	r3, [r7, #24]
        break;
 8006b38:	e00c      	b.n	8006b54 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006b3a:	f7fd ffb3 	bl	8004aa4 <HAL_RCC_GetSysClockFreq>
 8006b3e:	61b8      	str	r0, [r7, #24]
        break;
 8006b40:	e008      	b.n	8006b54 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006b42:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006b46:	61bb      	str	r3, [r7, #24]
        break;
 8006b48:	e004      	b.n	8006b54 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8006b4a:	2300      	movs	r3, #0
 8006b4c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006b4e:	2301      	movs	r3, #1
 8006b50:	77bb      	strb	r3, [r7, #30]
        break;
 8006b52:	bf00      	nop
    }

    if (pclk != 0U)
 8006b54:	69bb      	ldr	r3, [r7, #24]
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d018      	beq.n	8006b8c <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	685b      	ldr	r3, [r3, #4]
 8006b5e:	085a      	lsrs	r2, r3, #1
 8006b60:	69bb      	ldr	r3, [r7, #24]
 8006b62:	441a      	add	r2, r3
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	685b      	ldr	r3, [r3, #4]
 8006b68:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b6c:	b29b      	uxth	r3, r3
 8006b6e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006b70:	693b      	ldr	r3, [r7, #16]
 8006b72:	2b0f      	cmp	r3, #15
 8006b74:	d908      	bls.n	8006b88 <UART_SetConfig+0x4a0>
 8006b76:	693b      	ldr	r3, [r7, #16]
 8006b78:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006b7c:	d204      	bcs.n	8006b88 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = usartdiv;
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	693a      	ldr	r2, [r7, #16]
 8006b84:	60da      	str	r2, [r3, #12]
 8006b86:	e001      	b.n	8006b8c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8006b88:	2301      	movs	r3, #1
 8006b8a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	2200      	movs	r2, #0
 8006b90:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	2200      	movs	r2, #0
 8006b96:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8006b98:	7fbb      	ldrb	r3, [r7, #30]
}
 8006b9a:	4618      	mov	r0, r3
 8006b9c:	3720      	adds	r7, #32
 8006b9e:	46bd      	mov	sp, r7
 8006ba0:	bd80      	pop	{r7, pc}
 8006ba2:	bf00      	nop
 8006ba4:	40007c00 	.word	0x40007c00
 8006ba8:	40023800 	.word	0x40023800
 8006bac:	00f42400 	.word	0x00f42400

08006bb0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006bb0:	b480      	push	{r7}
 8006bb2:	b083      	sub	sp, #12
 8006bb4:	af00      	add	r7, sp, #0
 8006bb6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bbc:	f003 0301 	and.w	r3, r3, #1
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d00a      	beq.n	8006bda <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	685b      	ldr	r3, [r3, #4]
 8006bca:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	430a      	orrs	r2, r1
 8006bd8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bde:	f003 0302 	and.w	r3, r3, #2
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d00a      	beq.n	8006bfc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	685b      	ldr	r3, [r3, #4]
 8006bec:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	430a      	orrs	r2, r1
 8006bfa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c00:	f003 0304 	and.w	r3, r3, #4
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d00a      	beq.n	8006c1e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	685b      	ldr	r3, [r3, #4]
 8006c0e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	430a      	orrs	r2, r1
 8006c1c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c22:	f003 0308 	and.w	r3, r3, #8
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d00a      	beq.n	8006c40 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	685b      	ldr	r3, [r3, #4]
 8006c30:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	430a      	orrs	r2, r1
 8006c3e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c44:	f003 0310 	and.w	r3, r3, #16
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d00a      	beq.n	8006c62 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	689b      	ldr	r3, [r3, #8]
 8006c52:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	430a      	orrs	r2, r1
 8006c60:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c66:	f003 0320 	and.w	r3, r3, #32
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d00a      	beq.n	8006c84 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	689b      	ldr	r3, [r3, #8]
 8006c74:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	430a      	orrs	r2, r1
 8006c82:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	d01a      	beq.n	8006cc6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	685b      	ldr	r3, [r3, #4]
 8006c96:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	430a      	orrs	r2, r1
 8006ca4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006caa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006cae:	d10a      	bne.n	8006cc6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	685b      	ldr	r3, [r3, #4]
 8006cb6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	430a      	orrs	r2, r1
 8006cc4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d00a      	beq.n	8006ce8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	685b      	ldr	r3, [r3, #4]
 8006cd8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	430a      	orrs	r2, r1
 8006ce6:	605a      	str	r2, [r3, #4]
  }
}
 8006ce8:	bf00      	nop
 8006cea:	370c      	adds	r7, #12
 8006cec:	46bd      	mov	sp, r7
 8006cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cf2:	4770      	bx	lr

08006cf4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006cf4:	b580      	push	{r7, lr}
 8006cf6:	b086      	sub	sp, #24
 8006cf8:	af02      	add	r7, sp, #8
 8006cfa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	2200      	movs	r2, #0
 8006d00:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006d04:	f7fc f83a 	bl	8002d7c <HAL_GetTick>
 8006d08:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	f003 0308 	and.w	r3, r3, #8
 8006d14:	2b08      	cmp	r3, #8
 8006d16:	d10e      	bne.n	8006d36 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006d18:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006d1c:	9300      	str	r3, [sp, #0]
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	2200      	movs	r2, #0
 8006d22:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006d26:	6878      	ldr	r0, [r7, #4]
 8006d28:	f000 f82d 	bl	8006d86 <UART_WaitOnFlagUntilTimeout>
 8006d2c:	4603      	mov	r3, r0
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d001      	beq.n	8006d36 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006d32:	2303      	movs	r3, #3
 8006d34:	e023      	b.n	8006d7e <UART_CheckIdleState+0x8a>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	f003 0304 	and.w	r3, r3, #4
 8006d40:	2b04      	cmp	r3, #4
 8006d42:	d10e      	bne.n	8006d62 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006d44:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006d48:	9300      	str	r3, [sp, #0]
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	2200      	movs	r2, #0
 8006d4e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006d52:	6878      	ldr	r0, [r7, #4]
 8006d54:	f000 f817 	bl	8006d86 <UART_WaitOnFlagUntilTimeout>
 8006d58:	4603      	mov	r3, r0
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d001      	beq.n	8006d62 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006d5e:	2303      	movs	r3, #3
 8006d60:	e00d      	b.n	8006d7e <UART_CheckIdleState+0x8a>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	2220      	movs	r2, #32
 8006d66:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	2220      	movs	r2, #32
 8006d6c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	2200      	movs	r2, #0
 8006d72:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	2200      	movs	r2, #0
 8006d78:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8006d7c:	2300      	movs	r3, #0
}
 8006d7e:	4618      	mov	r0, r3
 8006d80:	3710      	adds	r7, #16
 8006d82:	46bd      	mov	sp, r7
 8006d84:	bd80      	pop	{r7, pc}

08006d86 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006d86:	b580      	push	{r7, lr}
 8006d88:	b084      	sub	sp, #16
 8006d8a:	af00      	add	r7, sp, #0
 8006d8c:	60f8      	str	r0, [r7, #12]
 8006d8e:	60b9      	str	r1, [r7, #8]
 8006d90:	603b      	str	r3, [r7, #0]
 8006d92:	4613      	mov	r3, r2
 8006d94:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006d96:	e05e      	b.n	8006e56 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006d98:	69bb      	ldr	r3, [r7, #24]
 8006d9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d9e:	d05a      	beq.n	8006e56 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006da0:	f7fb ffec 	bl	8002d7c <HAL_GetTick>
 8006da4:	4602      	mov	r2, r0
 8006da6:	683b      	ldr	r3, [r7, #0]
 8006da8:	1ad3      	subs	r3, r2, r3
 8006daa:	69ba      	ldr	r2, [r7, #24]
 8006dac:	429a      	cmp	r2, r3
 8006dae:	d302      	bcc.n	8006db6 <UART_WaitOnFlagUntilTimeout+0x30>
 8006db0:	69bb      	ldr	r3, [r7, #24]
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d11b      	bne.n	8006dee <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	681a      	ldr	r2, [r3, #0]
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006dc4:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	689a      	ldr	r2, [r3, #8]
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	f022 0201 	bic.w	r2, r2, #1
 8006dd4:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	2220      	movs	r2, #32
 8006dda:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	2220      	movs	r2, #32
 8006de0:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	2200      	movs	r2, #0
 8006de6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8006dea:	2303      	movs	r3, #3
 8006dec:	e043      	b.n	8006e76 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	f003 0304 	and.w	r3, r3, #4
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d02c      	beq.n	8006e56 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	69db      	ldr	r3, [r3, #28]
 8006e02:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006e06:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006e0a:	d124      	bne.n	8006e56 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006e14:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	681a      	ldr	r2, [r3, #0]
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006e24:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	689a      	ldr	r2, [r3, #8]
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	f022 0201 	bic.w	r2, r2, #1
 8006e34:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	2220      	movs	r2, #32
 8006e3a:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	2220      	movs	r2, #32
 8006e40:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	2220      	movs	r2, #32
 8006e46:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	2200      	movs	r2, #0
 8006e4e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8006e52:	2303      	movs	r3, #3
 8006e54:	e00f      	b.n	8006e76 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	69da      	ldr	r2, [r3, #28]
 8006e5c:	68bb      	ldr	r3, [r7, #8]
 8006e5e:	4013      	ands	r3, r2
 8006e60:	68ba      	ldr	r2, [r7, #8]
 8006e62:	429a      	cmp	r2, r3
 8006e64:	bf0c      	ite	eq
 8006e66:	2301      	moveq	r3, #1
 8006e68:	2300      	movne	r3, #0
 8006e6a:	b2db      	uxtb	r3, r3
 8006e6c:	461a      	mov	r2, r3
 8006e6e:	79fb      	ldrb	r3, [r7, #7]
 8006e70:	429a      	cmp	r2, r3
 8006e72:	d091      	beq.n	8006d98 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006e74:	2300      	movs	r3, #0
}
 8006e76:	4618      	mov	r0, r3
 8006e78:	3710      	adds	r7, #16
 8006e7a:	46bd      	mov	sp, r7
 8006e7c:	bd80      	pop	{r7, pc}

08006e7e <__cvt>:
 8006e7e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006e80:	ed2d 8b02 	vpush	{d8}
 8006e84:	eeb0 8b40 	vmov.f64	d8, d0
 8006e88:	b085      	sub	sp, #20
 8006e8a:	4617      	mov	r7, r2
 8006e8c:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8006e8e:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8006e90:	ee18 2a90 	vmov	r2, s17
 8006e94:	f025 0520 	bic.w	r5, r5, #32
 8006e98:	2a00      	cmp	r2, #0
 8006e9a:	bfb6      	itet	lt
 8006e9c:	222d      	movlt	r2, #45	; 0x2d
 8006e9e:	2200      	movge	r2, #0
 8006ea0:	eeb1 8b40 	vneglt.f64	d8, d0
 8006ea4:	2d46      	cmp	r5, #70	; 0x46
 8006ea6:	460c      	mov	r4, r1
 8006ea8:	701a      	strb	r2, [r3, #0]
 8006eaa:	d004      	beq.n	8006eb6 <__cvt+0x38>
 8006eac:	2d45      	cmp	r5, #69	; 0x45
 8006eae:	d100      	bne.n	8006eb2 <__cvt+0x34>
 8006eb0:	3401      	adds	r4, #1
 8006eb2:	2102      	movs	r1, #2
 8006eb4:	e000      	b.n	8006eb8 <__cvt+0x3a>
 8006eb6:	2103      	movs	r1, #3
 8006eb8:	ab03      	add	r3, sp, #12
 8006eba:	9301      	str	r3, [sp, #4]
 8006ebc:	ab02      	add	r3, sp, #8
 8006ebe:	9300      	str	r3, [sp, #0]
 8006ec0:	4622      	mov	r2, r4
 8006ec2:	4633      	mov	r3, r6
 8006ec4:	eeb0 0b48 	vmov.f64	d0, d8
 8006ec8:	f000 fe42 	bl	8007b50 <_dtoa_r>
 8006ecc:	2d47      	cmp	r5, #71	; 0x47
 8006ece:	d101      	bne.n	8006ed4 <__cvt+0x56>
 8006ed0:	07fb      	lsls	r3, r7, #31
 8006ed2:	d51a      	bpl.n	8006f0a <__cvt+0x8c>
 8006ed4:	2d46      	cmp	r5, #70	; 0x46
 8006ed6:	eb00 0204 	add.w	r2, r0, r4
 8006eda:	d10c      	bne.n	8006ef6 <__cvt+0x78>
 8006edc:	7803      	ldrb	r3, [r0, #0]
 8006ede:	2b30      	cmp	r3, #48	; 0x30
 8006ee0:	d107      	bne.n	8006ef2 <__cvt+0x74>
 8006ee2:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8006ee6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006eea:	bf1c      	itt	ne
 8006eec:	f1c4 0401 	rsbne	r4, r4, #1
 8006ef0:	6034      	strne	r4, [r6, #0]
 8006ef2:	6833      	ldr	r3, [r6, #0]
 8006ef4:	441a      	add	r2, r3
 8006ef6:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8006efa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006efe:	bf08      	it	eq
 8006f00:	9203      	streq	r2, [sp, #12]
 8006f02:	2130      	movs	r1, #48	; 0x30
 8006f04:	9b03      	ldr	r3, [sp, #12]
 8006f06:	4293      	cmp	r3, r2
 8006f08:	d307      	bcc.n	8006f1a <__cvt+0x9c>
 8006f0a:	9b03      	ldr	r3, [sp, #12]
 8006f0c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006f0e:	1a1b      	subs	r3, r3, r0
 8006f10:	6013      	str	r3, [r2, #0]
 8006f12:	b005      	add	sp, #20
 8006f14:	ecbd 8b02 	vpop	{d8}
 8006f18:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006f1a:	1c5c      	adds	r4, r3, #1
 8006f1c:	9403      	str	r4, [sp, #12]
 8006f1e:	7019      	strb	r1, [r3, #0]
 8006f20:	e7f0      	b.n	8006f04 <__cvt+0x86>

08006f22 <__exponent>:
 8006f22:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006f24:	4603      	mov	r3, r0
 8006f26:	2900      	cmp	r1, #0
 8006f28:	bfb8      	it	lt
 8006f2a:	4249      	neglt	r1, r1
 8006f2c:	f803 2b02 	strb.w	r2, [r3], #2
 8006f30:	bfb4      	ite	lt
 8006f32:	222d      	movlt	r2, #45	; 0x2d
 8006f34:	222b      	movge	r2, #43	; 0x2b
 8006f36:	2909      	cmp	r1, #9
 8006f38:	7042      	strb	r2, [r0, #1]
 8006f3a:	dd2a      	ble.n	8006f92 <__exponent+0x70>
 8006f3c:	f10d 0207 	add.w	r2, sp, #7
 8006f40:	4617      	mov	r7, r2
 8006f42:	260a      	movs	r6, #10
 8006f44:	4694      	mov	ip, r2
 8006f46:	fb91 f5f6 	sdiv	r5, r1, r6
 8006f4a:	fb06 1415 	mls	r4, r6, r5, r1
 8006f4e:	3430      	adds	r4, #48	; 0x30
 8006f50:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8006f54:	460c      	mov	r4, r1
 8006f56:	2c63      	cmp	r4, #99	; 0x63
 8006f58:	f102 32ff 	add.w	r2, r2, #4294967295
 8006f5c:	4629      	mov	r1, r5
 8006f5e:	dcf1      	bgt.n	8006f44 <__exponent+0x22>
 8006f60:	3130      	adds	r1, #48	; 0x30
 8006f62:	f1ac 0402 	sub.w	r4, ip, #2
 8006f66:	f802 1c01 	strb.w	r1, [r2, #-1]
 8006f6a:	1c41      	adds	r1, r0, #1
 8006f6c:	4622      	mov	r2, r4
 8006f6e:	42ba      	cmp	r2, r7
 8006f70:	d30a      	bcc.n	8006f88 <__exponent+0x66>
 8006f72:	f10d 0209 	add.w	r2, sp, #9
 8006f76:	eba2 020c 	sub.w	r2, r2, ip
 8006f7a:	42bc      	cmp	r4, r7
 8006f7c:	bf88      	it	hi
 8006f7e:	2200      	movhi	r2, #0
 8006f80:	4413      	add	r3, r2
 8006f82:	1a18      	subs	r0, r3, r0
 8006f84:	b003      	add	sp, #12
 8006f86:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006f88:	f812 5b01 	ldrb.w	r5, [r2], #1
 8006f8c:	f801 5f01 	strb.w	r5, [r1, #1]!
 8006f90:	e7ed      	b.n	8006f6e <__exponent+0x4c>
 8006f92:	2330      	movs	r3, #48	; 0x30
 8006f94:	3130      	adds	r1, #48	; 0x30
 8006f96:	7083      	strb	r3, [r0, #2]
 8006f98:	70c1      	strb	r1, [r0, #3]
 8006f9a:	1d03      	adds	r3, r0, #4
 8006f9c:	e7f1      	b.n	8006f82 <__exponent+0x60>
	...

08006fa0 <_printf_float>:
 8006fa0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006fa4:	b08b      	sub	sp, #44	; 0x2c
 8006fa6:	460c      	mov	r4, r1
 8006fa8:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 8006fac:	4616      	mov	r6, r2
 8006fae:	461f      	mov	r7, r3
 8006fb0:	4605      	mov	r5, r0
 8006fb2:	f000 fccd 	bl	8007950 <_localeconv_r>
 8006fb6:	f8d0 b000 	ldr.w	fp, [r0]
 8006fba:	4658      	mov	r0, fp
 8006fbc:	f7f9 f990 	bl	80002e0 <strlen>
 8006fc0:	2300      	movs	r3, #0
 8006fc2:	9308      	str	r3, [sp, #32]
 8006fc4:	f8d8 3000 	ldr.w	r3, [r8]
 8006fc8:	f894 9018 	ldrb.w	r9, [r4, #24]
 8006fcc:	6822      	ldr	r2, [r4, #0]
 8006fce:	3307      	adds	r3, #7
 8006fd0:	f023 0307 	bic.w	r3, r3, #7
 8006fd4:	f103 0108 	add.w	r1, r3, #8
 8006fd8:	f8c8 1000 	str.w	r1, [r8]
 8006fdc:	ed93 0b00 	vldr	d0, [r3]
 8006fe0:	ed9f 6b97 	vldr	d6, [pc, #604]	; 8007240 <_printf_float+0x2a0>
 8006fe4:	eeb0 7bc0 	vabs.f64	d7, d0
 8006fe8:	eeb4 7b46 	vcmp.f64	d7, d6
 8006fec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006ff0:	ed84 0b12 	vstr	d0, [r4, #72]	; 0x48
 8006ff4:	4682      	mov	sl, r0
 8006ff6:	dd24      	ble.n	8007042 <_printf_float+0xa2>
 8006ff8:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8006ffc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007000:	d502      	bpl.n	8007008 <_printf_float+0x68>
 8007002:	232d      	movs	r3, #45	; 0x2d
 8007004:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007008:	498f      	ldr	r1, [pc, #572]	; (8007248 <_printf_float+0x2a8>)
 800700a:	4b90      	ldr	r3, [pc, #576]	; (800724c <_printf_float+0x2ac>)
 800700c:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8007010:	bf94      	ite	ls
 8007012:	4688      	movls	r8, r1
 8007014:	4698      	movhi	r8, r3
 8007016:	2303      	movs	r3, #3
 8007018:	6123      	str	r3, [r4, #16]
 800701a:	f022 0204 	bic.w	r2, r2, #4
 800701e:	2300      	movs	r3, #0
 8007020:	6022      	str	r2, [r4, #0]
 8007022:	9304      	str	r3, [sp, #16]
 8007024:	9700      	str	r7, [sp, #0]
 8007026:	4633      	mov	r3, r6
 8007028:	aa09      	add	r2, sp, #36	; 0x24
 800702a:	4621      	mov	r1, r4
 800702c:	4628      	mov	r0, r5
 800702e:	f000 f9d1 	bl	80073d4 <_printf_common>
 8007032:	3001      	adds	r0, #1
 8007034:	f040 808a 	bne.w	800714c <_printf_float+0x1ac>
 8007038:	f04f 30ff 	mov.w	r0, #4294967295
 800703c:	b00b      	add	sp, #44	; 0x2c
 800703e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007042:	eeb4 0b40 	vcmp.f64	d0, d0
 8007046:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800704a:	d709      	bvc.n	8007060 <_printf_float+0xc0>
 800704c:	ee10 3a90 	vmov	r3, s1
 8007050:	2b00      	cmp	r3, #0
 8007052:	bfbc      	itt	lt
 8007054:	232d      	movlt	r3, #45	; 0x2d
 8007056:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800705a:	497d      	ldr	r1, [pc, #500]	; (8007250 <_printf_float+0x2b0>)
 800705c:	4b7d      	ldr	r3, [pc, #500]	; (8007254 <_printf_float+0x2b4>)
 800705e:	e7d5      	b.n	800700c <_printf_float+0x6c>
 8007060:	6863      	ldr	r3, [r4, #4]
 8007062:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8007066:	9104      	str	r1, [sp, #16]
 8007068:	1c59      	adds	r1, r3, #1
 800706a:	d13c      	bne.n	80070e6 <_printf_float+0x146>
 800706c:	2306      	movs	r3, #6
 800706e:	6063      	str	r3, [r4, #4]
 8007070:	2300      	movs	r3, #0
 8007072:	9303      	str	r3, [sp, #12]
 8007074:	ab08      	add	r3, sp, #32
 8007076:	e9cd 9301 	strd	r9, r3, [sp, #4]
 800707a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800707e:	ab07      	add	r3, sp, #28
 8007080:	6861      	ldr	r1, [r4, #4]
 8007082:	9300      	str	r3, [sp, #0]
 8007084:	6022      	str	r2, [r4, #0]
 8007086:	f10d 031b 	add.w	r3, sp, #27
 800708a:	4628      	mov	r0, r5
 800708c:	f7ff fef7 	bl	8006e7e <__cvt>
 8007090:	9b04      	ldr	r3, [sp, #16]
 8007092:	9907      	ldr	r1, [sp, #28]
 8007094:	2b47      	cmp	r3, #71	; 0x47
 8007096:	4680      	mov	r8, r0
 8007098:	d108      	bne.n	80070ac <_printf_float+0x10c>
 800709a:	1cc8      	adds	r0, r1, #3
 800709c:	db02      	blt.n	80070a4 <_printf_float+0x104>
 800709e:	6863      	ldr	r3, [r4, #4]
 80070a0:	4299      	cmp	r1, r3
 80070a2:	dd41      	ble.n	8007128 <_printf_float+0x188>
 80070a4:	f1a9 0902 	sub.w	r9, r9, #2
 80070a8:	fa5f f989 	uxtb.w	r9, r9
 80070ac:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80070b0:	d820      	bhi.n	80070f4 <_printf_float+0x154>
 80070b2:	3901      	subs	r1, #1
 80070b4:	464a      	mov	r2, r9
 80070b6:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80070ba:	9107      	str	r1, [sp, #28]
 80070bc:	f7ff ff31 	bl	8006f22 <__exponent>
 80070c0:	9a08      	ldr	r2, [sp, #32]
 80070c2:	9004      	str	r0, [sp, #16]
 80070c4:	1813      	adds	r3, r2, r0
 80070c6:	2a01      	cmp	r2, #1
 80070c8:	6123      	str	r3, [r4, #16]
 80070ca:	dc02      	bgt.n	80070d2 <_printf_float+0x132>
 80070cc:	6822      	ldr	r2, [r4, #0]
 80070ce:	07d2      	lsls	r2, r2, #31
 80070d0:	d501      	bpl.n	80070d6 <_printf_float+0x136>
 80070d2:	3301      	adds	r3, #1
 80070d4:	6123      	str	r3, [r4, #16]
 80070d6:	f89d 301b 	ldrb.w	r3, [sp, #27]
 80070da:	2b00      	cmp	r3, #0
 80070dc:	d0a2      	beq.n	8007024 <_printf_float+0x84>
 80070de:	232d      	movs	r3, #45	; 0x2d
 80070e0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80070e4:	e79e      	b.n	8007024 <_printf_float+0x84>
 80070e6:	9904      	ldr	r1, [sp, #16]
 80070e8:	2947      	cmp	r1, #71	; 0x47
 80070ea:	d1c1      	bne.n	8007070 <_printf_float+0xd0>
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	d1bf      	bne.n	8007070 <_printf_float+0xd0>
 80070f0:	2301      	movs	r3, #1
 80070f2:	e7bc      	b.n	800706e <_printf_float+0xce>
 80070f4:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 80070f8:	d118      	bne.n	800712c <_printf_float+0x18c>
 80070fa:	2900      	cmp	r1, #0
 80070fc:	6863      	ldr	r3, [r4, #4]
 80070fe:	dd0b      	ble.n	8007118 <_printf_float+0x178>
 8007100:	6121      	str	r1, [r4, #16]
 8007102:	b913      	cbnz	r3, 800710a <_printf_float+0x16a>
 8007104:	6822      	ldr	r2, [r4, #0]
 8007106:	07d0      	lsls	r0, r2, #31
 8007108:	d502      	bpl.n	8007110 <_printf_float+0x170>
 800710a:	3301      	adds	r3, #1
 800710c:	440b      	add	r3, r1
 800710e:	6123      	str	r3, [r4, #16]
 8007110:	2300      	movs	r3, #0
 8007112:	65a1      	str	r1, [r4, #88]	; 0x58
 8007114:	9304      	str	r3, [sp, #16]
 8007116:	e7de      	b.n	80070d6 <_printf_float+0x136>
 8007118:	b913      	cbnz	r3, 8007120 <_printf_float+0x180>
 800711a:	6822      	ldr	r2, [r4, #0]
 800711c:	07d2      	lsls	r2, r2, #31
 800711e:	d501      	bpl.n	8007124 <_printf_float+0x184>
 8007120:	3302      	adds	r3, #2
 8007122:	e7f4      	b.n	800710e <_printf_float+0x16e>
 8007124:	2301      	movs	r3, #1
 8007126:	e7f2      	b.n	800710e <_printf_float+0x16e>
 8007128:	f04f 0967 	mov.w	r9, #103	; 0x67
 800712c:	9b08      	ldr	r3, [sp, #32]
 800712e:	4299      	cmp	r1, r3
 8007130:	db05      	blt.n	800713e <_printf_float+0x19e>
 8007132:	6823      	ldr	r3, [r4, #0]
 8007134:	6121      	str	r1, [r4, #16]
 8007136:	07d8      	lsls	r0, r3, #31
 8007138:	d5ea      	bpl.n	8007110 <_printf_float+0x170>
 800713a:	1c4b      	adds	r3, r1, #1
 800713c:	e7e7      	b.n	800710e <_printf_float+0x16e>
 800713e:	2900      	cmp	r1, #0
 8007140:	bfd4      	ite	le
 8007142:	f1c1 0202 	rsble	r2, r1, #2
 8007146:	2201      	movgt	r2, #1
 8007148:	4413      	add	r3, r2
 800714a:	e7e0      	b.n	800710e <_printf_float+0x16e>
 800714c:	6823      	ldr	r3, [r4, #0]
 800714e:	055a      	lsls	r2, r3, #21
 8007150:	d407      	bmi.n	8007162 <_printf_float+0x1c2>
 8007152:	6923      	ldr	r3, [r4, #16]
 8007154:	4642      	mov	r2, r8
 8007156:	4631      	mov	r1, r6
 8007158:	4628      	mov	r0, r5
 800715a:	47b8      	blx	r7
 800715c:	3001      	adds	r0, #1
 800715e:	d12a      	bne.n	80071b6 <_printf_float+0x216>
 8007160:	e76a      	b.n	8007038 <_printf_float+0x98>
 8007162:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8007166:	f240 80e0 	bls.w	800732a <_printf_float+0x38a>
 800716a:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 800716e:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8007172:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007176:	d133      	bne.n	80071e0 <_printf_float+0x240>
 8007178:	4a37      	ldr	r2, [pc, #220]	; (8007258 <_printf_float+0x2b8>)
 800717a:	2301      	movs	r3, #1
 800717c:	4631      	mov	r1, r6
 800717e:	4628      	mov	r0, r5
 8007180:	47b8      	blx	r7
 8007182:	3001      	adds	r0, #1
 8007184:	f43f af58 	beq.w	8007038 <_printf_float+0x98>
 8007188:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800718c:	429a      	cmp	r2, r3
 800718e:	db02      	blt.n	8007196 <_printf_float+0x1f6>
 8007190:	6823      	ldr	r3, [r4, #0]
 8007192:	07d8      	lsls	r0, r3, #31
 8007194:	d50f      	bpl.n	80071b6 <_printf_float+0x216>
 8007196:	4653      	mov	r3, sl
 8007198:	465a      	mov	r2, fp
 800719a:	4631      	mov	r1, r6
 800719c:	4628      	mov	r0, r5
 800719e:	47b8      	blx	r7
 80071a0:	3001      	adds	r0, #1
 80071a2:	f43f af49 	beq.w	8007038 <_printf_float+0x98>
 80071a6:	f04f 0800 	mov.w	r8, #0
 80071aa:	f104 091a 	add.w	r9, r4, #26
 80071ae:	9b08      	ldr	r3, [sp, #32]
 80071b0:	3b01      	subs	r3, #1
 80071b2:	4543      	cmp	r3, r8
 80071b4:	dc09      	bgt.n	80071ca <_printf_float+0x22a>
 80071b6:	6823      	ldr	r3, [r4, #0]
 80071b8:	079b      	lsls	r3, r3, #30
 80071ba:	f100 8106 	bmi.w	80073ca <_printf_float+0x42a>
 80071be:	68e0      	ldr	r0, [r4, #12]
 80071c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80071c2:	4298      	cmp	r0, r3
 80071c4:	bfb8      	it	lt
 80071c6:	4618      	movlt	r0, r3
 80071c8:	e738      	b.n	800703c <_printf_float+0x9c>
 80071ca:	2301      	movs	r3, #1
 80071cc:	464a      	mov	r2, r9
 80071ce:	4631      	mov	r1, r6
 80071d0:	4628      	mov	r0, r5
 80071d2:	47b8      	blx	r7
 80071d4:	3001      	adds	r0, #1
 80071d6:	f43f af2f 	beq.w	8007038 <_printf_float+0x98>
 80071da:	f108 0801 	add.w	r8, r8, #1
 80071de:	e7e6      	b.n	80071ae <_printf_float+0x20e>
 80071e0:	9b07      	ldr	r3, [sp, #28]
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	dc3a      	bgt.n	800725c <_printf_float+0x2bc>
 80071e6:	4a1c      	ldr	r2, [pc, #112]	; (8007258 <_printf_float+0x2b8>)
 80071e8:	2301      	movs	r3, #1
 80071ea:	4631      	mov	r1, r6
 80071ec:	4628      	mov	r0, r5
 80071ee:	47b8      	blx	r7
 80071f0:	3001      	adds	r0, #1
 80071f2:	f43f af21 	beq.w	8007038 <_printf_float+0x98>
 80071f6:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
 80071fa:	4313      	orrs	r3, r2
 80071fc:	d102      	bne.n	8007204 <_printf_float+0x264>
 80071fe:	6823      	ldr	r3, [r4, #0]
 8007200:	07d9      	lsls	r1, r3, #31
 8007202:	d5d8      	bpl.n	80071b6 <_printf_float+0x216>
 8007204:	4653      	mov	r3, sl
 8007206:	465a      	mov	r2, fp
 8007208:	4631      	mov	r1, r6
 800720a:	4628      	mov	r0, r5
 800720c:	47b8      	blx	r7
 800720e:	3001      	adds	r0, #1
 8007210:	f43f af12 	beq.w	8007038 <_printf_float+0x98>
 8007214:	f04f 0900 	mov.w	r9, #0
 8007218:	f104 0a1a 	add.w	sl, r4, #26
 800721c:	9b07      	ldr	r3, [sp, #28]
 800721e:	425b      	negs	r3, r3
 8007220:	454b      	cmp	r3, r9
 8007222:	dc01      	bgt.n	8007228 <_printf_float+0x288>
 8007224:	9b08      	ldr	r3, [sp, #32]
 8007226:	e795      	b.n	8007154 <_printf_float+0x1b4>
 8007228:	2301      	movs	r3, #1
 800722a:	4652      	mov	r2, sl
 800722c:	4631      	mov	r1, r6
 800722e:	4628      	mov	r0, r5
 8007230:	47b8      	blx	r7
 8007232:	3001      	adds	r0, #1
 8007234:	f43f af00 	beq.w	8007038 <_printf_float+0x98>
 8007238:	f109 0901 	add.w	r9, r9, #1
 800723c:	e7ee      	b.n	800721c <_printf_float+0x27c>
 800723e:	bf00      	nop
 8007240:	ffffffff 	.word	0xffffffff
 8007244:	7fefffff 	.word	0x7fefffff
 8007248:	0802fb14 	.word	0x0802fb14
 800724c:	0802fb18 	.word	0x0802fb18
 8007250:	0802fb1c 	.word	0x0802fb1c
 8007254:	0802fb20 	.word	0x0802fb20
 8007258:	0802fb24 	.word	0x0802fb24
 800725c:	9a08      	ldr	r2, [sp, #32]
 800725e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007260:	429a      	cmp	r2, r3
 8007262:	bfa8      	it	ge
 8007264:	461a      	movge	r2, r3
 8007266:	2a00      	cmp	r2, #0
 8007268:	4691      	mov	r9, r2
 800726a:	dc38      	bgt.n	80072de <_printf_float+0x33e>
 800726c:	2300      	movs	r3, #0
 800726e:	9305      	str	r3, [sp, #20]
 8007270:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007274:	f104 021a 	add.w	r2, r4, #26
 8007278:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800727a:	9905      	ldr	r1, [sp, #20]
 800727c:	9304      	str	r3, [sp, #16]
 800727e:	eba3 0309 	sub.w	r3, r3, r9
 8007282:	428b      	cmp	r3, r1
 8007284:	dc33      	bgt.n	80072ee <_printf_float+0x34e>
 8007286:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800728a:	429a      	cmp	r2, r3
 800728c:	db3c      	blt.n	8007308 <_printf_float+0x368>
 800728e:	6823      	ldr	r3, [r4, #0]
 8007290:	07da      	lsls	r2, r3, #31
 8007292:	d439      	bmi.n	8007308 <_printf_float+0x368>
 8007294:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
 8007298:	eba2 0903 	sub.w	r9, r2, r3
 800729c:	9b04      	ldr	r3, [sp, #16]
 800729e:	1ad2      	subs	r2, r2, r3
 80072a0:	4591      	cmp	r9, r2
 80072a2:	bfa8      	it	ge
 80072a4:	4691      	movge	r9, r2
 80072a6:	f1b9 0f00 	cmp.w	r9, #0
 80072aa:	dc35      	bgt.n	8007318 <_printf_float+0x378>
 80072ac:	f04f 0800 	mov.w	r8, #0
 80072b0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80072b4:	f104 0a1a 	add.w	sl, r4, #26
 80072b8:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 80072bc:	1a9b      	subs	r3, r3, r2
 80072be:	eba3 0309 	sub.w	r3, r3, r9
 80072c2:	4543      	cmp	r3, r8
 80072c4:	f77f af77 	ble.w	80071b6 <_printf_float+0x216>
 80072c8:	2301      	movs	r3, #1
 80072ca:	4652      	mov	r2, sl
 80072cc:	4631      	mov	r1, r6
 80072ce:	4628      	mov	r0, r5
 80072d0:	47b8      	blx	r7
 80072d2:	3001      	adds	r0, #1
 80072d4:	f43f aeb0 	beq.w	8007038 <_printf_float+0x98>
 80072d8:	f108 0801 	add.w	r8, r8, #1
 80072dc:	e7ec      	b.n	80072b8 <_printf_float+0x318>
 80072de:	4613      	mov	r3, r2
 80072e0:	4631      	mov	r1, r6
 80072e2:	4642      	mov	r2, r8
 80072e4:	4628      	mov	r0, r5
 80072e6:	47b8      	blx	r7
 80072e8:	3001      	adds	r0, #1
 80072ea:	d1bf      	bne.n	800726c <_printf_float+0x2cc>
 80072ec:	e6a4      	b.n	8007038 <_printf_float+0x98>
 80072ee:	2301      	movs	r3, #1
 80072f0:	4631      	mov	r1, r6
 80072f2:	4628      	mov	r0, r5
 80072f4:	9204      	str	r2, [sp, #16]
 80072f6:	47b8      	blx	r7
 80072f8:	3001      	adds	r0, #1
 80072fa:	f43f ae9d 	beq.w	8007038 <_printf_float+0x98>
 80072fe:	9b05      	ldr	r3, [sp, #20]
 8007300:	9a04      	ldr	r2, [sp, #16]
 8007302:	3301      	adds	r3, #1
 8007304:	9305      	str	r3, [sp, #20]
 8007306:	e7b7      	b.n	8007278 <_printf_float+0x2d8>
 8007308:	4653      	mov	r3, sl
 800730a:	465a      	mov	r2, fp
 800730c:	4631      	mov	r1, r6
 800730e:	4628      	mov	r0, r5
 8007310:	47b8      	blx	r7
 8007312:	3001      	adds	r0, #1
 8007314:	d1be      	bne.n	8007294 <_printf_float+0x2f4>
 8007316:	e68f      	b.n	8007038 <_printf_float+0x98>
 8007318:	9a04      	ldr	r2, [sp, #16]
 800731a:	464b      	mov	r3, r9
 800731c:	4442      	add	r2, r8
 800731e:	4631      	mov	r1, r6
 8007320:	4628      	mov	r0, r5
 8007322:	47b8      	blx	r7
 8007324:	3001      	adds	r0, #1
 8007326:	d1c1      	bne.n	80072ac <_printf_float+0x30c>
 8007328:	e686      	b.n	8007038 <_printf_float+0x98>
 800732a:	9a08      	ldr	r2, [sp, #32]
 800732c:	2a01      	cmp	r2, #1
 800732e:	dc01      	bgt.n	8007334 <_printf_float+0x394>
 8007330:	07db      	lsls	r3, r3, #31
 8007332:	d537      	bpl.n	80073a4 <_printf_float+0x404>
 8007334:	2301      	movs	r3, #1
 8007336:	4642      	mov	r2, r8
 8007338:	4631      	mov	r1, r6
 800733a:	4628      	mov	r0, r5
 800733c:	47b8      	blx	r7
 800733e:	3001      	adds	r0, #1
 8007340:	f43f ae7a 	beq.w	8007038 <_printf_float+0x98>
 8007344:	4653      	mov	r3, sl
 8007346:	465a      	mov	r2, fp
 8007348:	4631      	mov	r1, r6
 800734a:	4628      	mov	r0, r5
 800734c:	47b8      	blx	r7
 800734e:	3001      	adds	r0, #1
 8007350:	f43f ae72 	beq.w	8007038 <_printf_float+0x98>
 8007354:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8007358:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800735c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007360:	9b08      	ldr	r3, [sp, #32]
 8007362:	d01a      	beq.n	800739a <_printf_float+0x3fa>
 8007364:	3b01      	subs	r3, #1
 8007366:	f108 0201 	add.w	r2, r8, #1
 800736a:	4631      	mov	r1, r6
 800736c:	4628      	mov	r0, r5
 800736e:	47b8      	blx	r7
 8007370:	3001      	adds	r0, #1
 8007372:	d10e      	bne.n	8007392 <_printf_float+0x3f2>
 8007374:	e660      	b.n	8007038 <_printf_float+0x98>
 8007376:	2301      	movs	r3, #1
 8007378:	464a      	mov	r2, r9
 800737a:	4631      	mov	r1, r6
 800737c:	4628      	mov	r0, r5
 800737e:	47b8      	blx	r7
 8007380:	3001      	adds	r0, #1
 8007382:	f43f ae59 	beq.w	8007038 <_printf_float+0x98>
 8007386:	f108 0801 	add.w	r8, r8, #1
 800738a:	9b08      	ldr	r3, [sp, #32]
 800738c:	3b01      	subs	r3, #1
 800738e:	4543      	cmp	r3, r8
 8007390:	dcf1      	bgt.n	8007376 <_printf_float+0x3d6>
 8007392:	9b04      	ldr	r3, [sp, #16]
 8007394:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8007398:	e6dd      	b.n	8007156 <_printf_float+0x1b6>
 800739a:	f04f 0800 	mov.w	r8, #0
 800739e:	f104 091a 	add.w	r9, r4, #26
 80073a2:	e7f2      	b.n	800738a <_printf_float+0x3ea>
 80073a4:	2301      	movs	r3, #1
 80073a6:	4642      	mov	r2, r8
 80073a8:	e7df      	b.n	800736a <_printf_float+0x3ca>
 80073aa:	2301      	movs	r3, #1
 80073ac:	464a      	mov	r2, r9
 80073ae:	4631      	mov	r1, r6
 80073b0:	4628      	mov	r0, r5
 80073b2:	47b8      	blx	r7
 80073b4:	3001      	adds	r0, #1
 80073b6:	f43f ae3f 	beq.w	8007038 <_printf_float+0x98>
 80073ba:	f108 0801 	add.w	r8, r8, #1
 80073be:	68e3      	ldr	r3, [r4, #12]
 80073c0:	9909      	ldr	r1, [sp, #36]	; 0x24
 80073c2:	1a5b      	subs	r3, r3, r1
 80073c4:	4543      	cmp	r3, r8
 80073c6:	dcf0      	bgt.n	80073aa <_printf_float+0x40a>
 80073c8:	e6f9      	b.n	80071be <_printf_float+0x21e>
 80073ca:	f04f 0800 	mov.w	r8, #0
 80073ce:	f104 0919 	add.w	r9, r4, #25
 80073d2:	e7f4      	b.n	80073be <_printf_float+0x41e>

080073d4 <_printf_common>:
 80073d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80073d8:	4616      	mov	r6, r2
 80073da:	4699      	mov	r9, r3
 80073dc:	688a      	ldr	r2, [r1, #8]
 80073de:	690b      	ldr	r3, [r1, #16]
 80073e0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80073e4:	4293      	cmp	r3, r2
 80073e6:	bfb8      	it	lt
 80073e8:	4613      	movlt	r3, r2
 80073ea:	6033      	str	r3, [r6, #0]
 80073ec:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80073f0:	4607      	mov	r7, r0
 80073f2:	460c      	mov	r4, r1
 80073f4:	b10a      	cbz	r2, 80073fa <_printf_common+0x26>
 80073f6:	3301      	adds	r3, #1
 80073f8:	6033      	str	r3, [r6, #0]
 80073fa:	6823      	ldr	r3, [r4, #0]
 80073fc:	0699      	lsls	r1, r3, #26
 80073fe:	bf42      	ittt	mi
 8007400:	6833      	ldrmi	r3, [r6, #0]
 8007402:	3302      	addmi	r3, #2
 8007404:	6033      	strmi	r3, [r6, #0]
 8007406:	6825      	ldr	r5, [r4, #0]
 8007408:	f015 0506 	ands.w	r5, r5, #6
 800740c:	d106      	bne.n	800741c <_printf_common+0x48>
 800740e:	f104 0a19 	add.w	sl, r4, #25
 8007412:	68e3      	ldr	r3, [r4, #12]
 8007414:	6832      	ldr	r2, [r6, #0]
 8007416:	1a9b      	subs	r3, r3, r2
 8007418:	42ab      	cmp	r3, r5
 800741a:	dc26      	bgt.n	800746a <_printf_common+0x96>
 800741c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007420:	1e13      	subs	r3, r2, #0
 8007422:	6822      	ldr	r2, [r4, #0]
 8007424:	bf18      	it	ne
 8007426:	2301      	movne	r3, #1
 8007428:	0692      	lsls	r2, r2, #26
 800742a:	d42b      	bmi.n	8007484 <_printf_common+0xb0>
 800742c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007430:	4649      	mov	r1, r9
 8007432:	4638      	mov	r0, r7
 8007434:	47c0      	blx	r8
 8007436:	3001      	adds	r0, #1
 8007438:	d01e      	beq.n	8007478 <_printf_common+0xa4>
 800743a:	6823      	ldr	r3, [r4, #0]
 800743c:	6922      	ldr	r2, [r4, #16]
 800743e:	f003 0306 	and.w	r3, r3, #6
 8007442:	2b04      	cmp	r3, #4
 8007444:	bf02      	ittt	eq
 8007446:	68e5      	ldreq	r5, [r4, #12]
 8007448:	6833      	ldreq	r3, [r6, #0]
 800744a:	1aed      	subeq	r5, r5, r3
 800744c:	68a3      	ldr	r3, [r4, #8]
 800744e:	bf0c      	ite	eq
 8007450:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007454:	2500      	movne	r5, #0
 8007456:	4293      	cmp	r3, r2
 8007458:	bfc4      	itt	gt
 800745a:	1a9b      	subgt	r3, r3, r2
 800745c:	18ed      	addgt	r5, r5, r3
 800745e:	2600      	movs	r6, #0
 8007460:	341a      	adds	r4, #26
 8007462:	42b5      	cmp	r5, r6
 8007464:	d11a      	bne.n	800749c <_printf_common+0xc8>
 8007466:	2000      	movs	r0, #0
 8007468:	e008      	b.n	800747c <_printf_common+0xa8>
 800746a:	2301      	movs	r3, #1
 800746c:	4652      	mov	r2, sl
 800746e:	4649      	mov	r1, r9
 8007470:	4638      	mov	r0, r7
 8007472:	47c0      	blx	r8
 8007474:	3001      	adds	r0, #1
 8007476:	d103      	bne.n	8007480 <_printf_common+0xac>
 8007478:	f04f 30ff 	mov.w	r0, #4294967295
 800747c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007480:	3501      	adds	r5, #1
 8007482:	e7c6      	b.n	8007412 <_printf_common+0x3e>
 8007484:	18e1      	adds	r1, r4, r3
 8007486:	1c5a      	adds	r2, r3, #1
 8007488:	2030      	movs	r0, #48	; 0x30
 800748a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800748e:	4422      	add	r2, r4
 8007490:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007494:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007498:	3302      	adds	r3, #2
 800749a:	e7c7      	b.n	800742c <_printf_common+0x58>
 800749c:	2301      	movs	r3, #1
 800749e:	4622      	mov	r2, r4
 80074a0:	4649      	mov	r1, r9
 80074a2:	4638      	mov	r0, r7
 80074a4:	47c0      	blx	r8
 80074a6:	3001      	adds	r0, #1
 80074a8:	d0e6      	beq.n	8007478 <_printf_common+0xa4>
 80074aa:	3601      	adds	r6, #1
 80074ac:	e7d9      	b.n	8007462 <_printf_common+0x8e>
	...

080074b0 <_printf_i>:
 80074b0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80074b4:	7e0f      	ldrb	r7, [r1, #24]
 80074b6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80074b8:	2f78      	cmp	r7, #120	; 0x78
 80074ba:	4691      	mov	r9, r2
 80074bc:	4680      	mov	r8, r0
 80074be:	460c      	mov	r4, r1
 80074c0:	469a      	mov	sl, r3
 80074c2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80074c6:	d807      	bhi.n	80074d8 <_printf_i+0x28>
 80074c8:	2f62      	cmp	r7, #98	; 0x62
 80074ca:	d80a      	bhi.n	80074e2 <_printf_i+0x32>
 80074cc:	2f00      	cmp	r7, #0
 80074ce:	f000 80d4 	beq.w	800767a <_printf_i+0x1ca>
 80074d2:	2f58      	cmp	r7, #88	; 0x58
 80074d4:	f000 80c0 	beq.w	8007658 <_printf_i+0x1a8>
 80074d8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80074dc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80074e0:	e03a      	b.n	8007558 <_printf_i+0xa8>
 80074e2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80074e6:	2b15      	cmp	r3, #21
 80074e8:	d8f6      	bhi.n	80074d8 <_printf_i+0x28>
 80074ea:	a101      	add	r1, pc, #4	; (adr r1, 80074f0 <_printf_i+0x40>)
 80074ec:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80074f0:	08007549 	.word	0x08007549
 80074f4:	0800755d 	.word	0x0800755d
 80074f8:	080074d9 	.word	0x080074d9
 80074fc:	080074d9 	.word	0x080074d9
 8007500:	080074d9 	.word	0x080074d9
 8007504:	080074d9 	.word	0x080074d9
 8007508:	0800755d 	.word	0x0800755d
 800750c:	080074d9 	.word	0x080074d9
 8007510:	080074d9 	.word	0x080074d9
 8007514:	080074d9 	.word	0x080074d9
 8007518:	080074d9 	.word	0x080074d9
 800751c:	08007661 	.word	0x08007661
 8007520:	08007589 	.word	0x08007589
 8007524:	0800761b 	.word	0x0800761b
 8007528:	080074d9 	.word	0x080074d9
 800752c:	080074d9 	.word	0x080074d9
 8007530:	08007683 	.word	0x08007683
 8007534:	080074d9 	.word	0x080074d9
 8007538:	08007589 	.word	0x08007589
 800753c:	080074d9 	.word	0x080074d9
 8007540:	080074d9 	.word	0x080074d9
 8007544:	08007623 	.word	0x08007623
 8007548:	682b      	ldr	r3, [r5, #0]
 800754a:	1d1a      	adds	r2, r3, #4
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	602a      	str	r2, [r5, #0]
 8007550:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007554:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007558:	2301      	movs	r3, #1
 800755a:	e09f      	b.n	800769c <_printf_i+0x1ec>
 800755c:	6820      	ldr	r0, [r4, #0]
 800755e:	682b      	ldr	r3, [r5, #0]
 8007560:	0607      	lsls	r7, r0, #24
 8007562:	f103 0104 	add.w	r1, r3, #4
 8007566:	6029      	str	r1, [r5, #0]
 8007568:	d501      	bpl.n	800756e <_printf_i+0xbe>
 800756a:	681e      	ldr	r6, [r3, #0]
 800756c:	e003      	b.n	8007576 <_printf_i+0xc6>
 800756e:	0646      	lsls	r6, r0, #25
 8007570:	d5fb      	bpl.n	800756a <_printf_i+0xba>
 8007572:	f9b3 6000 	ldrsh.w	r6, [r3]
 8007576:	2e00      	cmp	r6, #0
 8007578:	da03      	bge.n	8007582 <_printf_i+0xd2>
 800757a:	232d      	movs	r3, #45	; 0x2d
 800757c:	4276      	negs	r6, r6
 800757e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007582:	485a      	ldr	r0, [pc, #360]	; (80076ec <_printf_i+0x23c>)
 8007584:	230a      	movs	r3, #10
 8007586:	e012      	b.n	80075ae <_printf_i+0xfe>
 8007588:	682b      	ldr	r3, [r5, #0]
 800758a:	6820      	ldr	r0, [r4, #0]
 800758c:	1d19      	adds	r1, r3, #4
 800758e:	6029      	str	r1, [r5, #0]
 8007590:	0605      	lsls	r5, r0, #24
 8007592:	d501      	bpl.n	8007598 <_printf_i+0xe8>
 8007594:	681e      	ldr	r6, [r3, #0]
 8007596:	e002      	b.n	800759e <_printf_i+0xee>
 8007598:	0641      	lsls	r1, r0, #25
 800759a:	d5fb      	bpl.n	8007594 <_printf_i+0xe4>
 800759c:	881e      	ldrh	r6, [r3, #0]
 800759e:	4853      	ldr	r0, [pc, #332]	; (80076ec <_printf_i+0x23c>)
 80075a0:	2f6f      	cmp	r7, #111	; 0x6f
 80075a2:	bf0c      	ite	eq
 80075a4:	2308      	moveq	r3, #8
 80075a6:	230a      	movne	r3, #10
 80075a8:	2100      	movs	r1, #0
 80075aa:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80075ae:	6865      	ldr	r5, [r4, #4]
 80075b0:	60a5      	str	r5, [r4, #8]
 80075b2:	2d00      	cmp	r5, #0
 80075b4:	bfa2      	ittt	ge
 80075b6:	6821      	ldrge	r1, [r4, #0]
 80075b8:	f021 0104 	bicge.w	r1, r1, #4
 80075bc:	6021      	strge	r1, [r4, #0]
 80075be:	b90e      	cbnz	r6, 80075c4 <_printf_i+0x114>
 80075c0:	2d00      	cmp	r5, #0
 80075c2:	d04b      	beq.n	800765c <_printf_i+0x1ac>
 80075c4:	4615      	mov	r5, r2
 80075c6:	fbb6 f1f3 	udiv	r1, r6, r3
 80075ca:	fb03 6711 	mls	r7, r3, r1, r6
 80075ce:	5dc7      	ldrb	r7, [r0, r7]
 80075d0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80075d4:	4637      	mov	r7, r6
 80075d6:	42bb      	cmp	r3, r7
 80075d8:	460e      	mov	r6, r1
 80075da:	d9f4      	bls.n	80075c6 <_printf_i+0x116>
 80075dc:	2b08      	cmp	r3, #8
 80075de:	d10b      	bne.n	80075f8 <_printf_i+0x148>
 80075e0:	6823      	ldr	r3, [r4, #0]
 80075e2:	07de      	lsls	r6, r3, #31
 80075e4:	d508      	bpl.n	80075f8 <_printf_i+0x148>
 80075e6:	6923      	ldr	r3, [r4, #16]
 80075e8:	6861      	ldr	r1, [r4, #4]
 80075ea:	4299      	cmp	r1, r3
 80075ec:	bfde      	ittt	le
 80075ee:	2330      	movle	r3, #48	; 0x30
 80075f0:	f805 3c01 	strble.w	r3, [r5, #-1]
 80075f4:	f105 35ff 	addle.w	r5, r5, #4294967295
 80075f8:	1b52      	subs	r2, r2, r5
 80075fa:	6122      	str	r2, [r4, #16]
 80075fc:	f8cd a000 	str.w	sl, [sp]
 8007600:	464b      	mov	r3, r9
 8007602:	aa03      	add	r2, sp, #12
 8007604:	4621      	mov	r1, r4
 8007606:	4640      	mov	r0, r8
 8007608:	f7ff fee4 	bl	80073d4 <_printf_common>
 800760c:	3001      	adds	r0, #1
 800760e:	d14a      	bne.n	80076a6 <_printf_i+0x1f6>
 8007610:	f04f 30ff 	mov.w	r0, #4294967295
 8007614:	b004      	add	sp, #16
 8007616:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800761a:	6823      	ldr	r3, [r4, #0]
 800761c:	f043 0320 	orr.w	r3, r3, #32
 8007620:	6023      	str	r3, [r4, #0]
 8007622:	4833      	ldr	r0, [pc, #204]	; (80076f0 <_printf_i+0x240>)
 8007624:	2778      	movs	r7, #120	; 0x78
 8007626:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800762a:	6823      	ldr	r3, [r4, #0]
 800762c:	6829      	ldr	r1, [r5, #0]
 800762e:	061f      	lsls	r7, r3, #24
 8007630:	f851 6b04 	ldr.w	r6, [r1], #4
 8007634:	d402      	bmi.n	800763c <_printf_i+0x18c>
 8007636:	065f      	lsls	r7, r3, #25
 8007638:	bf48      	it	mi
 800763a:	b2b6      	uxthmi	r6, r6
 800763c:	07df      	lsls	r7, r3, #31
 800763e:	bf48      	it	mi
 8007640:	f043 0320 	orrmi.w	r3, r3, #32
 8007644:	6029      	str	r1, [r5, #0]
 8007646:	bf48      	it	mi
 8007648:	6023      	strmi	r3, [r4, #0]
 800764a:	b91e      	cbnz	r6, 8007654 <_printf_i+0x1a4>
 800764c:	6823      	ldr	r3, [r4, #0]
 800764e:	f023 0320 	bic.w	r3, r3, #32
 8007652:	6023      	str	r3, [r4, #0]
 8007654:	2310      	movs	r3, #16
 8007656:	e7a7      	b.n	80075a8 <_printf_i+0xf8>
 8007658:	4824      	ldr	r0, [pc, #144]	; (80076ec <_printf_i+0x23c>)
 800765a:	e7e4      	b.n	8007626 <_printf_i+0x176>
 800765c:	4615      	mov	r5, r2
 800765e:	e7bd      	b.n	80075dc <_printf_i+0x12c>
 8007660:	682b      	ldr	r3, [r5, #0]
 8007662:	6826      	ldr	r6, [r4, #0]
 8007664:	6961      	ldr	r1, [r4, #20]
 8007666:	1d18      	adds	r0, r3, #4
 8007668:	6028      	str	r0, [r5, #0]
 800766a:	0635      	lsls	r5, r6, #24
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	d501      	bpl.n	8007674 <_printf_i+0x1c4>
 8007670:	6019      	str	r1, [r3, #0]
 8007672:	e002      	b.n	800767a <_printf_i+0x1ca>
 8007674:	0670      	lsls	r0, r6, #25
 8007676:	d5fb      	bpl.n	8007670 <_printf_i+0x1c0>
 8007678:	8019      	strh	r1, [r3, #0]
 800767a:	2300      	movs	r3, #0
 800767c:	6123      	str	r3, [r4, #16]
 800767e:	4615      	mov	r5, r2
 8007680:	e7bc      	b.n	80075fc <_printf_i+0x14c>
 8007682:	682b      	ldr	r3, [r5, #0]
 8007684:	1d1a      	adds	r2, r3, #4
 8007686:	602a      	str	r2, [r5, #0]
 8007688:	681d      	ldr	r5, [r3, #0]
 800768a:	6862      	ldr	r2, [r4, #4]
 800768c:	2100      	movs	r1, #0
 800768e:	4628      	mov	r0, r5
 8007690:	f7f8 fdd6 	bl	8000240 <memchr>
 8007694:	b108      	cbz	r0, 800769a <_printf_i+0x1ea>
 8007696:	1b40      	subs	r0, r0, r5
 8007698:	6060      	str	r0, [r4, #4]
 800769a:	6863      	ldr	r3, [r4, #4]
 800769c:	6123      	str	r3, [r4, #16]
 800769e:	2300      	movs	r3, #0
 80076a0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80076a4:	e7aa      	b.n	80075fc <_printf_i+0x14c>
 80076a6:	6923      	ldr	r3, [r4, #16]
 80076a8:	462a      	mov	r2, r5
 80076aa:	4649      	mov	r1, r9
 80076ac:	4640      	mov	r0, r8
 80076ae:	47d0      	blx	sl
 80076b0:	3001      	adds	r0, #1
 80076b2:	d0ad      	beq.n	8007610 <_printf_i+0x160>
 80076b4:	6823      	ldr	r3, [r4, #0]
 80076b6:	079b      	lsls	r3, r3, #30
 80076b8:	d413      	bmi.n	80076e2 <_printf_i+0x232>
 80076ba:	68e0      	ldr	r0, [r4, #12]
 80076bc:	9b03      	ldr	r3, [sp, #12]
 80076be:	4298      	cmp	r0, r3
 80076c0:	bfb8      	it	lt
 80076c2:	4618      	movlt	r0, r3
 80076c4:	e7a6      	b.n	8007614 <_printf_i+0x164>
 80076c6:	2301      	movs	r3, #1
 80076c8:	4632      	mov	r2, r6
 80076ca:	4649      	mov	r1, r9
 80076cc:	4640      	mov	r0, r8
 80076ce:	47d0      	blx	sl
 80076d0:	3001      	adds	r0, #1
 80076d2:	d09d      	beq.n	8007610 <_printf_i+0x160>
 80076d4:	3501      	adds	r5, #1
 80076d6:	68e3      	ldr	r3, [r4, #12]
 80076d8:	9903      	ldr	r1, [sp, #12]
 80076da:	1a5b      	subs	r3, r3, r1
 80076dc:	42ab      	cmp	r3, r5
 80076de:	dcf2      	bgt.n	80076c6 <_printf_i+0x216>
 80076e0:	e7eb      	b.n	80076ba <_printf_i+0x20a>
 80076e2:	2500      	movs	r5, #0
 80076e4:	f104 0619 	add.w	r6, r4, #25
 80076e8:	e7f5      	b.n	80076d6 <_printf_i+0x226>
 80076ea:	bf00      	nop
 80076ec:	0802fb26 	.word	0x0802fb26
 80076f0:	0802fb37 	.word	0x0802fb37

080076f4 <std>:
 80076f4:	2300      	movs	r3, #0
 80076f6:	b510      	push	{r4, lr}
 80076f8:	4604      	mov	r4, r0
 80076fa:	e9c0 3300 	strd	r3, r3, [r0]
 80076fe:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007702:	6083      	str	r3, [r0, #8]
 8007704:	8181      	strh	r1, [r0, #12]
 8007706:	6643      	str	r3, [r0, #100]	; 0x64
 8007708:	81c2      	strh	r2, [r0, #14]
 800770a:	6183      	str	r3, [r0, #24]
 800770c:	4619      	mov	r1, r3
 800770e:	2208      	movs	r2, #8
 8007710:	305c      	adds	r0, #92	; 0x5c
 8007712:	f000 f914 	bl	800793e <memset>
 8007716:	4b0d      	ldr	r3, [pc, #52]	; (800774c <std+0x58>)
 8007718:	6263      	str	r3, [r4, #36]	; 0x24
 800771a:	4b0d      	ldr	r3, [pc, #52]	; (8007750 <std+0x5c>)
 800771c:	62a3      	str	r3, [r4, #40]	; 0x28
 800771e:	4b0d      	ldr	r3, [pc, #52]	; (8007754 <std+0x60>)
 8007720:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007722:	4b0d      	ldr	r3, [pc, #52]	; (8007758 <std+0x64>)
 8007724:	6323      	str	r3, [r4, #48]	; 0x30
 8007726:	4b0d      	ldr	r3, [pc, #52]	; (800775c <std+0x68>)
 8007728:	6224      	str	r4, [r4, #32]
 800772a:	429c      	cmp	r4, r3
 800772c:	d006      	beq.n	800773c <std+0x48>
 800772e:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8007732:	4294      	cmp	r4, r2
 8007734:	d002      	beq.n	800773c <std+0x48>
 8007736:	33d0      	adds	r3, #208	; 0xd0
 8007738:	429c      	cmp	r4, r3
 800773a:	d105      	bne.n	8007748 <std+0x54>
 800773c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007740:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007744:	f000 b978 	b.w	8007a38 <__retarget_lock_init_recursive>
 8007748:	bd10      	pop	{r4, pc}
 800774a:	bf00      	nop
 800774c:	080078b9 	.word	0x080078b9
 8007750:	080078db 	.word	0x080078db
 8007754:	08007913 	.word	0x08007913
 8007758:	08007937 	.word	0x08007937
 800775c:	20000458 	.word	0x20000458

08007760 <stdio_exit_handler>:
 8007760:	4a02      	ldr	r2, [pc, #8]	; (800776c <stdio_exit_handler+0xc>)
 8007762:	4903      	ldr	r1, [pc, #12]	; (8007770 <stdio_exit_handler+0x10>)
 8007764:	4803      	ldr	r0, [pc, #12]	; (8007774 <stdio_exit_handler+0x14>)
 8007766:	f000 b869 	b.w	800783c <_fwalk_sglue>
 800776a:	bf00      	nop
 800776c:	2000002c 	.word	0x2000002c
 8007770:	080092dd 	.word	0x080092dd
 8007774:	20000038 	.word	0x20000038

08007778 <cleanup_stdio>:
 8007778:	6841      	ldr	r1, [r0, #4]
 800777a:	4b0c      	ldr	r3, [pc, #48]	; (80077ac <cleanup_stdio+0x34>)
 800777c:	4299      	cmp	r1, r3
 800777e:	b510      	push	{r4, lr}
 8007780:	4604      	mov	r4, r0
 8007782:	d001      	beq.n	8007788 <cleanup_stdio+0x10>
 8007784:	f001 fdaa 	bl	80092dc <_fflush_r>
 8007788:	68a1      	ldr	r1, [r4, #8]
 800778a:	4b09      	ldr	r3, [pc, #36]	; (80077b0 <cleanup_stdio+0x38>)
 800778c:	4299      	cmp	r1, r3
 800778e:	d002      	beq.n	8007796 <cleanup_stdio+0x1e>
 8007790:	4620      	mov	r0, r4
 8007792:	f001 fda3 	bl	80092dc <_fflush_r>
 8007796:	68e1      	ldr	r1, [r4, #12]
 8007798:	4b06      	ldr	r3, [pc, #24]	; (80077b4 <cleanup_stdio+0x3c>)
 800779a:	4299      	cmp	r1, r3
 800779c:	d004      	beq.n	80077a8 <cleanup_stdio+0x30>
 800779e:	4620      	mov	r0, r4
 80077a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80077a4:	f001 bd9a 	b.w	80092dc <_fflush_r>
 80077a8:	bd10      	pop	{r4, pc}
 80077aa:	bf00      	nop
 80077ac:	20000458 	.word	0x20000458
 80077b0:	200004c0 	.word	0x200004c0
 80077b4:	20000528 	.word	0x20000528

080077b8 <global_stdio_init.part.0>:
 80077b8:	b510      	push	{r4, lr}
 80077ba:	4b0b      	ldr	r3, [pc, #44]	; (80077e8 <global_stdio_init.part.0+0x30>)
 80077bc:	4c0b      	ldr	r4, [pc, #44]	; (80077ec <global_stdio_init.part.0+0x34>)
 80077be:	4a0c      	ldr	r2, [pc, #48]	; (80077f0 <global_stdio_init.part.0+0x38>)
 80077c0:	601a      	str	r2, [r3, #0]
 80077c2:	4620      	mov	r0, r4
 80077c4:	2200      	movs	r2, #0
 80077c6:	2104      	movs	r1, #4
 80077c8:	f7ff ff94 	bl	80076f4 <std>
 80077cc:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80077d0:	2201      	movs	r2, #1
 80077d2:	2109      	movs	r1, #9
 80077d4:	f7ff ff8e 	bl	80076f4 <std>
 80077d8:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80077dc:	2202      	movs	r2, #2
 80077de:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80077e2:	2112      	movs	r1, #18
 80077e4:	f7ff bf86 	b.w	80076f4 <std>
 80077e8:	20000590 	.word	0x20000590
 80077ec:	20000458 	.word	0x20000458
 80077f0:	08007761 	.word	0x08007761

080077f4 <__sfp_lock_acquire>:
 80077f4:	4801      	ldr	r0, [pc, #4]	; (80077fc <__sfp_lock_acquire+0x8>)
 80077f6:	f000 b920 	b.w	8007a3a <__retarget_lock_acquire_recursive>
 80077fa:	bf00      	nop
 80077fc:	20000599 	.word	0x20000599

08007800 <__sfp_lock_release>:
 8007800:	4801      	ldr	r0, [pc, #4]	; (8007808 <__sfp_lock_release+0x8>)
 8007802:	f000 b91b 	b.w	8007a3c <__retarget_lock_release_recursive>
 8007806:	bf00      	nop
 8007808:	20000599 	.word	0x20000599

0800780c <__sinit>:
 800780c:	b510      	push	{r4, lr}
 800780e:	4604      	mov	r4, r0
 8007810:	f7ff fff0 	bl	80077f4 <__sfp_lock_acquire>
 8007814:	6a23      	ldr	r3, [r4, #32]
 8007816:	b11b      	cbz	r3, 8007820 <__sinit+0x14>
 8007818:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800781c:	f7ff bff0 	b.w	8007800 <__sfp_lock_release>
 8007820:	4b04      	ldr	r3, [pc, #16]	; (8007834 <__sinit+0x28>)
 8007822:	6223      	str	r3, [r4, #32]
 8007824:	4b04      	ldr	r3, [pc, #16]	; (8007838 <__sinit+0x2c>)
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	2b00      	cmp	r3, #0
 800782a:	d1f5      	bne.n	8007818 <__sinit+0xc>
 800782c:	f7ff ffc4 	bl	80077b8 <global_stdio_init.part.0>
 8007830:	e7f2      	b.n	8007818 <__sinit+0xc>
 8007832:	bf00      	nop
 8007834:	08007779 	.word	0x08007779
 8007838:	20000590 	.word	0x20000590

0800783c <_fwalk_sglue>:
 800783c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007840:	4607      	mov	r7, r0
 8007842:	4688      	mov	r8, r1
 8007844:	4614      	mov	r4, r2
 8007846:	2600      	movs	r6, #0
 8007848:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800784c:	f1b9 0901 	subs.w	r9, r9, #1
 8007850:	d505      	bpl.n	800785e <_fwalk_sglue+0x22>
 8007852:	6824      	ldr	r4, [r4, #0]
 8007854:	2c00      	cmp	r4, #0
 8007856:	d1f7      	bne.n	8007848 <_fwalk_sglue+0xc>
 8007858:	4630      	mov	r0, r6
 800785a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800785e:	89ab      	ldrh	r3, [r5, #12]
 8007860:	2b01      	cmp	r3, #1
 8007862:	d907      	bls.n	8007874 <_fwalk_sglue+0x38>
 8007864:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007868:	3301      	adds	r3, #1
 800786a:	d003      	beq.n	8007874 <_fwalk_sglue+0x38>
 800786c:	4629      	mov	r1, r5
 800786e:	4638      	mov	r0, r7
 8007870:	47c0      	blx	r8
 8007872:	4306      	orrs	r6, r0
 8007874:	3568      	adds	r5, #104	; 0x68
 8007876:	e7e9      	b.n	800784c <_fwalk_sglue+0x10>

08007878 <siprintf>:
 8007878:	b40e      	push	{r1, r2, r3}
 800787a:	b500      	push	{lr}
 800787c:	b09c      	sub	sp, #112	; 0x70
 800787e:	ab1d      	add	r3, sp, #116	; 0x74
 8007880:	9002      	str	r0, [sp, #8]
 8007882:	9006      	str	r0, [sp, #24]
 8007884:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007888:	4809      	ldr	r0, [pc, #36]	; (80078b0 <siprintf+0x38>)
 800788a:	9107      	str	r1, [sp, #28]
 800788c:	9104      	str	r1, [sp, #16]
 800788e:	4909      	ldr	r1, [pc, #36]	; (80078b4 <siprintf+0x3c>)
 8007890:	f853 2b04 	ldr.w	r2, [r3], #4
 8007894:	9105      	str	r1, [sp, #20]
 8007896:	6800      	ldr	r0, [r0, #0]
 8007898:	9301      	str	r3, [sp, #4]
 800789a:	a902      	add	r1, sp, #8
 800789c:	f001 fb9a 	bl	8008fd4 <_svfiprintf_r>
 80078a0:	9b02      	ldr	r3, [sp, #8]
 80078a2:	2200      	movs	r2, #0
 80078a4:	701a      	strb	r2, [r3, #0]
 80078a6:	b01c      	add	sp, #112	; 0x70
 80078a8:	f85d eb04 	ldr.w	lr, [sp], #4
 80078ac:	b003      	add	sp, #12
 80078ae:	4770      	bx	lr
 80078b0:	20000084 	.word	0x20000084
 80078b4:	ffff0208 	.word	0xffff0208

080078b8 <__sread>:
 80078b8:	b510      	push	{r4, lr}
 80078ba:	460c      	mov	r4, r1
 80078bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80078c0:	f000 f86c 	bl	800799c <_read_r>
 80078c4:	2800      	cmp	r0, #0
 80078c6:	bfab      	itete	ge
 80078c8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80078ca:	89a3      	ldrhlt	r3, [r4, #12]
 80078cc:	181b      	addge	r3, r3, r0
 80078ce:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80078d2:	bfac      	ite	ge
 80078d4:	6563      	strge	r3, [r4, #84]	; 0x54
 80078d6:	81a3      	strhlt	r3, [r4, #12]
 80078d8:	bd10      	pop	{r4, pc}

080078da <__swrite>:
 80078da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80078de:	461f      	mov	r7, r3
 80078e0:	898b      	ldrh	r3, [r1, #12]
 80078e2:	05db      	lsls	r3, r3, #23
 80078e4:	4605      	mov	r5, r0
 80078e6:	460c      	mov	r4, r1
 80078e8:	4616      	mov	r6, r2
 80078ea:	d505      	bpl.n	80078f8 <__swrite+0x1e>
 80078ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80078f0:	2302      	movs	r3, #2
 80078f2:	2200      	movs	r2, #0
 80078f4:	f000 f840 	bl	8007978 <_lseek_r>
 80078f8:	89a3      	ldrh	r3, [r4, #12]
 80078fa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80078fe:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007902:	81a3      	strh	r3, [r4, #12]
 8007904:	4632      	mov	r2, r6
 8007906:	463b      	mov	r3, r7
 8007908:	4628      	mov	r0, r5
 800790a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800790e:	f000 b857 	b.w	80079c0 <_write_r>

08007912 <__sseek>:
 8007912:	b510      	push	{r4, lr}
 8007914:	460c      	mov	r4, r1
 8007916:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800791a:	f000 f82d 	bl	8007978 <_lseek_r>
 800791e:	1c43      	adds	r3, r0, #1
 8007920:	89a3      	ldrh	r3, [r4, #12]
 8007922:	bf15      	itete	ne
 8007924:	6560      	strne	r0, [r4, #84]	; 0x54
 8007926:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800792a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800792e:	81a3      	strheq	r3, [r4, #12]
 8007930:	bf18      	it	ne
 8007932:	81a3      	strhne	r3, [r4, #12]
 8007934:	bd10      	pop	{r4, pc}

08007936 <__sclose>:
 8007936:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800793a:	f000 b80d 	b.w	8007958 <_close_r>

0800793e <memset>:
 800793e:	4402      	add	r2, r0
 8007940:	4603      	mov	r3, r0
 8007942:	4293      	cmp	r3, r2
 8007944:	d100      	bne.n	8007948 <memset+0xa>
 8007946:	4770      	bx	lr
 8007948:	f803 1b01 	strb.w	r1, [r3], #1
 800794c:	e7f9      	b.n	8007942 <memset+0x4>
	...

08007950 <_localeconv_r>:
 8007950:	4800      	ldr	r0, [pc, #0]	; (8007954 <_localeconv_r+0x4>)
 8007952:	4770      	bx	lr
 8007954:	20000178 	.word	0x20000178

08007958 <_close_r>:
 8007958:	b538      	push	{r3, r4, r5, lr}
 800795a:	4d06      	ldr	r5, [pc, #24]	; (8007974 <_close_r+0x1c>)
 800795c:	2300      	movs	r3, #0
 800795e:	4604      	mov	r4, r0
 8007960:	4608      	mov	r0, r1
 8007962:	602b      	str	r3, [r5, #0]
 8007964:	f7f9 ff25 	bl	80017b2 <_close>
 8007968:	1c43      	adds	r3, r0, #1
 800796a:	d102      	bne.n	8007972 <_close_r+0x1a>
 800796c:	682b      	ldr	r3, [r5, #0]
 800796e:	b103      	cbz	r3, 8007972 <_close_r+0x1a>
 8007970:	6023      	str	r3, [r4, #0]
 8007972:	bd38      	pop	{r3, r4, r5, pc}
 8007974:	20000594 	.word	0x20000594

08007978 <_lseek_r>:
 8007978:	b538      	push	{r3, r4, r5, lr}
 800797a:	4d07      	ldr	r5, [pc, #28]	; (8007998 <_lseek_r+0x20>)
 800797c:	4604      	mov	r4, r0
 800797e:	4608      	mov	r0, r1
 8007980:	4611      	mov	r1, r2
 8007982:	2200      	movs	r2, #0
 8007984:	602a      	str	r2, [r5, #0]
 8007986:	461a      	mov	r2, r3
 8007988:	f7f9 ff3a 	bl	8001800 <_lseek>
 800798c:	1c43      	adds	r3, r0, #1
 800798e:	d102      	bne.n	8007996 <_lseek_r+0x1e>
 8007990:	682b      	ldr	r3, [r5, #0]
 8007992:	b103      	cbz	r3, 8007996 <_lseek_r+0x1e>
 8007994:	6023      	str	r3, [r4, #0]
 8007996:	bd38      	pop	{r3, r4, r5, pc}
 8007998:	20000594 	.word	0x20000594

0800799c <_read_r>:
 800799c:	b538      	push	{r3, r4, r5, lr}
 800799e:	4d07      	ldr	r5, [pc, #28]	; (80079bc <_read_r+0x20>)
 80079a0:	4604      	mov	r4, r0
 80079a2:	4608      	mov	r0, r1
 80079a4:	4611      	mov	r1, r2
 80079a6:	2200      	movs	r2, #0
 80079a8:	602a      	str	r2, [r5, #0]
 80079aa:	461a      	mov	r2, r3
 80079ac:	f7f9 fec8 	bl	8001740 <_read>
 80079b0:	1c43      	adds	r3, r0, #1
 80079b2:	d102      	bne.n	80079ba <_read_r+0x1e>
 80079b4:	682b      	ldr	r3, [r5, #0]
 80079b6:	b103      	cbz	r3, 80079ba <_read_r+0x1e>
 80079b8:	6023      	str	r3, [r4, #0]
 80079ba:	bd38      	pop	{r3, r4, r5, pc}
 80079bc:	20000594 	.word	0x20000594

080079c0 <_write_r>:
 80079c0:	b538      	push	{r3, r4, r5, lr}
 80079c2:	4d07      	ldr	r5, [pc, #28]	; (80079e0 <_write_r+0x20>)
 80079c4:	4604      	mov	r4, r0
 80079c6:	4608      	mov	r0, r1
 80079c8:	4611      	mov	r1, r2
 80079ca:	2200      	movs	r2, #0
 80079cc:	602a      	str	r2, [r5, #0]
 80079ce:	461a      	mov	r2, r3
 80079d0:	f7f9 fed3 	bl	800177a <_write>
 80079d4:	1c43      	adds	r3, r0, #1
 80079d6:	d102      	bne.n	80079de <_write_r+0x1e>
 80079d8:	682b      	ldr	r3, [r5, #0]
 80079da:	b103      	cbz	r3, 80079de <_write_r+0x1e>
 80079dc:	6023      	str	r3, [r4, #0]
 80079de:	bd38      	pop	{r3, r4, r5, pc}
 80079e0:	20000594 	.word	0x20000594

080079e4 <__errno>:
 80079e4:	4b01      	ldr	r3, [pc, #4]	; (80079ec <__errno+0x8>)
 80079e6:	6818      	ldr	r0, [r3, #0]
 80079e8:	4770      	bx	lr
 80079ea:	bf00      	nop
 80079ec:	20000084 	.word	0x20000084

080079f0 <__libc_init_array>:
 80079f0:	b570      	push	{r4, r5, r6, lr}
 80079f2:	4d0d      	ldr	r5, [pc, #52]	; (8007a28 <__libc_init_array+0x38>)
 80079f4:	4c0d      	ldr	r4, [pc, #52]	; (8007a2c <__libc_init_array+0x3c>)
 80079f6:	1b64      	subs	r4, r4, r5
 80079f8:	10a4      	asrs	r4, r4, #2
 80079fa:	2600      	movs	r6, #0
 80079fc:	42a6      	cmp	r6, r4
 80079fe:	d109      	bne.n	8007a14 <__libc_init_array+0x24>
 8007a00:	4d0b      	ldr	r5, [pc, #44]	; (8007a30 <__libc_init_array+0x40>)
 8007a02:	4c0c      	ldr	r4, [pc, #48]	; (8007a34 <__libc_init_array+0x44>)
 8007a04:	f002 fb28 	bl	800a058 <_init>
 8007a08:	1b64      	subs	r4, r4, r5
 8007a0a:	10a4      	asrs	r4, r4, #2
 8007a0c:	2600      	movs	r6, #0
 8007a0e:	42a6      	cmp	r6, r4
 8007a10:	d105      	bne.n	8007a1e <__libc_init_array+0x2e>
 8007a12:	bd70      	pop	{r4, r5, r6, pc}
 8007a14:	f855 3b04 	ldr.w	r3, [r5], #4
 8007a18:	4798      	blx	r3
 8007a1a:	3601      	adds	r6, #1
 8007a1c:	e7ee      	b.n	80079fc <__libc_init_array+0xc>
 8007a1e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007a22:	4798      	blx	r3
 8007a24:	3601      	adds	r6, #1
 8007a26:	e7f2      	b.n	8007a0e <__libc_init_array+0x1e>
 8007a28:	08031748 	.word	0x08031748
 8007a2c:	08031748 	.word	0x08031748
 8007a30:	08031748 	.word	0x08031748
 8007a34:	0803174c 	.word	0x0803174c

08007a38 <__retarget_lock_init_recursive>:
 8007a38:	4770      	bx	lr

08007a3a <__retarget_lock_acquire_recursive>:
 8007a3a:	4770      	bx	lr

08007a3c <__retarget_lock_release_recursive>:
 8007a3c:	4770      	bx	lr

08007a3e <quorem>:
 8007a3e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a42:	6903      	ldr	r3, [r0, #16]
 8007a44:	690c      	ldr	r4, [r1, #16]
 8007a46:	42a3      	cmp	r3, r4
 8007a48:	4607      	mov	r7, r0
 8007a4a:	db7e      	blt.n	8007b4a <quorem+0x10c>
 8007a4c:	3c01      	subs	r4, #1
 8007a4e:	f101 0814 	add.w	r8, r1, #20
 8007a52:	f100 0514 	add.w	r5, r0, #20
 8007a56:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007a5a:	9301      	str	r3, [sp, #4]
 8007a5c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007a60:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007a64:	3301      	adds	r3, #1
 8007a66:	429a      	cmp	r2, r3
 8007a68:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8007a6c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007a70:	fbb2 f6f3 	udiv	r6, r2, r3
 8007a74:	d331      	bcc.n	8007ada <quorem+0x9c>
 8007a76:	f04f 0e00 	mov.w	lr, #0
 8007a7a:	4640      	mov	r0, r8
 8007a7c:	46ac      	mov	ip, r5
 8007a7e:	46f2      	mov	sl, lr
 8007a80:	f850 2b04 	ldr.w	r2, [r0], #4
 8007a84:	b293      	uxth	r3, r2
 8007a86:	fb06 e303 	mla	r3, r6, r3, lr
 8007a8a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8007a8e:	0c1a      	lsrs	r2, r3, #16
 8007a90:	b29b      	uxth	r3, r3
 8007a92:	ebaa 0303 	sub.w	r3, sl, r3
 8007a96:	f8dc a000 	ldr.w	sl, [ip]
 8007a9a:	fa13 f38a 	uxtah	r3, r3, sl
 8007a9e:	fb06 220e 	mla	r2, r6, lr, r2
 8007aa2:	9300      	str	r3, [sp, #0]
 8007aa4:	9b00      	ldr	r3, [sp, #0]
 8007aa6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8007aaa:	b292      	uxth	r2, r2
 8007aac:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8007ab0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007ab4:	f8bd 3000 	ldrh.w	r3, [sp]
 8007ab8:	4581      	cmp	r9, r0
 8007aba:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007abe:	f84c 3b04 	str.w	r3, [ip], #4
 8007ac2:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8007ac6:	d2db      	bcs.n	8007a80 <quorem+0x42>
 8007ac8:	f855 300b 	ldr.w	r3, [r5, fp]
 8007acc:	b92b      	cbnz	r3, 8007ada <quorem+0x9c>
 8007ace:	9b01      	ldr	r3, [sp, #4]
 8007ad0:	3b04      	subs	r3, #4
 8007ad2:	429d      	cmp	r5, r3
 8007ad4:	461a      	mov	r2, r3
 8007ad6:	d32c      	bcc.n	8007b32 <quorem+0xf4>
 8007ad8:	613c      	str	r4, [r7, #16]
 8007ada:	4638      	mov	r0, r7
 8007adc:	f001 f920 	bl	8008d20 <__mcmp>
 8007ae0:	2800      	cmp	r0, #0
 8007ae2:	db22      	blt.n	8007b2a <quorem+0xec>
 8007ae4:	3601      	adds	r6, #1
 8007ae6:	4629      	mov	r1, r5
 8007ae8:	2000      	movs	r0, #0
 8007aea:	f858 2b04 	ldr.w	r2, [r8], #4
 8007aee:	f8d1 c000 	ldr.w	ip, [r1]
 8007af2:	b293      	uxth	r3, r2
 8007af4:	1ac3      	subs	r3, r0, r3
 8007af6:	0c12      	lsrs	r2, r2, #16
 8007af8:	fa13 f38c 	uxtah	r3, r3, ip
 8007afc:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8007b00:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007b04:	b29b      	uxth	r3, r3
 8007b06:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007b0a:	45c1      	cmp	r9, r8
 8007b0c:	f841 3b04 	str.w	r3, [r1], #4
 8007b10:	ea4f 4022 	mov.w	r0, r2, asr #16
 8007b14:	d2e9      	bcs.n	8007aea <quorem+0xac>
 8007b16:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007b1a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007b1e:	b922      	cbnz	r2, 8007b2a <quorem+0xec>
 8007b20:	3b04      	subs	r3, #4
 8007b22:	429d      	cmp	r5, r3
 8007b24:	461a      	mov	r2, r3
 8007b26:	d30a      	bcc.n	8007b3e <quorem+0x100>
 8007b28:	613c      	str	r4, [r7, #16]
 8007b2a:	4630      	mov	r0, r6
 8007b2c:	b003      	add	sp, #12
 8007b2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b32:	6812      	ldr	r2, [r2, #0]
 8007b34:	3b04      	subs	r3, #4
 8007b36:	2a00      	cmp	r2, #0
 8007b38:	d1ce      	bne.n	8007ad8 <quorem+0x9a>
 8007b3a:	3c01      	subs	r4, #1
 8007b3c:	e7c9      	b.n	8007ad2 <quorem+0x94>
 8007b3e:	6812      	ldr	r2, [r2, #0]
 8007b40:	3b04      	subs	r3, #4
 8007b42:	2a00      	cmp	r2, #0
 8007b44:	d1f0      	bne.n	8007b28 <quorem+0xea>
 8007b46:	3c01      	subs	r4, #1
 8007b48:	e7eb      	b.n	8007b22 <quorem+0xe4>
 8007b4a:	2000      	movs	r0, #0
 8007b4c:	e7ee      	b.n	8007b2c <quorem+0xee>
	...

08007b50 <_dtoa_r>:
 8007b50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b54:	ed2d 8b02 	vpush	{d8}
 8007b58:	69c5      	ldr	r5, [r0, #28]
 8007b5a:	b091      	sub	sp, #68	; 0x44
 8007b5c:	ed8d 0b02 	vstr	d0, [sp, #8]
 8007b60:	ec59 8b10 	vmov	r8, r9, d0
 8007b64:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 8007b66:	9106      	str	r1, [sp, #24]
 8007b68:	4606      	mov	r6, r0
 8007b6a:	9208      	str	r2, [sp, #32]
 8007b6c:	930c      	str	r3, [sp, #48]	; 0x30
 8007b6e:	b975      	cbnz	r5, 8007b8e <_dtoa_r+0x3e>
 8007b70:	2010      	movs	r0, #16
 8007b72:	f000 fda5 	bl	80086c0 <malloc>
 8007b76:	4602      	mov	r2, r0
 8007b78:	61f0      	str	r0, [r6, #28]
 8007b7a:	b920      	cbnz	r0, 8007b86 <_dtoa_r+0x36>
 8007b7c:	4ba6      	ldr	r3, [pc, #664]	; (8007e18 <_dtoa_r+0x2c8>)
 8007b7e:	21ef      	movs	r1, #239	; 0xef
 8007b80:	48a6      	ldr	r0, [pc, #664]	; (8007e1c <_dtoa_r+0x2cc>)
 8007b82:	f001 fc0b 	bl	800939c <__assert_func>
 8007b86:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8007b8a:	6005      	str	r5, [r0, #0]
 8007b8c:	60c5      	str	r5, [r0, #12]
 8007b8e:	69f3      	ldr	r3, [r6, #28]
 8007b90:	6819      	ldr	r1, [r3, #0]
 8007b92:	b151      	cbz	r1, 8007baa <_dtoa_r+0x5a>
 8007b94:	685a      	ldr	r2, [r3, #4]
 8007b96:	604a      	str	r2, [r1, #4]
 8007b98:	2301      	movs	r3, #1
 8007b9a:	4093      	lsls	r3, r2
 8007b9c:	608b      	str	r3, [r1, #8]
 8007b9e:	4630      	mov	r0, r6
 8007ba0:	f000 fe82 	bl	80088a8 <_Bfree>
 8007ba4:	69f3      	ldr	r3, [r6, #28]
 8007ba6:	2200      	movs	r2, #0
 8007ba8:	601a      	str	r2, [r3, #0]
 8007baa:	f1b9 0300 	subs.w	r3, r9, #0
 8007bae:	bfbb      	ittet	lt
 8007bb0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8007bb4:	9303      	strlt	r3, [sp, #12]
 8007bb6:	2300      	movge	r3, #0
 8007bb8:	2201      	movlt	r2, #1
 8007bba:	bfac      	ite	ge
 8007bbc:	6023      	strge	r3, [r4, #0]
 8007bbe:	6022      	strlt	r2, [r4, #0]
 8007bc0:	4b97      	ldr	r3, [pc, #604]	; (8007e20 <_dtoa_r+0x2d0>)
 8007bc2:	9c03      	ldr	r4, [sp, #12]
 8007bc4:	43a3      	bics	r3, r4
 8007bc6:	d11c      	bne.n	8007c02 <_dtoa_r+0xb2>
 8007bc8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007bca:	f242 730f 	movw	r3, #9999	; 0x270f
 8007bce:	6013      	str	r3, [r2, #0]
 8007bd0:	f3c4 0313 	ubfx	r3, r4, #0, #20
 8007bd4:	ea53 0308 	orrs.w	r3, r3, r8
 8007bd8:	f000 84fb 	beq.w	80085d2 <_dtoa_r+0xa82>
 8007bdc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8007bde:	b963      	cbnz	r3, 8007bfa <_dtoa_r+0xaa>
 8007be0:	4b90      	ldr	r3, [pc, #576]	; (8007e24 <_dtoa_r+0x2d4>)
 8007be2:	e020      	b.n	8007c26 <_dtoa_r+0xd6>
 8007be4:	4b90      	ldr	r3, [pc, #576]	; (8007e28 <_dtoa_r+0x2d8>)
 8007be6:	9301      	str	r3, [sp, #4]
 8007be8:	3308      	adds	r3, #8
 8007bea:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8007bec:	6013      	str	r3, [r2, #0]
 8007bee:	9801      	ldr	r0, [sp, #4]
 8007bf0:	b011      	add	sp, #68	; 0x44
 8007bf2:	ecbd 8b02 	vpop	{d8}
 8007bf6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007bfa:	4b8a      	ldr	r3, [pc, #552]	; (8007e24 <_dtoa_r+0x2d4>)
 8007bfc:	9301      	str	r3, [sp, #4]
 8007bfe:	3303      	adds	r3, #3
 8007c00:	e7f3      	b.n	8007bea <_dtoa_r+0x9a>
 8007c02:	ed9d 8b02 	vldr	d8, [sp, #8]
 8007c06:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8007c0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007c0e:	d10c      	bne.n	8007c2a <_dtoa_r+0xda>
 8007c10:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007c12:	2301      	movs	r3, #1
 8007c14:	6013      	str	r3, [r2, #0]
 8007c16:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	f000 84d7 	beq.w	80085cc <_dtoa_r+0xa7c>
 8007c1e:	4b83      	ldr	r3, [pc, #524]	; (8007e2c <_dtoa_r+0x2dc>)
 8007c20:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8007c22:	6013      	str	r3, [r2, #0]
 8007c24:	3b01      	subs	r3, #1
 8007c26:	9301      	str	r3, [sp, #4]
 8007c28:	e7e1      	b.n	8007bee <_dtoa_r+0x9e>
 8007c2a:	aa0e      	add	r2, sp, #56	; 0x38
 8007c2c:	a90f      	add	r1, sp, #60	; 0x3c
 8007c2e:	4630      	mov	r0, r6
 8007c30:	eeb0 0b48 	vmov.f64	d0, d8
 8007c34:	f001 f91a 	bl	8008e6c <__d2b>
 8007c38:	f3c4 530a 	ubfx	r3, r4, #20, #11
 8007c3c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007c3e:	4605      	mov	r5, r0
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	d046      	beq.n	8007cd2 <_dtoa_r+0x182>
 8007c44:	eeb0 7b48 	vmov.f64	d7, d8
 8007c48:	ee18 1a90 	vmov	r1, s17
 8007c4c:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8007c50:	f041 517f 	orr.w	r1, r1, #1069547520	; 0x3fc00000
 8007c54:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8007c58:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8007c5c:	2000      	movs	r0, #0
 8007c5e:	ee07 1a90 	vmov	s15, r1
 8007c62:	eeb7 6b08 	vmov.f64	d6, #120	; 0x3fc00000  1.5
 8007c66:	ed9f 5b66 	vldr	d5, [pc, #408]	; 8007e00 <_dtoa_r+0x2b0>
 8007c6a:	ee37 7b46 	vsub.f64	d7, d7, d6
 8007c6e:	ed9f 6b66 	vldr	d6, [pc, #408]	; 8007e08 <_dtoa_r+0x2b8>
 8007c72:	eea7 6b05 	vfma.f64	d6, d7, d5
 8007c76:	ed9f 5b66 	vldr	d5, [pc, #408]	; 8007e10 <_dtoa_r+0x2c0>
 8007c7a:	ee07 3a90 	vmov	s15, r3
 8007c7e:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 8007c82:	eeb0 7b46 	vmov.f64	d7, d6
 8007c86:	eea4 7b05 	vfma.f64	d7, d4, d5
 8007c8a:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 8007c8e:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8007c92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007c96:	ee16 ba90 	vmov	fp, s13
 8007c9a:	9009      	str	r0, [sp, #36]	; 0x24
 8007c9c:	d508      	bpl.n	8007cb0 <_dtoa_r+0x160>
 8007c9e:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8007ca2:	eeb4 6b47 	vcmp.f64	d6, d7
 8007ca6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007caa:	bf18      	it	ne
 8007cac:	f10b 3bff 	addne.w	fp, fp, #4294967295
 8007cb0:	f1bb 0f16 	cmp.w	fp, #22
 8007cb4:	d82b      	bhi.n	8007d0e <_dtoa_r+0x1be>
 8007cb6:	495e      	ldr	r1, [pc, #376]	; (8007e30 <_dtoa_r+0x2e0>)
 8007cb8:	eb01 01cb 	add.w	r1, r1, fp, lsl #3
 8007cbc:	ed91 7b00 	vldr	d7, [r1]
 8007cc0:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8007cc4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007cc8:	d501      	bpl.n	8007cce <_dtoa_r+0x17e>
 8007cca:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007cce:	2100      	movs	r1, #0
 8007cd0:	e01e      	b.n	8007d10 <_dtoa_r+0x1c0>
 8007cd2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007cd4:	4413      	add	r3, r2
 8007cd6:	f203 4132 	addw	r1, r3, #1074	; 0x432
 8007cda:	2920      	cmp	r1, #32
 8007cdc:	bfc1      	itttt	gt
 8007cde:	f1c1 0140 	rsbgt	r1, r1, #64	; 0x40
 8007ce2:	408c      	lslgt	r4, r1
 8007ce4:	f203 4112 	addwgt	r1, r3, #1042	; 0x412
 8007ce8:	fa28 f101 	lsrgt.w	r1, r8, r1
 8007cec:	bfd6      	itet	le
 8007cee:	f1c1 0120 	rsble	r1, r1, #32
 8007cf2:	4321      	orrgt	r1, r4
 8007cf4:	fa08 f101 	lslle.w	r1, r8, r1
 8007cf8:	ee07 1a90 	vmov	s15, r1
 8007cfc:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8007d00:	3b01      	subs	r3, #1
 8007d02:	ee17 1a90 	vmov	r1, s15
 8007d06:	2001      	movs	r0, #1
 8007d08:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8007d0c:	e7a7      	b.n	8007c5e <_dtoa_r+0x10e>
 8007d0e:	2101      	movs	r1, #1
 8007d10:	1ad2      	subs	r2, r2, r3
 8007d12:	1e53      	subs	r3, r2, #1
 8007d14:	9305      	str	r3, [sp, #20]
 8007d16:	bf45      	ittet	mi
 8007d18:	f1c2 0301 	rsbmi	r3, r2, #1
 8007d1c:	9304      	strmi	r3, [sp, #16]
 8007d1e:	2300      	movpl	r3, #0
 8007d20:	2300      	movmi	r3, #0
 8007d22:	bf4c      	ite	mi
 8007d24:	9305      	strmi	r3, [sp, #20]
 8007d26:	9304      	strpl	r3, [sp, #16]
 8007d28:	f1bb 0f00 	cmp.w	fp, #0
 8007d2c:	910b      	str	r1, [sp, #44]	; 0x2c
 8007d2e:	db18      	blt.n	8007d62 <_dtoa_r+0x212>
 8007d30:	9b05      	ldr	r3, [sp, #20]
 8007d32:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 8007d36:	445b      	add	r3, fp
 8007d38:	9305      	str	r3, [sp, #20]
 8007d3a:	2300      	movs	r3, #0
 8007d3c:	9a06      	ldr	r2, [sp, #24]
 8007d3e:	2a09      	cmp	r2, #9
 8007d40:	d848      	bhi.n	8007dd4 <_dtoa_r+0x284>
 8007d42:	2a05      	cmp	r2, #5
 8007d44:	bfc4      	itt	gt
 8007d46:	3a04      	subgt	r2, #4
 8007d48:	9206      	strgt	r2, [sp, #24]
 8007d4a:	9a06      	ldr	r2, [sp, #24]
 8007d4c:	f1a2 0202 	sub.w	r2, r2, #2
 8007d50:	bfcc      	ite	gt
 8007d52:	2400      	movgt	r4, #0
 8007d54:	2401      	movle	r4, #1
 8007d56:	2a03      	cmp	r2, #3
 8007d58:	d847      	bhi.n	8007dea <_dtoa_r+0x29a>
 8007d5a:	e8df f002 	tbb	[pc, r2]
 8007d5e:	2d0b      	.short	0x2d0b
 8007d60:	392b      	.short	0x392b
 8007d62:	9b04      	ldr	r3, [sp, #16]
 8007d64:	2200      	movs	r2, #0
 8007d66:	eba3 030b 	sub.w	r3, r3, fp
 8007d6a:	9304      	str	r3, [sp, #16]
 8007d6c:	920a      	str	r2, [sp, #40]	; 0x28
 8007d6e:	f1cb 0300 	rsb	r3, fp, #0
 8007d72:	e7e3      	b.n	8007d3c <_dtoa_r+0x1ec>
 8007d74:	2200      	movs	r2, #0
 8007d76:	9207      	str	r2, [sp, #28]
 8007d78:	9a08      	ldr	r2, [sp, #32]
 8007d7a:	2a00      	cmp	r2, #0
 8007d7c:	dc38      	bgt.n	8007df0 <_dtoa_r+0x2a0>
 8007d7e:	f04f 0a01 	mov.w	sl, #1
 8007d82:	46d1      	mov	r9, sl
 8007d84:	4652      	mov	r2, sl
 8007d86:	f8cd a020 	str.w	sl, [sp, #32]
 8007d8a:	69f7      	ldr	r7, [r6, #28]
 8007d8c:	2100      	movs	r1, #0
 8007d8e:	2004      	movs	r0, #4
 8007d90:	f100 0c14 	add.w	ip, r0, #20
 8007d94:	4594      	cmp	ip, r2
 8007d96:	d930      	bls.n	8007dfa <_dtoa_r+0x2aa>
 8007d98:	6079      	str	r1, [r7, #4]
 8007d9a:	4630      	mov	r0, r6
 8007d9c:	930d      	str	r3, [sp, #52]	; 0x34
 8007d9e:	f000 fd43 	bl	8008828 <_Balloc>
 8007da2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007da4:	9001      	str	r0, [sp, #4]
 8007da6:	4602      	mov	r2, r0
 8007da8:	2800      	cmp	r0, #0
 8007daa:	d145      	bne.n	8007e38 <_dtoa_r+0x2e8>
 8007dac:	4b21      	ldr	r3, [pc, #132]	; (8007e34 <_dtoa_r+0x2e4>)
 8007dae:	f240 11af 	movw	r1, #431	; 0x1af
 8007db2:	e6e5      	b.n	8007b80 <_dtoa_r+0x30>
 8007db4:	2201      	movs	r2, #1
 8007db6:	e7de      	b.n	8007d76 <_dtoa_r+0x226>
 8007db8:	2200      	movs	r2, #0
 8007dba:	9207      	str	r2, [sp, #28]
 8007dbc:	9a08      	ldr	r2, [sp, #32]
 8007dbe:	eb0b 0a02 	add.w	sl, fp, r2
 8007dc2:	f10a 0901 	add.w	r9, sl, #1
 8007dc6:	464a      	mov	r2, r9
 8007dc8:	2a01      	cmp	r2, #1
 8007dca:	bfb8      	it	lt
 8007dcc:	2201      	movlt	r2, #1
 8007dce:	e7dc      	b.n	8007d8a <_dtoa_r+0x23a>
 8007dd0:	2201      	movs	r2, #1
 8007dd2:	e7f2      	b.n	8007dba <_dtoa_r+0x26a>
 8007dd4:	2401      	movs	r4, #1
 8007dd6:	2200      	movs	r2, #0
 8007dd8:	e9cd 2406 	strd	r2, r4, [sp, #24]
 8007ddc:	f04f 3aff 	mov.w	sl, #4294967295
 8007de0:	2100      	movs	r1, #0
 8007de2:	46d1      	mov	r9, sl
 8007de4:	2212      	movs	r2, #18
 8007de6:	9108      	str	r1, [sp, #32]
 8007de8:	e7cf      	b.n	8007d8a <_dtoa_r+0x23a>
 8007dea:	2201      	movs	r2, #1
 8007dec:	9207      	str	r2, [sp, #28]
 8007dee:	e7f5      	b.n	8007ddc <_dtoa_r+0x28c>
 8007df0:	f8dd a020 	ldr.w	sl, [sp, #32]
 8007df4:	46d1      	mov	r9, sl
 8007df6:	4652      	mov	r2, sl
 8007df8:	e7c7      	b.n	8007d8a <_dtoa_r+0x23a>
 8007dfa:	3101      	adds	r1, #1
 8007dfc:	0040      	lsls	r0, r0, #1
 8007dfe:	e7c7      	b.n	8007d90 <_dtoa_r+0x240>
 8007e00:	636f4361 	.word	0x636f4361
 8007e04:	3fd287a7 	.word	0x3fd287a7
 8007e08:	8b60c8b3 	.word	0x8b60c8b3
 8007e0c:	3fc68a28 	.word	0x3fc68a28
 8007e10:	509f79fb 	.word	0x509f79fb
 8007e14:	3fd34413 	.word	0x3fd34413
 8007e18:	0802fb55 	.word	0x0802fb55
 8007e1c:	0802fb6c 	.word	0x0802fb6c
 8007e20:	7ff00000 	.word	0x7ff00000
 8007e24:	0802fb51 	.word	0x0802fb51
 8007e28:	0802fb48 	.word	0x0802fb48
 8007e2c:	0802fb25 	.word	0x0802fb25
 8007e30:	0802fc58 	.word	0x0802fc58
 8007e34:	0802fbc4 	.word	0x0802fbc4
 8007e38:	69f2      	ldr	r2, [r6, #28]
 8007e3a:	9901      	ldr	r1, [sp, #4]
 8007e3c:	6011      	str	r1, [r2, #0]
 8007e3e:	f1b9 0f0e 	cmp.w	r9, #14
 8007e42:	d86c      	bhi.n	8007f1e <_dtoa_r+0x3ce>
 8007e44:	2c00      	cmp	r4, #0
 8007e46:	d06a      	beq.n	8007f1e <_dtoa_r+0x3ce>
 8007e48:	f1bb 0f00 	cmp.w	fp, #0
 8007e4c:	f340 80a0 	ble.w	8007f90 <_dtoa_r+0x440>
 8007e50:	4ac1      	ldr	r2, [pc, #772]	; (8008158 <_dtoa_r+0x608>)
 8007e52:	f00b 010f 	and.w	r1, fp, #15
 8007e56:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8007e5a:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8007e5e:	ed92 7b00 	vldr	d7, [r2]
 8007e62:	ea4f 122b 	mov.w	r2, fp, asr #4
 8007e66:	f000 8087 	beq.w	8007f78 <_dtoa_r+0x428>
 8007e6a:	49bc      	ldr	r1, [pc, #752]	; (800815c <_dtoa_r+0x60c>)
 8007e6c:	ed91 6b08 	vldr	d6, [r1, #32]
 8007e70:	ee88 6b06 	vdiv.f64	d6, d8, d6
 8007e74:	ed8d 6b02 	vstr	d6, [sp, #8]
 8007e78:	f002 020f 	and.w	r2, r2, #15
 8007e7c:	2103      	movs	r1, #3
 8007e7e:	48b7      	ldr	r0, [pc, #732]	; (800815c <_dtoa_r+0x60c>)
 8007e80:	2a00      	cmp	r2, #0
 8007e82:	d17b      	bne.n	8007f7c <_dtoa_r+0x42c>
 8007e84:	ed9d 6b02 	vldr	d6, [sp, #8]
 8007e88:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8007e8c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8007e90:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007e92:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007e96:	2a00      	cmp	r2, #0
 8007e98:	f000 80a0 	beq.w	8007fdc <_dtoa_r+0x48c>
 8007e9c:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8007ea0:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8007ea4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007ea8:	f140 8098 	bpl.w	8007fdc <_dtoa_r+0x48c>
 8007eac:	f1b9 0f00 	cmp.w	r9, #0
 8007eb0:	f000 8094 	beq.w	8007fdc <_dtoa_r+0x48c>
 8007eb4:	f1ba 0f00 	cmp.w	sl, #0
 8007eb8:	dd2f      	ble.n	8007f1a <_dtoa_r+0x3ca>
 8007eba:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 8007ebe:	ee27 7b06 	vmul.f64	d7, d7, d6
 8007ec2:	ed8d 7b02 	vstr	d7, [sp, #8]
 8007ec6:	f10b 32ff 	add.w	r2, fp, #4294967295
 8007eca:	3101      	adds	r1, #1
 8007ecc:	4654      	mov	r4, sl
 8007ece:	ed9d 6b02 	vldr	d6, [sp, #8]
 8007ed2:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 8007ed6:	ee07 1a90 	vmov	s15, r1
 8007eda:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8007ede:	eea7 5b06 	vfma.f64	d5, d7, d6
 8007ee2:	ee15 7a90 	vmov	r7, s11
 8007ee6:	ec51 0b15 	vmov	r0, r1, d5
 8007eea:	f1a7 7150 	sub.w	r1, r7, #54525952	; 0x3400000
 8007eee:	2c00      	cmp	r4, #0
 8007ef0:	d177      	bne.n	8007fe2 <_dtoa_r+0x492>
 8007ef2:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8007ef6:	ee36 6b47 	vsub.f64	d6, d6, d7
 8007efa:	ec41 0b17 	vmov	d7, r0, r1
 8007efe:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8007f02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007f06:	f300 826a 	bgt.w	80083de <_dtoa_r+0x88e>
 8007f0a:	eeb1 7b47 	vneg.f64	d7, d7
 8007f0e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8007f12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007f16:	f100 8260 	bmi.w	80083da <_dtoa_r+0x88a>
 8007f1a:	ed8d 8b02 	vstr	d8, [sp, #8]
 8007f1e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007f20:	2a00      	cmp	r2, #0
 8007f22:	f2c0 811d 	blt.w	8008160 <_dtoa_r+0x610>
 8007f26:	f1bb 0f0e 	cmp.w	fp, #14
 8007f2a:	f300 8119 	bgt.w	8008160 <_dtoa_r+0x610>
 8007f2e:	4b8a      	ldr	r3, [pc, #552]	; (8008158 <_dtoa_r+0x608>)
 8007f30:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8007f34:	ed93 6b00 	vldr	d6, [r3]
 8007f38:	9b08      	ldr	r3, [sp, #32]
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	f280 80b7 	bge.w	80080ae <_dtoa_r+0x55e>
 8007f40:	f1b9 0f00 	cmp.w	r9, #0
 8007f44:	f300 80b3 	bgt.w	80080ae <_dtoa_r+0x55e>
 8007f48:	f040 8246 	bne.w	80083d8 <_dtoa_r+0x888>
 8007f4c:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8007f50:	ee26 6b07 	vmul.f64	d6, d6, d7
 8007f54:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007f58:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8007f5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007f60:	464c      	mov	r4, r9
 8007f62:	464f      	mov	r7, r9
 8007f64:	f280 821c 	bge.w	80083a0 <_dtoa_r+0x850>
 8007f68:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8007f6c:	2331      	movs	r3, #49	; 0x31
 8007f6e:	f808 3b01 	strb.w	r3, [r8], #1
 8007f72:	f10b 0b01 	add.w	fp, fp, #1
 8007f76:	e218      	b.n	80083aa <_dtoa_r+0x85a>
 8007f78:	2102      	movs	r1, #2
 8007f7a:	e780      	b.n	8007e7e <_dtoa_r+0x32e>
 8007f7c:	07d4      	lsls	r4, r2, #31
 8007f7e:	d504      	bpl.n	8007f8a <_dtoa_r+0x43a>
 8007f80:	ed90 6b00 	vldr	d6, [r0]
 8007f84:	3101      	adds	r1, #1
 8007f86:	ee27 7b06 	vmul.f64	d7, d7, d6
 8007f8a:	1052      	asrs	r2, r2, #1
 8007f8c:	3008      	adds	r0, #8
 8007f8e:	e777      	b.n	8007e80 <_dtoa_r+0x330>
 8007f90:	d022      	beq.n	8007fd8 <_dtoa_r+0x488>
 8007f92:	f1cb 0200 	rsb	r2, fp, #0
 8007f96:	4970      	ldr	r1, [pc, #448]	; (8008158 <_dtoa_r+0x608>)
 8007f98:	f002 000f 	and.w	r0, r2, #15
 8007f9c:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8007fa0:	ed91 7b00 	vldr	d7, [r1]
 8007fa4:	ee28 7b07 	vmul.f64	d7, d8, d7
 8007fa8:	ed8d 7b02 	vstr	d7, [sp, #8]
 8007fac:	486b      	ldr	r0, [pc, #428]	; (800815c <_dtoa_r+0x60c>)
 8007fae:	1112      	asrs	r2, r2, #4
 8007fb0:	2400      	movs	r4, #0
 8007fb2:	2102      	movs	r1, #2
 8007fb4:	b92a      	cbnz	r2, 8007fc2 <_dtoa_r+0x472>
 8007fb6:	2c00      	cmp	r4, #0
 8007fb8:	f43f af6a 	beq.w	8007e90 <_dtoa_r+0x340>
 8007fbc:	ed8d 7b02 	vstr	d7, [sp, #8]
 8007fc0:	e766      	b.n	8007e90 <_dtoa_r+0x340>
 8007fc2:	07d7      	lsls	r7, r2, #31
 8007fc4:	d505      	bpl.n	8007fd2 <_dtoa_r+0x482>
 8007fc6:	ed90 6b00 	vldr	d6, [r0]
 8007fca:	3101      	adds	r1, #1
 8007fcc:	2401      	movs	r4, #1
 8007fce:	ee27 7b06 	vmul.f64	d7, d7, d6
 8007fd2:	1052      	asrs	r2, r2, #1
 8007fd4:	3008      	adds	r0, #8
 8007fd6:	e7ed      	b.n	8007fb4 <_dtoa_r+0x464>
 8007fd8:	2102      	movs	r1, #2
 8007fda:	e759      	b.n	8007e90 <_dtoa_r+0x340>
 8007fdc:	465a      	mov	r2, fp
 8007fde:	464c      	mov	r4, r9
 8007fe0:	e775      	b.n	8007ece <_dtoa_r+0x37e>
 8007fe2:	ec41 0b17 	vmov	d7, r0, r1
 8007fe6:	495c      	ldr	r1, [pc, #368]	; (8008158 <_dtoa_r+0x608>)
 8007fe8:	eb01 01c4 	add.w	r1, r1, r4, lsl #3
 8007fec:	ed11 4b02 	vldr	d4, [r1, #-8]
 8007ff0:	9901      	ldr	r1, [sp, #4]
 8007ff2:	440c      	add	r4, r1
 8007ff4:	9907      	ldr	r1, [sp, #28]
 8007ff6:	b351      	cbz	r1, 800804e <_dtoa_r+0x4fe>
 8007ff8:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 8007ffc:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 8008000:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8008004:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8008008:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800800c:	ee35 7b47 	vsub.f64	d7, d5, d7
 8008010:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8008014:	ee14 1a90 	vmov	r1, s9
 8008018:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800801c:	3130      	adds	r1, #48	; 0x30
 800801e:	ee36 6b45 	vsub.f64	d6, d6, d5
 8008022:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8008026:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800802a:	f808 1b01 	strb.w	r1, [r8], #1
 800802e:	d439      	bmi.n	80080a4 <_dtoa_r+0x554>
 8008030:	ee32 5b46 	vsub.f64	d5, d2, d6
 8008034:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8008038:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800803c:	d472      	bmi.n	8008124 <_dtoa_r+0x5d4>
 800803e:	45a0      	cmp	r8, r4
 8008040:	f43f af6b 	beq.w	8007f1a <_dtoa_r+0x3ca>
 8008044:	ee27 7b03 	vmul.f64	d7, d7, d3
 8008048:	ee26 6b03 	vmul.f64	d6, d6, d3
 800804c:	e7e0      	b.n	8008010 <_dtoa_r+0x4c0>
 800804e:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8008052:	ee27 7b04 	vmul.f64	d7, d7, d4
 8008056:	4620      	mov	r0, r4
 8008058:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800805c:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8008060:	ee14 1a90 	vmov	r1, s9
 8008064:	3130      	adds	r1, #48	; 0x30
 8008066:	f808 1b01 	strb.w	r1, [r8], #1
 800806a:	45a0      	cmp	r8, r4
 800806c:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8008070:	ee36 6b45 	vsub.f64	d6, d6, d5
 8008074:	d118      	bne.n	80080a8 <_dtoa_r+0x558>
 8008076:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800807a:	ee37 4b05 	vadd.f64	d4, d7, d5
 800807e:	eeb4 6bc4 	vcmpe.f64	d6, d4
 8008082:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008086:	dc4d      	bgt.n	8008124 <_dtoa_r+0x5d4>
 8008088:	ee35 5b47 	vsub.f64	d5, d5, d7
 800808c:	eeb4 6bc5 	vcmpe.f64	d6, d5
 8008090:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008094:	f57f af41 	bpl.w	8007f1a <_dtoa_r+0x3ca>
 8008098:	4680      	mov	r8, r0
 800809a:	3801      	subs	r0, #1
 800809c:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 80080a0:	2b30      	cmp	r3, #48	; 0x30
 80080a2:	d0f9      	beq.n	8008098 <_dtoa_r+0x548>
 80080a4:	4693      	mov	fp, r2
 80080a6:	e02a      	b.n	80080fe <_dtoa_r+0x5ae>
 80080a8:	ee26 6b03 	vmul.f64	d6, d6, d3
 80080ac:	e7d6      	b.n	800805c <_dtoa_r+0x50c>
 80080ae:	ed9d 7b02 	vldr	d7, [sp, #8]
 80080b2:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 80080b6:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80080ba:	ee87 5b06 	vdiv.f64	d5, d7, d6
 80080be:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 80080c2:	ee15 3a10 	vmov	r3, s10
 80080c6:	3330      	adds	r3, #48	; 0x30
 80080c8:	f808 3b01 	strb.w	r3, [r8], #1
 80080cc:	9b01      	ldr	r3, [sp, #4]
 80080ce:	eba8 0303 	sub.w	r3, r8, r3
 80080d2:	4599      	cmp	r9, r3
 80080d4:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 80080d8:	eea3 7b46 	vfms.f64	d7, d3, d6
 80080dc:	d133      	bne.n	8008146 <_dtoa_r+0x5f6>
 80080de:	ee37 7b07 	vadd.f64	d7, d7, d7
 80080e2:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80080e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80080ea:	dc1a      	bgt.n	8008122 <_dtoa_r+0x5d2>
 80080ec:	eeb4 7b46 	vcmp.f64	d7, d6
 80080f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80080f4:	d103      	bne.n	80080fe <_dtoa_r+0x5ae>
 80080f6:	ee15 3a10 	vmov	r3, s10
 80080fa:	07d9      	lsls	r1, r3, #31
 80080fc:	d411      	bmi.n	8008122 <_dtoa_r+0x5d2>
 80080fe:	4629      	mov	r1, r5
 8008100:	4630      	mov	r0, r6
 8008102:	f000 fbd1 	bl	80088a8 <_Bfree>
 8008106:	2300      	movs	r3, #0
 8008108:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800810a:	f888 3000 	strb.w	r3, [r8]
 800810e:	f10b 0301 	add.w	r3, fp, #1
 8008112:	6013      	str	r3, [r2, #0]
 8008114:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008116:	2b00      	cmp	r3, #0
 8008118:	f43f ad69 	beq.w	8007bee <_dtoa_r+0x9e>
 800811c:	f8c3 8000 	str.w	r8, [r3]
 8008120:	e565      	b.n	8007bee <_dtoa_r+0x9e>
 8008122:	465a      	mov	r2, fp
 8008124:	4643      	mov	r3, r8
 8008126:	4698      	mov	r8, r3
 8008128:	f813 1d01 	ldrb.w	r1, [r3, #-1]!
 800812c:	2939      	cmp	r1, #57	; 0x39
 800812e:	d106      	bne.n	800813e <_dtoa_r+0x5ee>
 8008130:	9901      	ldr	r1, [sp, #4]
 8008132:	4299      	cmp	r1, r3
 8008134:	d1f7      	bne.n	8008126 <_dtoa_r+0x5d6>
 8008136:	9801      	ldr	r0, [sp, #4]
 8008138:	2130      	movs	r1, #48	; 0x30
 800813a:	3201      	adds	r2, #1
 800813c:	7001      	strb	r1, [r0, #0]
 800813e:	7819      	ldrb	r1, [r3, #0]
 8008140:	3101      	adds	r1, #1
 8008142:	7019      	strb	r1, [r3, #0]
 8008144:	e7ae      	b.n	80080a4 <_dtoa_r+0x554>
 8008146:	ee27 7b04 	vmul.f64	d7, d7, d4
 800814a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800814e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008152:	d1b2      	bne.n	80080ba <_dtoa_r+0x56a>
 8008154:	e7d3      	b.n	80080fe <_dtoa_r+0x5ae>
 8008156:	bf00      	nop
 8008158:	0802fc58 	.word	0x0802fc58
 800815c:	0802fc30 	.word	0x0802fc30
 8008160:	9907      	ldr	r1, [sp, #28]
 8008162:	2900      	cmp	r1, #0
 8008164:	f000 80d0 	beq.w	8008308 <_dtoa_r+0x7b8>
 8008168:	9906      	ldr	r1, [sp, #24]
 800816a:	2901      	cmp	r1, #1
 800816c:	f300 80b4 	bgt.w	80082d8 <_dtoa_r+0x788>
 8008170:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008172:	2900      	cmp	r1, #0
 8008174:	f000 80ac 	beq.w	80082d0 <_dtoa_r+0x780>
 8008178:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800817c:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8008180:	461c      	mov	r4, r3
 8008182:	9309      	str	r3, [sp, #36]	; 0x24
 8008184:	9b04      	ldr	r3, [sp, #16]
 8008186:	4413      	add	r3, r2
 8008188:	9304      	str	r3, [sp, #16]
 800818a:	9b05      	ldr	r3, [sp, #20]
 800818c:	2101      	movs	r1, #1
 800818e:	4413      	add	r3, r2
 8008190:	4630      	mov	r0, r6
 8008192:	9305      	str	r3, [sp, #20]
 8008194:	f000 fc3e 	bl	8008a14 <__i2b>
 8008198:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800819a:	4607      	mov	r7, r0
 800819c:	f1b8 0f00 	cmp.w	r8, #0
 80081a0:	d00d      	beq.n	80081be <_dtoa_r+0x66e>
 80081a2:	9a05      	ldr	r2, [sp, #20]
 80081a4:	2a00      	cmp	r2, #0
 80081a6:	dd0a      	ble.n	80081be <_dtoa_r+0x66e>
 80081a8:	4542      	cmp	r2, r8
 80081aa:	9904      	ldr	r1, [sp, #16]
 80081ac:	bfa8      	it	ge
 80081ae:	4642      	movge	r2, r8
 80081b0:	1a89      	subs	r1, r1, r2
 80081b2:	9104      	str	r1, [sp, #16]
 80081b4:	9905      	ldr	r1, [sp, #20]
 80081b6:	eba8 0802 	sub.w	r8, r8, r2
 80081ba:	1a8a      	subs	r2, r1, r2
 80081bc:	9205      	str	r2, [sp, #20]
 80081be:	b303      	cbz	r3, 8008202 <_dtoa_r+0x6b2>
 80081c0:	9a07      	ldr	r2, [sp, #28]
 80081c2:	2a00      	cmp	r2, #0
 80081c4:	f000 80a5 	beq.w	8008312 <_dtoa_r+0x7c2>
 80081c8:	2c00      	cmp	r4, #0
 80081ca:	dd13      	ble.n	80081f4 <_dtoa_r+0x6a4>
 80081cc:	4639      	mov	r1, r7
 80081ce:	4622      	mov	r2, r4
 80081d0:	4630      	mov	r0, r6
 80081d2:	930d      	str	r3, [sp, #52]	; 0x34
 80081d4:	f000 fcde 	bl	8008b94 <__pow5mult>
 80081d8:	462a      	mov	r2, r5
 80081da:	4601      	mov	r1, r0
 80081dc:	4607      	mov	r7, r0
 80081de:	4630      	mov	r0, r6
 80081e0:	f000 fc2e 	bl	8008a40 <__multiply>
 80081e4:	4629      	mov	r1, r5
 80081e6:	9009      	str	r0, [sp, #36]	; 0x24
 80081e8:	4630      	mov	r0, r6
 80081ea:	f000 fb5d 	bl	80088a8 <_Bfree>
 80081ee:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80081f0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80081f2:	4615      	mov	r5, r2
 80081f4:	1b1a      	subs	r2, r3, r4
 80081f6:	d004      	beq.n	8008202 <_dtoa_r+0x6b2>
 80081f8:	4629      	mov	r1, r5
 80081fa:	4630      	mov	r0, r6
 80081fc:	f000 fcca 	bl	8008b94 <__pow5mult>
 8008200:	4605      	mov	r5, r0
 8008202:	2101      	movs	r1, #1
 8008204:	4630      	mov	r0, r6
 8008206:	f000 fc05 	bl	8008a14 <__i2b>
 800820a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800820c:	2b00      	cmp	r3, #0
 800820e:	4604      	mov	r4, r0
 8008210:	f340 8081 	ble.w	8008316 <_dtoa_r+0x7c6>
 8008214:	461a      	mov	r2, r3
 8008216:	4601      	mov	r1, r0
 8008218:	4630      	mov	r0, r6
 800821a:	f000 fcbb 	bl	8008b94 <__pow5mult>
 800821e:	9b06      	ldr	r3, [sp, #24]
 8008220:	2b01      	cmp	r3, #1
 8008222:	4604      	mov	r4, r0
 8008224:	dd7a      	ble.n	800831c <_dtoa_r+0x7cc>
 8008226:	2300      	movs	r3, #0
 8008228:	9309      	str	r3, [sp, #36]	; 0x24
 800822a:	6922      	ldr	r2, [r4, #16]
 800822c:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8008230:	6910      	ldr	r0, [r2, #16]
 8008232:	f000 fba1 	bl	8008978 <__hi0bits>
 8008236:	f1c0 0020 	rsb	r0, r0, #32
 800823a:	9b05      	ldr	r3, [sp, #20]
 800823c:	4418      	add	r0, r3
 800823e:	f010 001f 	ands.w	r0, r0, #31
 8008242:	f000 8093 	beq.w	800836c <_dtoa_r+0x81c>
 8008246:	f1c0 0220 	rsb	r2, r0, #32
 800824a:	2a04      	cmp	r2, #4
 800824c:	f340 8085 	ble.w	800835a <_dtoa_r+0x80a>
 8008250:	9b04      	ldr	r3, [sp, #16]
 8008252:	f1c0 001c 	rsb	r0, r0, #28
 8008256:	4403      	add	r3, r0
 8008258:	9304      	str	r3, [sp, #16]
 800825a:	9b05      	ldr	r3, [sp, #20]
 800825c:	4480      	add	r8, r0
 800825e:	4403      	add	r3, r0
 8008260:	9305      	str	r3, [sp, #20]
 8008262:	9b04      	ldr	r3, [sp, #16]
 8008264:	2b00      	cmp	r3, #0
 8008266:	dd05      	ble.n	8008274 <_dtoa_r+0x724>
 8008268:	4629      	mov	r1, r5
 800826a:	461a      	mov	r2, r3
 800826c:	4630      	mov	r0, r6
 800826e:	f000 fceb 	bl	8008c48 <__lshift>
 8008272:	4605      	mov	r5, r0
 8008274:	9b05      	ldr	r3, [sp, #20]
 8008276:	2b00      	cmp	r3, #0
 8008278:	dd05      	ble.n	8008286 <_dtoa_r+0x736>
 800827a:	4621      	mov	r1, r4
 800827c:	461a      	mov	r2, r3
 800827e:	4630      	mov	r0, r6
 8008280:	f000 fce2 	bl	8008c48 <__lshift>
 8008284:	4604      	mov	r4, r0
 8008286:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008288:	2b00      	cmp	r3, #0
 800828a:	d071      	beq.n	8008370 <_dtoa_r+0x820>
 800828c:	4621      	mov	r1, r4
 800828e:	4628      	mov	r0, r5
 8008290:	f000 fd46 	bl	8008d20 <__mcmp>
 8008294:	2800      	cmp	r0, #0
 8008296:	da6b      	bge.n	8008370 <_dtoa_r+0x820>
 8008298:	2300      	movs	r3, #0
 800829a:	4629      	mov	r1, r5
 800829c:	220a      	movs	r2, #10
 800829e:	4630      	mov	r0, r6
 80082a0:	f000 fb24 	bl	80088ec <__multadd>
 80082a4:	9b07      	ldr	r3, [sp, #28]
 80082a6:	f10b 3bff 	add.w	fp, fp, #4294967295
 80082aa:	4605      	mov	r5, r0
 80082ac:	2b00      	cmp	r3, #0
 80082ae:	f000 8197 	beq.w	80085e0 <_dtoa_r+0xa90>
 80082b2:	4639      	mov	r1, r7
 80082b4:	2300      	movs	r3, #0
 80082b6:	220a      	movs	r2, #10
 80082b8:	4630      	mov	r0, r6
 80082ba:	f000 fb17 	bl	80088ec <__multadd>
 80082be:	f1ba 0f00 	cmp.w	sl, #0
 80082c2:	4607      	mov	r7, r0
 80082c4:	f300 8093 	bgt.w	80083ee <_dtoa_r+0x89e>
 80082c8:	9b06      	ldr	r3, [sp, #24]
 80082ca:	2b02      	cmp	r3, #2
 80082cc:	dc57      	bgt.n	800837e <_dtoa_r+0x82e>
 80082ce:	e08e      	b.n	80083ee <_dtoa_r+0x89e>
 80082d0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80082d2:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80082d6:	e751      	b.n	800817c <_dtoa_r+0x62c>
 80082d8:	f109 34ff 	add.w	r4, r9, #4294967295
 80082dc:	42a3      	cmp	r3, r4
 80082de:	bfbf      	itttt	lt
 80082e0:	1ae2      	sublt	r2, r4, r3
 80082e2:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80082e4:	189b      	addlt	r3, r3, r2
 80082e6:	930a      	strlt	r3, [sp, #40]	; 0x28
 80082e8:	bfae      	itee	ge
 80082ea:	1b1c      	subge	r4, r3, r4
 80082ec:	4623      	movlt	r3, r4
 80082ee:	2400      	movlt	r4, #0
 80082f0:	f1b9 0f00 	cmp.w	r9, #0
 80082f4:	bfb5      	itete	lt
 80082f6:	9a04      	ldrlt	r2, [sp, #16]
 80082f8:	f8dd 8010 	ldrge.w	r8, [sp, #16]
 80082fc:	eba2 0809 	sublt.w	r8, r2, r9
 8008300:	464a      	movge	r2, r9
 8008302:	bfb8      	it	lt
 8008304:	2200      	movlt	r2, #0
 8008306:	e73c      	b.n	8008182 <_dtoa_r+0x632>
 8008308:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800830c:	9f07      	ldr	r7, [sp, #28]
 800830e:	461c      	mov	r4, r3
 8008310:	e744      	b.n	800819c <_dtoa_r+0x64c>
 8008312:	461a      	mov	r2, r3
 8008314:	e770      	b.n	80081f8 <_dtoa_r+0x6a8>
 8008316:	9b06      	ldr	r3, [sp, #24]
 8008318:	2b01      	cmp	r3, #1
 800831a:	dc18      	bgt.n	800834e <_dtoa_r+0x7fe>
 800831c:	9b02      	ldr	r3, [sp, #8]
 800831e:	b9b3      	cbnz	r3, 800834e <_dtoa_r+0x7fe>
 8008320:	9b03      	ldr	r3, [sp, #12]
 8008322:	f3c3 0213 	ubfx	r2, r3, #0, #20
 8008326:	b9a2      	cbnz	r2, 8008352 <_dtoa_r+0x802>
 8008328:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800832c:	0d12      	lsrs	r2, r2, #20
 800832e:	0512      	lsls	r2, r2, #20
 8008330:	b18a      	cbz	r2, 8008356 <_dtoa_r+0x806>
 8008332:	9b04      	ldr	r3, [sp, #16]
 8008334:	3301      	adds	r3, #1
 8008336:	9304      	str	r3, [sp, #16]
 8008338:	9b05      	ldr	r3, [sp, #20]
 800833a:	3301      	adds	r3, #1
 800833c:	9305      	str	r3, [sp, #20]
 800833e:	2301      	movs	r3, #1
 8008340:	9309      	str	r3, [sp, #36]	; 0x24
 8008342:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008344:	2b00      	cmp	r3, #0
 8008346:	f47f af70 	bne.w	800822a <_dtoa_r+0x6da>
 800834a:	2001      	movs	r0, #1
 800834c:	e775      	b.n	800823a <_dtoa_r+0x6ea>
 800834e:	2300      	movs	r3, #0
 8008350:	e7f6      	b.n	8008340 <_dtoa_r+0x7f0>
 8008352:	9b02      	ldr	r3, [sp, #8]
 8008354:	e7f4      	b.n	8008340 <_dtoa_r+0x7f0>
 8008356:	9209      	str	r2, [sp, #36]	; 0x24
 8008358:	e7f3      	b.n	8008342 <_dtoa_r+0x7f2>
 800835a:	d082      	beq.n	8008262 <_dtoa_r+0x712>
 800835c:	9b04      	ldr	r3, [sp, #16]
 800835e:	321c      	adds	r2, #28
 8008360:	4413      	add	r3, r2
 8008362:	9304      	str	r3, [sp, #16]
 8008364:	9b05      	ldr	r3, [sp, #20]
 8008366:	4490      	add	r8, r2
 8008368:	4413      	add	r3, r2
 800836a:	e779      	b.n	8008260 <_dtoa_r+0x710>
 800836c:	4602      	mov	r2, r0
 800836e:	e7f5      	b.n	800835c <_dtoa_r+0x80c>
 8008370:	f1b9 0f00 	cmp.w	r9, #0
 8008374:	dc36      	bgt.n	80083e4 <_dtoa_r+0x894>
 8008376:	9b06      	ldr	r3, [sp, #24]
 8008378:	2b02      	cmp	r3, #2
 800837a:	dd33      	ble.n	80083e4 <_dtoa_r+0x894>
 800837c:	46ca      	mov	sl, r9
 800837e:	f1ba 0f00 	cmp.w	sl, #0
 8008382:	d10d      	bne.n	80083a0 <_dtoa_r+0x850>
 8008384:	4621      	mov	r1, r4
 8008386:	4653      	mov	r3, sl
 8008388:	2205      	movs	r2, #5
 800838a:	4630      	mov	r0, r6
 800838c:	f000 faae 	bl	80088ec <__multadd>
 8008390:	4601      	mov	r1, r0
 8008392:	4604      	mov	r4, r0
 8008394:	4628      	mov	r0, r5
 8008396:	f000 fcc3 	bl	8008d20 <__mcmp>
 800839a:	2800      	cmp	r0, #0
 800839c:	f73f ade4 	bgt.w	8007f68 <_dtoa_r+0x418>
 80083a0:	9b08      	ldr	r3, [sp, #32]
 80083a2:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80083a6:	ea6f 0b03 	mvn.w	fp, r3
 80083aa:	f04f 0900 	mov.w	r9, #0
 80083ae:	4621      	mov	r1, r4
 80083b0:	4630      	mov	r0, r6
 80083b2:	f000 fa79 	bl	80088a8 <_Bfree>
 80083b6:	2f00      	cmp	r7, #0
 80083b8:	f43f aea1 	beq.w	80080fe <_dtoa_r+0x5ae>
 80083bc:	f1b9 0f00 	cmp.w	r9, #0
 80083c0:	d005      	beq.n	80083ce <_dtoa_r+0x87e>
 80083c2:	45b9      	cmp	r9, r7
 80083c4:	d003      	beq.n	80083ce <_dtoa_r+0x87e>
 80083c6:	4649      	mov	r1, r9
 80083c8:	4630      	mov	r0, r6
 80083ca:	f000 fa6d 	bl	80088a8 <_Bfree>
 80083ce:	4639      	mov	r1, r7
 80083d0:	4630      	mov	r0, r6
 80083d2:	f000 fa69 	bl	80088a8 <_Bfree>
 80083d6:	e692      	b.n	80080fe <_dtoa_r+0x5ae>
 80083d8:	2400      	movs	r4, #0
 80083da:	4627      	mov	r7, r4
 80083dc:	e7e0      	b.n	80083a0 <_dtoa_r+0x850>
 80083de:	4693      	mov	fp, r2
 80083e0:	4627      	mov	r7, r4
 80083e2:	e5c1      	b.n	8007f68 <_dtoa_r+0x418>
 80083e4:	9b07      	ldr	r3, [sp, #28]
 80083e6:	46ca      	mov	sl, r9
 80083e8:	2b00      	cmp	r3, #0
 80083ea:	f000 8100 	beq.w	80085ee <_dtoa_r+0xa9e>
 80083ee:	f1b8 0f00 	cmp.w	r8, #0
 80083f2:	dd05      	ble.n	8008400 <_dtoa_r+0x8b0>
 80083f4:	4639      	mov	r1, r7
 80083f6:	4642      	mov	r2, r8
 80083f8:	4630      	mov	r0, r6
 80083fa:	f000 fc25 	bl	8008c48 <__lshift>
 80083fe:	4607      	mov	r7, r0
 8008400:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008402:	2b00      	cmp	r3, #0
 8008404:	d05d      	beq.n	80084c2 <_dtoa_r+0x972>
 8008406:	6879      	ldr	r1, [r7, #4]
 8008408:	4630      	mov	r0, r6
 800840a:	f000 fa0d 	bl	8008828 <_Balloc>
 800840e:	4680      	mov	r8, r0
 8008410:	b928      	cbnz	r0, 800841e <_dtoa_r+0x8ce>
 8008412:	4b82      	ldr	r3, [pc, #520]	; (800861c <_dtoa_r+0xacc>)
 8008414:	4602      	mov	r2, r0
 8008416:	f240 21ef 	movw	r1, #751	; 0x2ef
 800841a:	f7ff bbb1 	b.w	8007b80 <_dtoa_r+0x30>
 800841e:	693a      	ldr	r2, [r7, #16]
 8008420:	3202      	adds	r2, #2
 8008422:	0092      	lsls	r2, r2, #2
 8008424:	f107 010c 	add.w	r1, r7, #12
 8008428:	300c      	adds	r0, #12
 800842a:	f000 ffa9 	bl	8009380 <memcpy>
 800842e:	2201      	movs	r2, #1
 8008430:	4641      	mov	r1, r8
 8008432:	4630      	mov	r0, r6
 8008434:	f000 fc08 	bl	8008c48 <__lshift>
 8008438:	9b01      	ldr	r3, [sp, #4]
 800843a:	3301      	adds	r3, #1
 800843c:	9304      	str	r3, [sp, #16]
 800843e:	9b01      	ldr	r3, [sp, #4]
 8008440:	4453      	add	r3, sl
 8008442:	9308      	str	r3, [sp, #32]
 8008444:	9b02      	ldr	r3, [sp, #8]
 8008446:	f003 0301 	and.w	r3, r3, #1
 800844a:	46b9      	mov	r9, r7
 800844c:	9307      	str	r3, [sp, #28]
 800844e:	4607      	mov	r7, r0
 8008450:	9b04      	ldr	r3, [sp, #16]
 8008452:	4621      	mov	r1, r4
 8008454:	3b01      	subs	r3, #1
 8008456:	4628      	mov	r0, r5
 8008458:	9302      	str	r3, [sp, #8]
 800845a:	f7ff faf0 	bl	8007a3e <quorem>
 800845e:	4603      	mov	r3, r0
 8008460:	3330      	adds	r3, #48	; 0x30
 8008462:	9005      	str	r0, [sp, #20]
 8008464:	4649      	mov	r1, r9
 8008466:	4628      	mov	r0, r5
 8008468:	9309      	str	r3, [sp, #36]	; 0x24
 800846a:	f000 fc59 	bl	8008d20 <__mcmp>
 800846e:	463a      	mov	r2, r7
 8008470:	4682      	mov	sl, r0
 8008472:	4621      	mov	r1, r4
 8008474:	4630      	mov	r0, r6
 8008476:	f000 fc6f 	bl	8008d58 <__mdiff>
 800847a:	68c2      	ldr	r2, [r0, #12]
 800847c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800847e:	4680      	mov	r8, r0
 8008480:	bb0a      	cbnz	r2, 80084c6 <_dtoa_r+0x976>
 8008482:	4601      	mov	r1, r0
 8008484:	4628      	mov	r0, r5
 8008486:	f000 fc4b 	bl	8008d20 <__mcmp>
 800848a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800848c:	4602      	mov	r2, r0
 800848e:	4641      	mov	r1, r8
 8008490:	4630      	mov	r0, r6
 8008492:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
 8008496:	f000 fa07 	bl	80088a8 <_Bfree>
 800849a:	9b06      	ldr	r3, [sp, #24]
 800849c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800849e:	f8dd 8010 	ldr.w	r8, [sp, #16]
 80084a2:	ea43 0102 	orr.w	r1, r3, r2
 80084a6:	9b07      	ldr	r3, [sp, #28]
 80084a8:	4319      	orrs	r1, r3
 80084aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80084ac:	d10d      	bne.n	80084ca <_dtoa_r+0x97a>
 80084ae:	2b39      	cmp	r3, #57	; 0x39
 80084b0:	d029      	beq.n	8008506 <_dtoa_r+0x9b6>
 80084b2:	f1ba 0f00 	cmp.w	sl, #0
 80084b6:	dd01      	ble.n	80084bc <_dtoa_r+0x96c>
 80084b8:	9b05      	ldr	r3, [sp, #20]
 80084ba:	3331      	adds	r3, #49	; 0x31
 80084bc:	9a02      	ldr	r2, [sp, #8]
 80084be:	7013      	strb	r3, [r2, #0]
 80084c0:	e775      	b.n	80083ae <_dtoa_r+0x85e>
 80084c2:	4638      	mov	r0, r7
 80084c4:	e7b8      	b.n	8008438 <_dtoa_r+0x8e8>
 80084c6:	2201      	movs	r2, #1
 80084c8:	e7e1      	b.n	800848e <_dtoa_r+0x93e>
 80084ca:	f1ba 0f00 	cmp.w	sl, #0
 80084ce:	db06      	blt.n	80084de <_dtoa_r+0x98e>
 80084d0:	9906      	ldr	r1, [sp, #24]
 80084d2:	ea41 0a0a 	orr.w	sl, r1, sl
 80084d6:	9907      	ldr	r1, [sp, #28]
 80084d8:	ea5a 0a01 	orrs.w	sl, sl, r1
 80084dc:	d120      	bne.n	8008520 <_dtoa_r+0x9d0>
 80084de:	2a00      	cmp	r2, #0
 80084e0:	ddec      	ble.n	80084bc <_dtoa_r+0x96c>
 80084e2:	4629      	mov	r1, r5
 80084e4:	2201      	movs	r2, #1
 80084e6:	4630      	mov	r0, r6
 80084e8:	9304      	str	r3, [sp, #16]
 80084ea:	f000 fbad 	bl	8008c48 <__lshift>
 80084ee:	4621      	mov	r1, r4
 80084f0:	4605      	mov	r5, r0
 80084f2:	f000 fc15 	bl	8008d20 <__mcmp>
 80084f6:	2800      	cmp	r0, #0
 80084f8:	9b04      	ldr	r3, [sp, #16]
 80084fa:	dc02      	bgt.n	8008502 <_dtoa_r+0x9b2>
 80084fc:	d1de      	bne.n	80084bc <_dtoa_r+0x96c>
 80084fe:	07da      	lsls	r2, r3, #31
 8008500:	d5dc      	bpl.n	80084bc <_dtoa_r+0x96c>
 8008502:	2b39      	cmp	r3, #57	; 0x39
 8008504:	d1d8      	bne.n	80084b8 <_dtoa_r+0x968>
 8008506:	9a02      	ldr	r2, [sp, #8]
 8008508:	2339      	movs	r3, #57	; 0x39
 800850a:	7013      	strb	r3, [r2, #0]
 800850c:	4643      	mov	r3, r8
 800850e:	4698      	mov	r8, r3
 8008510:	3b01      	subs	r3, #1
 8008512:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 8008516:	2a39      	cmp	r2, #57	; 0x39
 8008518:	d051      	beq.n	80085be <_dtoa_r+0xa6e>
 800851a:	3201      	adds	r2, #1
 800851c:	701a      	strb	r2, [r3, #0]
 800851e:	e746      	b.n	80083ae <_dtoa_r+0x85e>
 8008520:	2a00      	cmp	r2, #0
 8008522:	dd03      	ble.n	800852c <_dtoa_r+0x9dc>
 8008524:	2b39      	cmp	r3, #57	; 0x39
 8008526:	d0ee      	beq.n	8008506 <_dtoa_r+0x9b6>
 8008528:	3301      	adds	r3, #1
 800852a:	e7c7      	b.n	80084bc <_dtoa_r+0x96c>
 800852c:	9a04      	ldr	r2, [sp, #16]
 800852e:	9908      	ldr	r1, [sp, #32]
 8008530:	f802 3c01 	strb.w	r3, [r2, #-1]
 8008534:	428a      	cmp	r2, r1
 8008536:	d02b      	beq.n	8008590 <_dtoa_r+0xa40>
 8008538:	4629      	mov	r1, r5
 800853a:	2300      	movs	r3, #0
 800853c:	220a      	movs	r2, #10
 800853e:	4630      	mov	r0, r6
 8008540:	f000 f9d4 	bl	80088ec <__multadd>
 8008544:	45b9      	cmp	r9, r7
 8008546:	4605      	mov	r5, r0
 8008548:	f04f 0300 	mov.w	r3, #0
 800854c:	f04f 020a 	mov.w	r2, #10
 8008550:	4649      	mov	r1, r9
 8008552:	4630      	mov	r0, r6
 8008554:	d107      	bne.n	8008566 <_dtoa_r+0xa16>
 8008556:	f000 f9c9 	bl	80088ec <__multadd>
 800855a:	4681      	mov	r9, r0
 800855c:	4607      	mov	r7, r0
 800855e:	9b04      	ldr	r3, [sp, #16]
 8008560:	3301      	adds	r3, #1
 8008562:	9304      	str	r3, [sp, #16]
 8008564:	e774      	b.n	8008450 <_dtoa_r+0x900>
 8008566:	f000 f9c1 	bl	80088ec <__multadd>
 800856a:	4639      	mov	r1, r7
 800856c:	4681      	mov	r9, r0
 800856e:	2300      	movs	r3, #0
 8008570:	220a      	movs	r2, #10
 8008572:	4630      	mov	r0, r6
 8008574:	f000 f9ba 	bl	80088ec <__multadd>
 8008578:	4607      	mov	r7, r0
 800857a:	e7f0      	b.n	800855e <_dtoa_r+0xa0e>
 800857c:	f1ba 0f00 	cmp.w	sl, #0
 8008580:	9a01      	ldr	r2, [sp, #4]
 8008582:	bfcc      	ite	gt
 8008584:	46d0      	movgt	r8, sl
 8008586:	f04f 0801 	movle.w	r8, #1
 800858a:	4490      	add	r8, r2
 800858c:	f04f 0900 	mov.w	r9, #0
 8008590:	4629      	mov	r1, r5
 8008592:	2201      	movs	r2, #1
 8008594:	4630      	mov	r0, r6
 8008596:	9302      	str	r3, [sp, #8]
 8008598:	f000 fb56 	bl	8008c48 <__lshift>
 800859c:	4621      	mov	r1, r4
 800859e:	4605      	mov	r5, r0
 80085a0:	f000 fbbe 	bl	8008d20 <__mcmp>
 80085a4:	2800      	cmp	r0, #0
 80085a6:	dcb1      	bgt.n	800850c <_dtoa_r+0x9bc>
 80085a8:	d102      	bne.n	80085b0 <_dtoa_r+0xa60>
 80085aa:	9b02      	ldr	r3, [sp, #8]
 80085ac:	07db      	lsls	r3, r3, #31
 80085ae:	d4ad      	bmi.n	800850c <_dtoa_r+0x9bc>
 80085b0:	4643      	mov	r3, r8
 80085b2:	4698      	mov	r8, r3
 80085b4:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80085b8:	2a30      	cmp	r2, #48	; 0x30
 80085ba:	d0fa      	beq.n	80085b2 <_dtoa_r+0xa62>
 80085bc:	e6f7      	b.n	80083ae <_dtoa_r+0x85e>
 80085be:	9a01      	ldr	r2, [sp, #4]
 80085c0:	429a      	cmp	r2, r3
 80085c2:	d1a4      	bne.n	800850e <_dtoa_r+0x9be>
 80085c4:	f10b 0b01 	add.w	fp, fp, #1
 80085c8:	2331      	movs	r3, #49	; 0x31
 80085ca:	e778      	b.n	80084be <_dtoa_r+0x96e>
 80085cc:	4b14      	ldr	r3, [pc, #80]	; (8008620 <_dtoa_r+0xad0>)
 80085ce:	f7ff bb2a 	b.w	8007c26 <_dtoa_r+0xd6>
 80085d2:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80085d4:	2b00      	cmp	r3, #0
 80085d6:	f47f ab05 	bne.w	8007be4 <_dtoa_r+0x94>
 80085da:	4b12      	ldr	r3, [pc, #72]	; (8008624 <_dtoa_r+0xad4>)
 80085dc:	f7ff bb23 	b.w	8007c26 <_dtoa_r+0xd6>
 80085e0:	f1ba 0f00 	cmp.w	sl, #0
 80085e4:	dc03      	bgt.n	80085ee <_dtoa_r+0xa9e>
 80085e6:	9b06      	ldr	r3, [sp, #24]
 80085e8:	2b02      	cmp	r3, #2
 80085ea:	f73f aec8 	bgt.w	800837e <_dtoa_r+0x82e>
 80085ee:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80085f2:	4621      	mov	r1, r4
 80085f4:	4628      	mov	r0, r5
 80085f6:	f7ff fa22 	bl	8007a3e <quorem>
 80085fa:	f100 0330 	add.w	r3, r0, #48	; 0x30
 80085fe:	f808 3b01 	strb.w	r3, [r8], #1
 8008602:	9a01      	ldr	r2, [sp, #4]
 8008604:	eba8 0202 	sub.w	r2, r8, r2
 8008608:	4592      	cmp	sl, r2
 800860a:	ddb7      	ble.n	800857c <_dtoa_r+0xa2c>
 800860c:	4629      	mov	r1, r5
 800860e:	2300      	movs	r3, #0
 8008610:	220a      	movs	r2, #10
 8008612:	4630      	mov	r0, r6
 8008614:	f000 f96a 	bl	80088ec <__multadd>
 8008618:	4605      	mov	r5, r0
 800861a:	e7ea      	b.n	80085f2 <_dtoa_r+0xaa2>
 800861c:	0802fbc4 	.word	0x0802fbc4
 8008620:	0802fb24 	.word	0x0802fb24
 8008624:	0802fb48 	.word	0x0802fb48

08008628 <_free_r>:
 8008628:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800862a:	2900      	cmp	r1, #0
 800862c:	d044      	beq.n	80086b8 <_free_r+0x90>
 800862e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008632:	9001      	str	r0, [sp, #4]
 8008634:	2b00      	cmp	r3, #0
 8008636:	f1a1 0404 	sub.w	r4, r1, #4
 800863a:	bfb8      	it	lt
 800863c:	18e4      	addlt	r4, r4, r3
 800863e:	f000 f8e7 	bl	8008810 <__malloc_lock>
 8008642:	4a1e      	ldr	r2, [pc, #120]	; (80086bc <_free_r+0x94>)
 8008644:	9801      	ldr	r0, [sp, #4]
 8008646:	6813      	ldr	r3, [r2, #0]
 8008648:	b933      	cbnz	r3, 8008658 <_free_r+0x30>
 800864a:	6063      	str	r3, [r4, #4]
 800864c:	6014      	str	r4, [r2, #0]
 800864e:	b003      	add	sp, #12
 8008650:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008654:	f000 b8e2 	b.w	800881c <__malloc_unlock>
 8008658:	42a3      	cmp	r3, r4
 800865a:	d908      	bls.n	800866e <_free_r+0x46>
 800865c:	6825      	ldr	r5, [r4, #0]
 800865e:	1961      	adds	r1, r4, r5
 8008660:	428b      	cmp	r3, r1
 8008662:	bf01      	itttt	eq
 8008664:	6819      	ldreq	r1, [r3, #0]
 8008666:	685b      	ldreq	r3, [r3, #4]
 8008668:	1949      	addeq	r1, r1, r5
 800866a:	6021      	streq	r1, [r4, #0]
 800866c:	e7ed      	b.n	800864a <_free_r+0x22>
 800866e:	461a      	mov	r2, r3
 8008670:	685b      	ldr	r3, [r3, #4]
 8008672:	b10b      	cbz	r3, 8008678 <_free_r+0x50>
 8008674:	42a3      	cmp	r3, r4
 8008676:	d9fa      	bls.n	800866e <_free_r+0x46>
 8008678:	6811      	ldr	r1, [r2, #0]
 800867a:	1855      	adds	r5, r2, r1
 800867c:	42a5      	cmp	r5, r4
 800867e:	d10b      	bne.n	8008698 <_free_r+0x70>
 8008680:	6824      	ldr	r4, [r4, #0]
 8008682:	4421      	add	r1, r4
 8008684:	1854      	adds	r4, r2, r1
 8008686:	42a3      	cmp	r3, r4
 8008688:	6011      	str	r1, [r2, #0]
 800868a:	d1e0      	bne.n	800864e <_free_r+0x26>
 800868c:	681c      	ldr	r4, [r3, #0]
 800868e:	685b      	ldr	r3, [r3, #4]
 8008690:	6053      	str	r3, [r2, #4]
 8008692:	440c      	add	r4, r1
 8008694:	6014      	str	r4, [r2, #0]
 8008696:	e7da      	b.n	800864e <_free_r+0x26>
 8008698:	d902      	bls.n	80086a0 <_free_r+0x78>
 800869a:	230c      	movs	r3, #12
 800869c:	6003      	str	r3, [r0, #0]
 800869e:	e7d6      	b.n	800864e <_free_r+0x26>
 80086a0:	6825      	ldr	r5, [r4, #0]
 80086a2:	1961      	adds	r1, r4, r5
 80086a4:	428b      	cmp	r3, r1
 80086a6:	bf04      	itt	eq
 80086a8:	6819      	ldreq	r1, [r3, #0]
 80086aa:	685b      	ldreq	r3, [r3, #4]
 80086ac:	6063      	str	r3, [r4, #4]
 80086ae:	bf04      	itt	eq
 80086b0:	1949      	addeq	r1, r1, r5
 80086b2:	6021      	streq	r1, [r4, #0]
 80086b4:	6054      	str	r4, [r2, #4]
 80086b6:	e7ca      	b.n	800864e <_free_r+0x26>
 80086b8:	b003      	add	sp, #12
 80086ba:	bd30      	pop	{r4, r5, pc}
 80086bc:	2000059c 	.word	0x2000059c

080086c0 <malloc>:
 80086c0:	4b02      	ldr	r3, [pc, #8]	; (80086cc <malloc+0xc>)
 80086c2:	4601      	mov	r1, r0
 80086c4:	6818      	ldr	r0, [r3, #0]
 80086c6:	f000 b823 	b.w	8008710 <_malloc_r>
 80086ca:	bf00      	nop
 80086cc:	20000084 	.word	0x20000084

080086d0 <sbrk_aligned>:
 80086d0:	b570      	push	{r4, r5, r6, lr}
 80086d2:	4e0e      	ldr	r6, [pc, #56]	; (800870c <sbrk_aligned+0x3c>)
 80086d4:	460c      	mov	r4, r1
 80086d6:	6831      	ldr	r1, [r6, #0]
 80086d8:	4605      	mov	r5, r0
 80086da:	b911      	cbnz	r1, 80086e2 <sbrk_aligned+0x12>
 80086dc:	f000 fe40 	bl	8009360 <_sbrk_r>
 80086e0:	6030      	str	r0, [r6, #0]
 80086e2:	4621      	mov	r1, r4
 80086e4:	4628      	mov	r0, r5
 80086e6:	f000 fe3b 	bl	8009360 <_sbrk_r>
 80086ea:	1c43      	adds	r3, r0, #1
 80086ec:	d00a      	beq.n	8008704 <sbrk_aligned+0x34>
 80086ee:	1cc4      	adds	r4, r0, #3
 80086f0:	f024 0403 	bic.w	r4, r4, #3
 80086f4:	42a0      	cmp	r0, r4
 80086f6:	d007      	beq.n	8008708 <sbrk_aligned+0x38>
 80086f8:	1a21      	subs	r1, r4, r0
 80086fa:	4628      	mov	r0, r5
 80086fc:	f000 fe30 	bl	8009360 <_sbrk_r>
 8008700:	3001      	adds	r0, #1
 8008702:	d101      	bne.n	8008708 <sbrk_aligned+0x38>
 8008704:	f04f 34ff 	mov.w	r4, #4294967295
 8008708:	4620      	mov	r0, r4
 800870a:	bd70      	pop	{r4, r5, r6, pc}
 800870c:	200005a0 	.word	0x200005a0

08008710 <_malloc_r>:
 8008710:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008714:	1ccd      	adds	r5, r1, #3
 8008716:	f025 0503 	bic.w	r5, r5, #3
 800871a:	3508      	adds	r5, #8
 800871c:	2d0c      	cmp	r5, #12
 800871e:	bf38      	it	cc
 8008720:	250c      	movcc	r5, #12
 8008722:	2d00      	cmp	r5, #0
 8008724:	4607      	mov	r7, r0
 8008726:	db01      	blt.n	800872c <_malloc_r+0x1c>
 8008728:	42a9      	cmp	r1, r5
 800872a:	d905      	bls.n	8008738 <_malloc_r+0x28>
 800872c:	230c      	movs	r3, #12
 800872e:	603b      	str	r3, [r7, #0]
 8008730:	2600      	movs	r6, #0
 8008732:	4630      	mov	r0, r6
 8008734:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008738:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800880c <_malloc_r+0xfc>
 800873c:	f000 f868 	bl	8008810 <__malloc_lock>
 8008740:	f8d8 3000 	ldr.w	r3, [r8]
 8008744:	461c      	mov	r4, r3
 8008746:	bb5c      	cbnz	r4, 80087a0 <_malloc_r+0x90>
 8008748:	4629      	mov	r1, r5
 800874a:	4638      	mov	r0, r7
 800874c:	f7ff ffc0 	bl	80086d0 <sbrk_aligned>
 8008750:	1c43      	adds	r3, r0, #1
 8008752:	4604      	mov	r4, r0
 8008754:	d155      	bne.n	8008802 <_malloc_r+0xf2>
 8008756:	f8d8 4000 	ldr.w	r4, [r8]
 800875a:	4626      	mov	r6, r4
 800875c:	2e00      	cmp	r6, #0
 800875e:	d145      	bne.n	80087ec <_malloc_r+0xdc>
 8008760:	2c00      	cmp	r4, #0
 8008762:	d048      	beq.n	80087f6 <_malloc_r+0xe6>
 8008764:	6823      	ldr	r3, [r4, #0]
 8008766:	4631      	mov	r1, r6
 8008768:	4638      	mov	r0, r7
 800876a:	eb04 0903 	add.w	r9, r4, r3
 800876e:	f000 fdf7 	bl	8009360 <_sbrk_r>
 8008772:	4581      	cmp	r9, r0
 8008774:	d13f      	bne.n	80087f6 <_malloc_r+0xe6>
 8008776:	6821      	ldr	r1, [r4, #0]
 8008778:	1a6d      	subs	r5, r5, r1
 800877a:	4629      	mov	r1, r5
 800877c:	4638      	mov	r0, r7
 800877e:	f7ff ffa7 	bl	80086d0 <sbrk_aligned>
 8008782:	3001      	adds	r0, #1
 8008784:	d037      	beq.n	80087f6 <_malloc_r+0xe6>
 8008786:	6823      	ldr	r3, [r4, #0]
 8008788:	442b      	add	r3, r5
 800878a:	6023      	str	r3, [r4, #0]
 800878c:	f8d8 3000 	ldr.w	r3, [r8]
 8008790:	2b00      	cmp	r3, #0
 8008792:	d038      	beq.n	8008806 <_malloc_r+0xf6>
 8008794:	685a      	ldr	r2, [r3, #4]
 8008796:	42a2      	cmp	r2, r4
 8008798:	d12b      	bne.n	80087f2 <_malloc_r+0xe2>
 800879a:	2200      	movs	r2, #0
 800879c:	605a      	str	r2, [r3, #4]
 800879e:	e00f      	b.n	80087c0 <_malloc_r+0xb0>
 80087a0:	6822      	ldr	r2, [r4, #0]
 80087a2:	1b52      	subs	r2, r2, r5
 80087a4:	d41f      	bmi.n	80087e6 <_malloc_r+0xd6>
 80087a6:	2a0b      	cmp	r2, #11
 80087a8:	d917      	bls.n	80087da <_malloc_r+0xca>
 80087aa:	1961      	adds	r1, r4, r5
 80087ac:	42a3      	cmp	r3, r4
 80087ae:	6025      	str	r5, [r4, #0]
 80087b0:	bf18      	it	ne
 80087b2:	6059      	strne	r1, [r3, #4]
 80087b4:	6863      	ldr	r3, [r4, #4]
 80087b6:	bf08      	it	eq
 80087b8:	f8c8 1000 	streq.w	r1, [r8]
 80087bc:	5162      	str	r2, [r4, r5]
 80087be:	604b      	str	r3, [r1, #4]
 80087c0:	4638      	mov	r0, r7
 80087c2:	f104 060b 	add.w	r6, r4, #11
 80087c6:	f000 f829 	bl	800881c <__malloc_unlock>
 80087ca:	f026 0607 	bic.w	r6, r6, #7
 80087ce:	1d23      	adds	r3, r4, #4
 80087d0:	1af2      	subs	r2, r6, r3
 80087d2:	d0ae      	beq.n	8008732 <_malloc_r+0x22>
 80087d4:	1b9b      	subs	r3, r3, r6
 80087d6:	50a3      	str	r3, [r4, r2]
 80087d8:	e7ab      	b.n	8008732 <_malloc_r+0x22>
 80087da:	42a3      	cmp	r3, r4
 80087dc:	6862      	ldr	r2, [r4, #4]
 80087de:	d1dd      	bne.n	800879c <_malloc_r+0x8c>
 80087e0:	f8c8 2000 	str.w	r2, [r8]
 80087e4:	e7ec      	b.n	80087c0 <_malloc_r+0xb0>
 80087e6:	4623      	mov	r3, r4
 80087e8:	6864      	ldr	r4, [r4, #4]
 80087ea:	e7ac      	b.n	8008746 <_malloc_r+0x36>
 80087ec:	4634      	mov	r4, r6
 80087ee:	6876      	ldr	r6, [r6, #4]
 80087f0:	e7b4      	b.n	800875c <_malloc_r+0x4c>
 80087f2:	4613      	mov	r3, r2
 80087f4:	e7cc      	b.n	8008790 <_malloc_r+0x80>
 80087f6:	230c      	movs	r3, #12
 80087f8:	603b      	str	r3, [r7, #0]
 80087fa:	4638      	mov	r0, r7
 80087fc:	f000 f80e 	bl	800881c <__malloc_unlock>
 8008800:	e797      	b.n	8008732 <_malloc_r+0x22>
 8008802:	6025      	str	r5, [r4, #0]
 8008804:	e7dc      	b.n	80087c0 <_malloc_r+0xb0>
 8008806:	605b      	str	r3, [r3, #4]
 8008808:	deff      	udf	#255	; 0xff
 800880a:	bf00      	nop
 800880c:	2000059c 	.word	0x2000059c

08008810 <__malloc_lock>:
 8008810:	4801      	ldr	r0, [pc, #4]	; (8008818 <__malloc_lock+0x8>)
 8008812:	f7ff b912 	b.w	8007a3a <__retarget_lock_acquire_recursive>
 8008816:	bf00      	nop
 8008818:	20000598 	.word	0x20000598

0800881c <__malloc_unlock>:
 800881c:	4801      	ldr	r0, [pc, #4]	; (8008824 <__malloc_unlock+0x8>)
 800881e:	f7ff b90d 	b.w	8007a3c <__retarget_lock_release_recursive>
 8008822:	bf00      	nop
 8008824:	20000598 	.word	0x20000598

08008828 <_Balloc>:
 8008828:	b570      	push	{r4, r5, r6, lr}
 800882a:	69c6      	ldr	r6, [r0, #28]
 800882c:	4604      	mov	r4, r0
 800882e:	460d      	mov	r5, r1
 8008830:	b976      	cbnz	r6, 8008850 <_Balloc+0x28>
 8008832:	2010      	movs	r0, #16
 8008834:	f7ff ff44 	bl	80086c0 <malloc>
 8008838:	4602      	mov	r2, r0
 800883a:	61e0      	str	r0, [r4, #28]
 800883c:	b920      	cbnz	r0, 8008848 <_Balloc+0x20>
 800883e:	4b18      	ldr	r3, [pc, #96]	; (80088a0 <_Balloc+0x78>)
 8008840:	4818      	ldr	r0, [pc, #96]	; (80088a4 <_Balloc+0x7c>)
 8008842:	216b      	movs	r1, #107	; 0x6b
 8008844:	f000 fdaa 	bl	800939c <__assert_func>
 8008848:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800884c:	6006      	str	r6, [r0, #0]
 800884e:	60c6      	str	r6, [r0, #12]
 8008850:	69e6      	ldr	r6, [r4, #28]
 8008852:	68f3      	ldr	r3, [r6, #12]
 8008854:	b183      	cbz	r3, 8008878 <_Balloc+0x50>
 8008856:	69e3      	ldr	r3, [r4, #28]
 8008858:	68db      	ldr	r3, [r3, #12]
 800885a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800885e:	b9b8      	cbnz	r0, 8008890 <_Balloc+0x68>
 8008860:	2101      	movs	r1, #1
 8008862:	fa01 f605 	lsl.w	r6, r1, r5
 8008866:	1d72      	adds	r2, r6, #5
 8008868:	0092      	lsls	r2, r2, #2
 800886a:	4620      	mov	r0, r4
 800886c:	f000 fdb4 	bl	80093d8 <_calloc_r>
 8008870:	b160      	cbz	r0, 800888c <_Balloc+0x64>
 8008872:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008876:	e00e      	b.n	8008896 <_Balloc+0x6e>
 8008878:	2221      	movs	r2, #33	; 0x21
 800887a:	2104      	movs	r1, #4
 800887c:	4620      	mov	r0, r4
 800887e:	f000 fdab 	bl	80093d8 <_calloc_r>
 8008882:	69e3      	ldr	r3, [r4, #28]
 8008884:	60f0      	str	r0, [r6, #12]
 8008886:	68db      	ldr	r3, [r3, #12]
 8008888:	2b00      	cmp	r3, #0
 800888a:	d1e4      	bne.n	8008856 <_Balloc+0x2e>
 800888c:	2000      	movs	r0, #0
 800888e:	bd70      	pop	{r4, r5, r6, pc}
 8008890:	6802      	ldr	r2, [r0, #0]
 8008892:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008896:	2300      	movs	r3, #0
 8008898:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800889c:	e7f7      	b.n	800888e <_Balloc+0x66>
 800889e:	bf00      	nop
 80088a0:	0802fb55 	.word	0x0802fb55
 80088a4:	0802fbd5 	.word	0x0802fbd5

080088a8 <_Bfree>:
 80088a8:	b570      	push	{r4, r5, r6, lr}
 80088aa:	69c6      	ldr	r6, [r0, #28]
 80088ac:	4605      	mov	r5, r0
 80088ae:	460c      	mov	r4, r1
 80088b0:	b976      	cbnz	r6, 80088d0 <_Bfree+0x28>
 80088b2:	2010      	movs	r0, #16
 80088b4:	f7ff ff04 	bl	80086c0 <malloc>
 80088b8:	4602      	mov	r2, r0
 80088ba:	61e8      	str	r0, [r5, #28]
 80088bc:	b920      	cbnz	r0, 80088c8 <_Bfree+0x20>
 80088be:	4b09      	ldr	r3, [pc, #36]	; (80088e4 <_Bfree+0x3c>)
 80088c0:	4809      	ldr	r0, [pc, #36]	; (80088e8 <_Bfree+0x40>)
 80088c2:	218f      	movs	r1, #143	; 0x8f
 80088c4:	f000 fd6a 	bl	800939c <__assert_func>
 80088c8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80088cc:	6006      	str	r6, [r0, #0]
 80088ce:	60c6      	str	r6, [r0, #12]
 80088d0:	b13c      	cbz	r4, 80088e2 <_Bfree+0x3a>
 80088d2:	69eb      	ldr	r3, [r5, #28]
 80088d4:	6862      	ldr	r2, [r4, #4]
 80088d6:	68db      	ldr	r3, [r3, #12]
 80088d8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80088dc:	6021      	str	r1, [r4, #0]
 80088de:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80088e2:	bd70      	pop	{r4, r5, r6, pc}
 80088e4:	0802fb55 	.word	0x0802fb55
 80088e8:	0802fbd5 	.word	0x0802fbd5

080088ec <__multadd>:
 80088ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80088f0:	690d      	ldr	r5, [r1, #16]
 80088f2:	4607      	mov	r7, r0
 80088f4:	460c      	mov	r4, r1
 80088f6:	461e      	mov	r6, r3
 80088f8:	f101 0c14 	add.w	ip, r1, #20
 80088fc:	2000      	movs	r0, #0
 80088fe:	f8dc 3000 	ldr.w	r3, [ip]
 8008902:	b299      	uxth	r1, r3
 8008904:	fb02 6101 	mla	r1, r2, r1, r6
 8008908:	0c1e      	lsrs	r6, r3, #16
 800890a:	0c0b      	lsrs	r3, r1, #16
 800890c:	fb02 3306 	mla	r3, r2, r6, r3
 8008910:	b289      	uxth	r1, r1
 8008912:	3001      	adds	r0, #1
 8008914:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008918:	4285      	cmp	r5, r0
 800891a:	f84c 1b04 	str.w	r1, [ip], #4
 800891e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8008922:	dcec      	bgt.n	80088fe <__multadd+0x12>
 8008924:	b30e      	cbz	r6, 800896a <__multadd+0x7e>
 8008926:	68a3      	ldr	r3, [r4, #8]
 8008928:	42ab      	cmp	r3, r5
 800892a:	dc19      	bgt.n	8008960 <__multadd+0x74>
 800892c:	6861      	ldr	r1, [r4, #4]
 800892e:	4638      	mov	r0, r7
 8008930:	3101      	adds	r1, #1
 8008932:	f7ff ff79 	bl	8008828 <_Balloc>
 8008936:	4680      	mov	r8, r0
 8008938:	b928      	cbnz	r0, 8008946 <__multadd+0x5a>
 800893a:	4602      	mov	r2, r0
 800893c:	4b0c      	ldr	r3, [pc, #48]	; (8008970 <__multadd+0x84>)
 800893e:	480d      	ldr	r0, [pc, #52]	; (8008974 <__multadd+0x88>)
 8008940:	21ba      	movs	r1, #186	; 0xba
 8008942:	f000 fd2b 	bl	800939c <__assert_func>
 8008946:	6922      	ldr	r2, [r4, #16]
 8008948:	3202      	adds	r2, #2
 800894a:	f104 010c 	add.w	r1, r4, #12
 800894e:	0092      	lsls	r2, r2, #2
 8008950:	300c      	adds	r0, #12
 8008952:	f000 fd15 	bl	8009380 <memcpy>
 8008956:	4621      	mov	r1, r4
 8008958:	4638      	mov	r0, r7
 800895a:	f7ff ffa5 	bl	80088a8 <_Bfree>
 800895e:	4644      	mov	r4, r8
 8008960:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008964:	3501      	adds	r5, #1
 8008966:	615e      	str	r6, [r3, #20]
 8008968:	6125      	str	r5, [r4, #16]
 800896a:	4620      	mov	r0, r4
 800896c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008970:	0802fbc4 	.word	0x0802fbc4
 8008974:	0802fbd5 	.word	0x0802fbd5

08008978 <__hi0bits>:
 8008978:	0c03      	lsrs	r3, r0, #16
 800897a:	041b      	lsls	r3, r3, #16
 800897c:	b9d3      	cbnz	r3, 80089b4 <__hi0bits+0x3c>
 800897e:	0400      	lsls	r0, r0, #16
 8008980:	2310      	movs	r3, #16
 8008982:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8008986:	bf04      	itt	eq
 8008988:	0200      	lsleq	r0, r0, #8
 800898a:	3308      	addeq	r3, #8
 800898c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8008990:	bf04      	itt	eq
 8008992:	0100      	lsleq	r0, r0, #4
 8008994:	3304      	addeq	r3, #4
 8008996:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800899a:	bf04      	itt	eq
 800899c:	0080      	lsleq	r0, r0, #2
 800899e:	3302      	addeq	r3, #2
 80089a0:	2800      	cmp	r0, #0
 80089a2:	db05      	blt.n	80089b0 <__hi0bits+0x38>
 80089a4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80089a8:	f103 0301 	add.w	r3, r3, #1
 80089ac:	bf08      	it	eq
 80089ae:	2320      	moveq	r3, #32
 80089b0:	4618      	mov	r0, r3
 80089b2:	4770      	bx	lr
 80089b4:	2300      	movs	r3, #0
 80089b6:	e7e4      	b.n	8008982 <__hi0bits+0xa>

080089b8 <__lo0bits>:
 80089b8:	6803      	ldr	r3, [r0, #0]
 80089ba:	f013 0207 	ands.w	r2, r3, #7
 80089be:	d00c      	beq.n	80089da <__lo0bits+0x22>
 80089c0:	07d9      	lsls	r1, r3, #31
 80089c2:	d422      	bmi.n	8008a0a <__lo0bits+0x52>
 80089c4:	079a      	lsls	r2, r3, #30
 80089c6:	bf49      	itett	mi
 80089c8:	085b      	lsrmi	r3, r3, #1
 80089ca:	089b      	lsrpl	r3, r3, #2
 80089cc:	6003      	strmi	r3, [r0, #0]
 80089ce:	2201      	movmi	r2, #1
 80089d0:	bf5c      	itt	pl
 80089d2:	6003      	strpl	r3, [r0, #0]
 80089d4:	2202      	movpl	r2, #2
 80089d6:	4610      	mov	r0, r2
 80089d8:	4770      	bx	lr
 80089da:	b299      	uxth	r1, r3
 80089dc:	b909      	cbnz	r1, 80089e2 <__lo0bits+0x2a>
 80089de:	0c1b      	lsrs	r3, r3, #16
 80089e0:	2210      	movs	r2, #16
 80089e2:	b2d9      	uxtb	r1, r3
 80089e4:	b909      	cbnz	r1, 80089ea <__lo0bits+0x32>
 80089e6:	3208      	adds	r2, #8
 80089e8:	0a1b      	lsrs	r3, r3, #8
 80089ea:	0719      	lsls	r1, r3, #28
 80089ec:	bf04      	itt	eq
 80089ee:	091b      	lsreq	r3, r3, #4
 80089f0:	3204      	addeq	r2, #4
 80089f2:	0799      	lsls	r1, r3, #30
 80089f4:	bf04      	itt	eq
 80089f6:	089b      	lsreq	r3, r3, #2
 80089f8:	3202      	addeq	r2, #2
 80089fa:	07d9      	lsls	r1, r3, #31
 80089fc:	d403      	bmi.n	8008a06 <__lo0bits+0x4e>
 80089fe:	085b      	lsrs	r3, r3, #1
 8008a00:	f102 0201 	add.w	r2, r2, #1
 8008a04:	d003      	beq.n	8008a0e <__lo0bits+0x56>
 8008a06:	6003      	str	r3, [r0, #0]
 8008a08:	e7e5      	b.n	80089d6 <__lo0bits+0x1e>
 8008a0a:	2200      	movs	r2, #0
 8008a0c:	e7e3      	b.n	80089d6 <__lo0bits+0x1e>
 8008a0e:	2220      	movs	r2, #32
 8008a10:	e7e1      	b.n	80089d6 <__lo0bits+0x1e>
	...

08008a14 <__i2b>:
 8008a14:	b510      	push	{r4, lr}
 8008a16:	460c      	mov	r4, r1
 8008a18:	2101      	movs	r1, #1
 8008a1a:	f7ff ff05 	bl	8008828 <_Balloc>
 8008a1e:	4602      	mov	r2, r0
 8008a20:	b928      	cbnz	r0, 8008a2e <__i2b+0x1a>
 8008a22:	4b05      	ldr	r3, [pc, #20]	; (8008a38 <__i2b+0x24>)
 8008a24:	4805      	ldr	r0, [pc, #20]	; (8008a3c <__i2b+0x28>)
 8008a26:	f240 1145 	movw	r1, #325	; 0x145
 8008a2a:	f000 fcb7 	bl	800939c <__assert_func>
 8008a2e:	2301      	movs	r3, #1
 8008a30:	6144      	str	r4, [r0, #20]
 8008a32:	6103      	str	r3, [r0, #16]
 8008a34:	bd10      	pop	{r4, pc}
 8008a36:	bf00      	nop
 8008a38:	0802fbc4 	.word	0x0802fbc4
 8008a3c:	0802fbd5 	.word	0x0802fbd5

08008a40 <__multiply>:
 8008a40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a44:	4691      	mov	r9, r2
 8008a46:	690a      	ldr	r2, [r1, #16]
 8008a48:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8008a4c:	429a      	cmp	r2, r3
 8008a4e:	bfb8      	it	lt
 8008a50:	460b      	movlt	r3, r1
 8008a52:	460c      	mov	r4, r1
 8008a54:	bfbc      	itt	lt
 8008a56:	464c      	movlt	r4, r9
 8008a58:	4699      	movlt	r9, r3
 8008a5a:	6927      	ldr	r7, [r4, #16]
 8008a5c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8008a60:	68a3      	ldr	r3, [r4, #8]
 8008a62:	6861      	ldr	r1, [r4, #4]
 8008a64:	eb07 060a 	add.w	r6, r7, sl
 8008a68:	42b3      	cmp	r3, r6
 8008a6a:	b085      	sub	sp, #20
 8008a6c:	bfb8      	it	lt
 8008a6e:	3101      	addlt	r1, #1
 8008a70:	f7ff feda 	bl	8008828 <_Balloc>
 8008a74:	b930      	cbnz	r0, 8008a84 <__multiply+0x44>
 8008a76:	4602      	mov	r2, r0
 8008a78:	4b44      	ldr	r3, [pc, #272]	; (8008b8c <__multiply+0x14c>)
 8008a7a:	4845      	ldr	r0, [pc, #276]	; (8008b90 <__multiply+0x150>)
 8008a7c:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8008a80:	f000 fc8c 	bl	800939c <__assert_func>
 8008a84:	f100 0514 	add.w	r5, r0, #20
 8008a88:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8008a8c:	462b      	mov	r3, r5
 8008a8e:	2200      	movs	r2, #0
 8008a90:	4543      	cmp	r3, r8
 8008a92:	d321      	bcc.n	8008ad8 <__multiply+0x98>
 8008a94:	f104 0314 	add.w	r3, r4, #20
 8008a98:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8008a9c:	f109 0314 	add.w	r3, r9, #20
 8008aa0:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8008aa4:	9202      	str	r2, [sp, #8]
 8008aa6:	1b3a      	subs	r2, r7, r4
 8008aa8:	3a15      	subs	r2, #21
 8008aaa:	f022 0203 	bic.w	r2, r2, #3
 8008aae:	3204      	adds	r2, #4
 8008ab0:	f104 0115 	add.w	r1, r4, #21
 8008ab4:	428f      	cmp	r7, r1
 8008ab6:	bf38      	it	cc
 8008ab8:	2204      	movcc	r2, #4
 8008aba:	9201      	str	r2, [sp, #4]
 8008abc:	9a02      	ldr	r2, [sp, #8]
 8008abe:	9303      	str	r3, [sp, #12]
 8008ac0:	429a      	cmp	r2, r3
 8008ac2:	d80c      	bhi.n	8008ade <__multiply+0x9e>
 8008ac4:	2e00      	cmp	r6, #0
 8008ac6:	dd03      	ble.n	8008ad0 <__multiply+0x90>
 8008ac8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008acc:	2b00      	cmp	r3, #0
 8008ace:	d05b      	beq.n	8008b88 <__multiply+0x148>
 8008ad0:	6106      	str	r6, [r0, #16]
 8008ad2:	b005      	add	sp, #20
 8008ad4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ad8:	f843 2b04 	str.w	r2, [r3], #4
 8008adc:	e7d8      	b.n	8008a90 <__multiply+0x50>
 8008ade:	f8b3 a000 	ldrh.w	sl, [r3]
 8008ae2:	f1ba 0f00 	cmp.w	sl, #0
 8008ae6:	d024      	beq.n	8008b32 <__multiply+0xf2>
 8008ae8:	f104 0e14 	add.w	lr, r4, #20
 8008aec:	46a9      	mov	r9, r5
 8008aee:	f04f 0c00 	mov.w	ip, #0
 8008af2:	f85e 2b04 	ldr.w	r2, [lr], #4
 8008af6:	f8d9 1000 	ldr.w	r1, [r9]
 8008afa:	fa1f fb82 	uxth.w	fp, r2
 8008afe:	b289      	uxth	r1, r1
 8008b00:	fb0a 110b 	mla	r1, sl, fp, r1
 8008b04:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8008b08:	f8d9 2000 	ldr.w	r2, [r9]
 8008b0c:	4461      	add	r1, ip
 8008b0e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8008b12:	fb0a c20b 	mla	r2, sl, fp, ip
 8008b16:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8008b1a:	b289      	uxth	r1, r1
 8008b1c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8008b20:	4577      	cmp	r7, lr
 8008b22:	f849 1b04 	str.w	r1, [r9], #4
 8008b26:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8008b2a:	d8e2      	bhi.n	8008af2 <__multiply+0xb2>
 8008b2c:	9a01      	ldr	r2, [sp, #4]
 8008b2e:	f845 c002 	str.w	ip, [r5, r2]
 8008b32:	9a03      	ldr	r2, [sp, #12]
 8008b34:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8008b38:	3304      	adds	r3, #4
 8008b3a:	f1b9 0f00 	cmp.w	r9, #0
 8008b3e:	d021      	beq.n	8008b84 <__multiply+0x144>
 8008b40:	6829      	ldr	r1, [r5, #0]
 8008b42:	f104 0c14 	add.w	ip, r4, #20
 8008b46:	46ae      	mov	lr, r5
 8008b48:	f04f 0a00 	mov.w	sl, #0
 8008b4c:	f8bc b000 	ldrh.w	fp, [ip]
 8008b50:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8008b54:	fb09 220b 	mla	r2, r9, fp, r2
 8008b58:	4452      	add	r2, sl
 8008b5a:	b289      	uxth	r1, r1
 8008b5c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8008b60:	f84e 1b04 	str.w	r1, [lr], #4
 8008b64:	f85c 1b04 	ldr.w	r1, [ip], #4
 8008b68:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8008b6c:	f8be 1000 	ldrh.w	r1, [lr]
 8008b70:	fb09 110a 	mla	r1, r9, sl, r1
 8008b74:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8008b78:	4567      	cmp	r7, ip
 8008b7a:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8008b7e:	d8e5      	bhi.n	8008b4c <__multiply+0x10c>
 8008b80:	9a01      	ldr	r2, [sp, #4]
 8008b82:	50a9      	str	r1, [r5, r2]
 8008b84:	3504      	adds	r5, #4
 8008b86:	e799      	b.n	8008abc <__multiply+0x7c>
 8008b88:	3e01      	subs	r6, #1
 8008b8a:	e79b      	b.n	8008ac4 <__multiply+0x84>
 8008b8c:	0802fbc4 	.word	0x0802fbc4
 8008b90:	0802fbd5 	.word	0x0802fbd5

08008b94 <__pow5mult>:
 8008b94:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008b98:	4615      	mov	r5, r2
 8008b9a:	f012 0203 	ands.w	r2, r2, #3
 8008b9e:	4606      	mov	r6, r0
 8008ba0:	460f      	mov	r7, r1
 8008ba2:	d007      	beq.n	8008bb4 <__pow5mult+0x20>
 8008ba4:	4c25      	ldr	r4, [pc, #148]	; (8008c3c <__pow5mult+0xa8>)
 8008ba6:	3a01      	subs	r2, #1
 8008ba8:	2300      	movs	r3, #0
 8008baa:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008bae:	f7ff fe9d 	bl	80088ec <__multadd>
 8008bb2:	4607      	mov	r7, r0
 8008bb4:	10ad      	asrs	r5, r5, #2
 8008bb6:	d03d      	beq.n	8008c34 <__pow5mult+0xa0>
 8008bb8:	69f4      	ldr	r4, [r6, #28]
 8008bba:	b97c      	cbnz	r4, 8008bdc <__pow5mult+0x48>
 8008bbc:	2010      	movs	r0, #16
 8008bbe:	f7ff fd7f 	bl	80086c0 <malloc>
 8008bc2:	4602      	mov	r2, r0
 8008bc4:	61f0      	str	r0, [r6, #28]
 8008bc6:	b928      	cbnz	r0, 8008bd4 <__pow5mult+0x40>
 8008bc8:	4b1d      	ldr	r3, [pc, #116]	; (8008c40 <__pow5mult+0xac>)
 8008bca:	481e      	ldr	r0, [pc, #120]	; (8008c44 <__pow5mult+0xb0>)
 8008bcc:	f240 11b3 	movw	r1, #435	; 0x1b3
 8008bd0:	f000 fbe4 	bl	800939c <__assert_func>
 8008bd4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008bd8:	6004      	str	r4, [r0, #0]
 8008bda:	60c4      	str	r4, [r0, #12]
 8008bdc:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8008be0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008be4:	b94c      	cbnz	r4, 8008bfa <__pow5mult+0x66>
 8008be6:	f240 2171 	movw	r1, #625	; 0x271
 8008bea:	4630      	mov	r0, r6
 8008bec:	f7ff ff12 	bl	8008a14 <__i2b>
 8008bf0:	2300      	movs	r3, #0
 8008bf2:	f8c8 0008 	str.w	r0, [r8, #8]
 8008bf6:	4604      	mov	r4, r0
 8008bf8:	6003      	str	r3, [r0, #0]
 8008bfa:	f04f 0900 	mov.w	r9, #0
 8008bfe:	07eb      	lsls	r3, r5, #31
 8008c00:	d50a      	bpl.n	8008c18 <__pow5mult+0x84>
 8008c02:	4639      	mov	r1, r7
 8008c04:	4622      	mov	r2, r4
 8008c06:	4630      	mov	r0, r6
 8008c08:	f7ff ff1a 	bl	8008a40 <__multiply>
 8008c0c:	4639      	mov	r1, r7
 8008c0e:	4680      	mov	r8, r0
 8008c10:	4630      	mov	r0, r6
 8008c12:	f7ff fe49 	bl	80088a8 <_Bfree>
 8008c16:	4647      	mov	r7, r8
 8008c18:	106d      	asrs	r5, r5, #1
 8008c1a:	d00b      	beq.n	8008c34 <__pow5mult+0xa0>
 8008c1c:	6820      	ldr	r0, [r4, #0]
 8008c1e:	b938      	cbnz	r0, 8008c30 <__pow5mult+0x9c>
 8008c20:	4622      	mov	r2, r4
 8008c22:	4621      	mov	r1, r4
 8008c24:	4630      	mov	r0, r6
 8008c26:	f7ff ff0b 	bl	8008a40 <__multiply>
 8008c2a:	6020      	str	r0, [r4, #0]
 8008c2c:	f8c0 9000 	str.w	r9, [r0]
 8008c30:	4604      	mov	r4, r0
 8008c32:	e7e4      	b.n	8008bfe <__pow5mult+0x6a>
 8008c34:	4638      	mov	r0, r7
 8008c36:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008c3a:	bf00      	nop
 8008c3c:	0802fd20 	.word	0x0802fd20
 8008c40:	0802fb55 	.word	0x0802fb55
 8008c44:	0802fbd5 	.word	0x0802fbd5

08008c48 <__lshift>:
 8008c48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008c4c:	460c      	mov	r4, r1
 8008c4e:	6849      	ldr	r1, [r1, #4]
 8008c50:	6923      	ldr	r3, [r4, #16]
 8008c52:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008c56:	68a3      	ldr	r3, [r4, #8]
 8008c58:	4607      	mov	r7, r0
 8008c5a:	4691      	mov	r9, r2
 8008c5c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008c60:	f108 0601 	add.w	r6, r8, #1
 8008c64:	42b3      	cmp	r3, r6
 8008c66:	db0b      	blt.n	8008c80 <__lshift+0x38>
 8008c68:	4638      	mov	r0, r7
 8008c6a:	f7ff fddd 	bl	8008828 <_Balloc>
 8008c6e:	4605      	mov	r5, r0
 8008c70:	b948      	cbnz	r0, 8008c86 <__lshift+0x3e>
 8008c72:	4602      	mov	r2, r0
 8008c74:	4b28      	ldr	r3, [pc, #160]	; (8008d18 <__lshift+0xd0>)
 8008c76:	4829      	ldr	r0, [pc, #164]	; (8008d1c <__lshift+0xd4>)
 8008c78:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8008c7c:	f000 fb8e 	bl	800939c <__assert_func>
 8008c80:	3101      	adds	r1, #1
 8008c82:	005b      	lsls	r3, r3, #1
 8008c84:	e7ee      	b.n	8008c64 <__lshift+0x1c>
 8008c86:	2300      	movs	r3, #0
 8008c88:	f100 0114 	add.w	r1, r0, #20
 8008c8c:	f100 0210 	add.w	r2, r0, #16
 8008c90:	4618      	mov	r0, r3
 8008c92:	4553      	cmp	r3, sl
 8008c94:	db33      	blt.n	8008cfe <__lshift+0xb6>
 8008c96:	6920      	ldr	r0, [r4, #16]
 8008c98:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008c9c:	f104 0314 	add.w	r3, r4, #20
 8008ca0:	f019 091f 	ands.w	r9, r9, #31
 8008ca4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008ca8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008cac:	d02b      	beq.n	8008d06 <__lshift+0xbe>
 8008cae:	f1c9 0e20 	rsb	lr, r9, #32
 8008cb2:	468a      	mov	sl, r1
 8008cb4:	2200      	movs	r2, #0
 8008cb6:	6818      	ldr	r0, [r3, #0]
 8008cb8:	fa00 f009 	lsl.w	r0, r0, r9
 8008cbc:	4310      	orrs	r0, r2
 8008cbe:	f84a 0b04 	str.w	r0, [sl], #4
 8008cc2:	f853 2b04 	ldr.w	r2, [r3], #4
 8008cc6:	459c      	cmp	ip, r3
 8008cc8:	fa22 f20e 	lsr.w	r2, r2, lr
 8008ccc:	d8f3      	bhi.n	8008cb6 <__lshift+0x6e>
 8008cce:	ebac 0304 	sub.w	r3, ip, r4
 8008cd2:	3b15      	subs	r3, #21
 8008cd4:	f023 0303 	bic.w	r3, r3, #3
 8008cd8:	3304      	adds	r3, #4
 8008cda:	f104 0015 	add.w	r0, r4, #21
 8008cde:	4584      	cmp	ip, r0
 8008ce0:	bf38      	it	cc
 8008ce2:	2304      	movcc	r3, #4
 8008ce4:	50ca      	str	r2, [r1, r3]
 8008ce6:	b10a      	cbz	r2, 8008cec <__lshift+0xa4>
 8008ce8:	f108 0602 	add.w	r6, r8, #2
 8008cec:	3e01      	subs	r6, #1
 8008cee:	4638      	mov	r0, r7
 8008cf0:	612e      	str	r6, [r5, #16]
 8008cf2:	4621      	mov	r1, r4
 8008cf4:	f7ff fdd8 	bl	80088a8 <_Bfree>
 8008cf8:	4628      	mov	r0, r5
 8008cfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008cfe:	f842 0f04 	str.w	r0, [r2, #4]!
 8008d02:	3301      	adds	r3, #1
 8008d04:	e7c5      	b.n	8008c92 <__lshift+0x4a>
 8008d06:	3904      	subs	r1, #4
 8008d08:	f853 2b04 	ldr.w	r2, [r3], #4
 8008d0c:	f841 2f04 	str.w	r2, [r1, #4]!
 8008d10:	459c      	cmp	ip, r3
 8008d12:	d8f9      	bhi.n	8008d08 <__lshift+0xc0>
 8008d14:	e7ea      	b.n	8008cec <__lshift+0xa4>
 8008d16:	bf00      	nop
 8008d18:	0802fbc4 	.word	0x0802fbc4
 8008d1c:	0802fbd5 	.word	0x0802fbd5

08008d20 <__mcmp>:
 8008d20:	b530      	push	{r4, r5, lr}
 8008d22:	6902      	ldr	r2, [r0, #16]
 8008d24:	690c      	ldr	r4, [r1, #16]
 8008d26:	1b12      	subs	r2, r2, r4
 8008d28:	d10e      	bne.n	8008d48 <__mcmp+0x28>
 8008d2a:	f100 0314 	add.w	r3, r0, #20
 8008d2e:	3114      	adds	r1, #20
 8008d30:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8008d34:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8008d38:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8008d3c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8008d40:	42a5      	cmp	r5, r4
 8008d42:	d003      	beq.n	8008d4c <__mcmp+0x2c>
 8008d44:	d305      	bcc.n	8008d52 <__mcmp+0x32>
 8008d46:	2201      	movs	r2, #1
 8008d48:	4610      	mov	r0, r2
 8008d4a:	bd30      	pop	{r4, r5, pc}
 8008d4c:	4283      	cmp	r3, r0
 8008d4e:	d3f3      	bcc.n	8008d38 <__mcmp+0x18>
 8008d50:	e7fa      	b.n	8008d48 <__mcmp+0x28>
 8008d52:	f04f 32ff 	mov.w	r2, #4294967295
 8008d56:	e7f7      	b.n	8008d48 <__mcmp+0x28>

08008d58 <__mdiff>:
 8008d58:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d5c:	460c      	mov	r4, r1
 8008d5e:	4606      	mov	r6, r0
 8008d60:	4611      	mov	r1, r2
 8008d62:	4620      	mov	r0, r4
 8008d64:	4690      	mov	r8, r2
 8008d66:	f7ff ffdb 	bl	8008d20 <__mcmp>
 8008d6a:	1e05      	subs	r5, r0, #0
 8008d6c:	d110      	bne.n	8008d90 <__mdiff+0x38>
 8008d6e:	4629      	mov	r1, r5
 8008d70:	4630      	mov	r0, r6
 8008d72:	f7ff fd59 	bl	8008828 <_Balloc>
 8008d76:	b930      	cbnz	r0, 8008d86 <__mdiff+0x2e>
 8008d78:	4b3a      	ldr	r3, [pc, #232]	; (8008e64 <__mdiff+0x10c>)
 8008d7a:	4602      	mov	r2, r0
 8008d7c:	f240 2137 	movw	r1, #567	; 0x237
 8008d80:	4839      	ldr	r0, [pc, #228]	; (8008e68 <__mdiff+0x110>)
 8008d82:	f000 fb0b 	bl	800939c <__assert_func>
 8008d86:	2301      	movs	r3, #1
 8008d88:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008d8c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d90:	bfa4      	itt	ge
 8008d92:	4643      	movge	r3, r8
 8008d94:	46a0      	movge	r8, r4
 8008d96:	4630      	mov	r0, r6
 8008d98:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8008d9c:	bfa6      	itte	ge
 8008d9e:	461c      	movge	r4, r3
 8008da0:	2500      	movge	r5, #0
 8008da2:	2501      	movlt	r5, #1
 8008da4:	f7ff fd40 	bl	8008828 <_Balloc>
 8008da8:	b920      	cbnz	r0, 8008db4 <__mdiff+0x5c>
 8008daa:	4b2e      	ldr	r3, [pc, #184]	; (8008e64 <__mdiff+0x10c>)
 8008dac:	4602      	mov	r2, r0
 8008dae:	f240 2145 	movw	r1, #581	; 0x245
 8008db2:	e7e5      	b.n	8008d80 <__mdiff+0x28>
 8008db4:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8008db8:	6926      	ldr	r6, [r4, #16]
 8008dba:	60c5      	str	r5, [r0, #12]
 8008dbc:	f104 0914 	add.w	r9, r4, #20
 8008dc0:	f108 0514 	add.w	r5, r8, #20
 8008dc4:	f100 0e14 	add.w	lr, r0, #20
 8008dc8:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8008dcc:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8008dd0:	f108 0210 	add.w	r2, r8, #16
 8008dd4:	46f2      	mov	sl, lr
 8008dd6:	2100      	movs	r1, #0
 8008dd8:	f859 3b04 	ldr.w	r3, [r9], #4
 8008ddc:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8008de0:	fa11 f88b 	uxtah	r8, r1, fp
 8008de4:	b299      	uxth	r1, r3
 8008de6:	0c1b      	lsrs	r3, r3, #16
 8008de8:	eba8 0801 	sub.w	r8, r8, r1
 8008dec:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8008df0:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8008df4:	fa1f f888 	uxth.w	r8, r8
 8008df8:	1419      	asrs	r1, r3, #16
 8008dfa:	454e      	cmp	r6, r9
 8008dfc:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8008e00:	f84a 3b04 	str.w	r3, [sl], #4
 8008e04:	d8e8      	bhi.n	8008dd8 <__mdiff+0x80>
 8008e06:	1b33      	subs	r3, r6, r4
 8008e08:	3b15      	subs	r3, #21
 8008e0a:	f023 0303 	bic.w	r3, r3, #3
 8008e0e:	3304      	adds	r3, #4
 8008e10:	3415      	adds	r4, #21
 8008e12:	42a6      	cmp	r6, r4
 8008e14:	bf38      	it	cc
 8008e16:	2304      	movcc	r3, #4
 8008e18:	441d      	add	r5, r3
 8008e1a:	4473      	add	r3, lr
 8008e1c:	469e      	mov	lr, r3
 8008e1e:	462e      	mov	r6, r5
 8008e20:	4566      	cmp	r6, ip
 8008e22:	d30e      	bcc.n	8008e42 <__mdiff+0xea>
 8008e24:	f10c 0203 	add.w	r2, ip, #3
 8008e28:	1b52      	subs	r2, r2, r5
 8008e2a:	f022 0203 	bic.w	r2, r2, #3
 8008e2e:	3d03      	subs	r5, #3
 8008e30:	45ac      	cmp	ip, r5
 8008e32:	bf38      	it	cc
 8008e34:	2200      	movcc	r2, #0
 8008e36:	4413      	add	r3, r2
 8008e38:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8008e3c:	b17a      	cbz	r2, 8008e5e <__mdiff+0x106>
 8008e3e:	6107      	str	r7, [r0, #16]
 8008e40:	e7a4      	b.n	8008d8c <__mdiff+0x34>
 8008e42:	f856 8b04 	ldr.w	r8, [r6], #4
 8008e46:	fa11 f288 	uxtah	r2, r1, r8
 8008e4a:	1414      	asrs	r4, r2, #16
 8008e4c:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8008e50:	b292      	uxth	r2, r2
 8008e52:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8008e56:	f84e 2b04 	str.w	r2, [lr], #4
 8008e5a:	1421      	asrs	r1, r4, #16
 8008e5c:	e7e0      	b.n	8008e20 <__mdiff+0xc8>
 8008e5e:	3f01      	subs	r7, #1
 8008e60:	e7ea      	b.n	8008e38 <__mdiff+0xe0>
 8008e62:	bf00      	nop
 8008e64:	0802fbc4 	.word	0x0802fbc4
 8008e68:	0802fbd5 	.word	0x0802fbd5

08008e6c <__d2b>:
 8008e6c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008e70:	460f      	mov	r7, r1
 8008e72:	2101      	movs	r1, #1
 8008e74:	ec59 8b10 	vmov	r8, r9, d0
 8008e78:	4616      	mov	r6, r2
 8008e7a:	f7ff fcd5 	bl	8008828 <_Balloc>
 8008e7e:	4604      	mov	r4, r0
 8008e80:	b930      	cbnz	r0, 8008e90 <__d2b+0x24>
 8008e82:	4602      	mov	r2, r0
 8008e84:	4b24      	ldr	r3, [pc, #144]	; (8008f18 <__d2b+0xac>)
 8008e86:	4825      	ldr	r0, [pc, #148]	; (8008f1c <__d2b+0xb0>)
 8008e88:	f240 310f 	movw	r1, #783	; 0x30f
 8008e8c:	f000 fa86 	bl	800939c <__assert_func>
 8008e90:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8008e94:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008e98:	bb2d      	cbnz	r5, 8008ee6 <__d2b+0x7a>
 8008e9a:	9301      	str	r3, [sp, #4]
 8008e9c:	f1b8 0300 	subs.w	r3, r8, #0
 8008ea0:	d026      	beq.n	8008ef0 <__d2b+0x84>
 8008ea2:	4668      	mov	r0, sp
 8008ea4:	9300      	str	r3, [sp, #0]
 8008ea6:	f7ff fd87 	bl	80089b8 <__lo0bits>
 8008eaa:	e9dd 1200 	ldrd	r1, r2, [sp]
 8008eae:	b1e8      	cbz	r0, 8008eec <__d2b+0x80>
 8008eb0:	f1c0 0320 	rsb	r3, r0, #32
 8008eb4:	fa02 f303 	lsl.w	r3, r2, r3
 8008eb8:	430b      	orrs	r3, r1
 8008eba:	40c2      	lsrs	r2, r0
 8008ebc:	6163      	str	r3, [r4, #20]
 8008ebe:	9201      	str	r2, [sp, #4]
 8008ec0:	9b01      	ldr	r3, [sp, #4]
 8008ec2:	61a3      	str	r3, [r4, #24]
 8008ec4:	2b00      	cmp	r3, #0
 8008ec6:	bf14      	ite	ne
 8008ec8:	2202      	movne	r2, #2
 8008eca:	2201      	moveq	r2, #1
 8008ecc:	6122      	str	r2, [r4, #16]
 8008ece:	b1bd      	cbz	r5, 8008f00 <__d2b+0x94>
 8008ed0:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8008ed4:	4405      	add	r5, r0
 8008ed6:	603d      	str	r5, [r7, #0]
 8008ed8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008edc:	6030      	str	r0, [r6, #0]
 8008ede:	4620      	mov	r0, r4
 8008ee0:	b003      	add	sp, #12
 8008ee2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008ee6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008eea:	e7d6      	b.n	8008e9a <__d2b+0x2e>
 8008eec:	6161      	str	r1, [r4, #20]
 8008eee:	e7e7      	b.n	8008ec0 <__d2b+0x54>
 8008ef0:	a801      	add	r0, sp, #4
 8008ef2:	f7ff fd61 	bl	80089b8 <__lo0bits>
 8008ef6:	9b01      	ldr	r3, [sp, #4]
 8008ef8:	6163      	str	r3, [r4, #20]
 8008efa:	3020      	adds	r0, #32
 8008efc:	2201      	movs	r2, #1
 8008efe:	e7e5      	b.n	8008ecc <__d2b+0x60>
 8008f00:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008f04:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008f08:	6038      	str	r0, [r7, #0]
 8008f0a:	6918      	ldr	r0, [r3, #16]
 8008f0c:	f7ff fd34 	bl	8008978 <__hi0bits>
 8008f10:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008f14:	e7e2      	b.n	8008edc <__d2b+0x70>
 8008f16:	bf00      	nop
 8008f18:	0802fbc4 	.word	0x0802fbc4
 8008f1c:	0802fbd5 	.word	0x0802fbd5

08008f20 <__ssputs_r>:
 8008f20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008f24:	688e      	ldr	r6, [r1, #8]
 8008f26:	461f      	mov	r7, r3
 8008f28:	42be      	cmp	r6, r7
 8008f2a:	680b      	ldr	r3, [r1, #0]
 8008f2c:	4682      	mov	sl, r0
 8008f2e:	460c      	mov	r4, r1
 8008f30:	4690      	mov	r8, r2
 8008f32:	d82c      	bhi.n	8008f8e <__ssputs_r+0x6e>
 8008f34:	898a      	ldrh	r2, [r1, #12]
 8008f36:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008f3a:	d026      	beq.n	8008f8a <__ssputs_r+0x6a>
 8008f3c:	6965      	ldr	r5, [r4, #20]
 8008f3e:	6909      	ldr	r1, [r1, #16]
 8008f40:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008f44:	eba3 0901 	sub.w	r9, r3, r1
 8008f48:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008f4c:	1c7b      	adds	r3, r7, #1
 8008f4e:	444b      	add	r3, r9
 8008f50:	106d      	asrs	r5, r5, #1
 8008f52:	429d      	cmp	r5, r3
 8008f54:	bf38      	it	cc
 8008f56:	461d      	movcc	r5, r3
 8008f58:	0553      	lsls	r3, r2, #21
 8008f5a:	d527      	bpl.n	8008fac <__ssputs_r+0x8c>
 8008f5c:	4629      	mov	r1, r5
 8008f5e:	f7ff fbd7 	bl	8008710 <_malloc_r>
 8008f62:	4606      	mov	r6, r0
 8008f64:	b360      	cbz	r0, 8008fc0 <__ssputs_r+0xa0>
 8008f66:	6921      	ldr	r1, [r4, #16]
 8008f68:	464a      	mov	r2, r9
 8008f6a:	f000 fa09 	bl	8009380 <memcpy>
 8008f6e:	89a3      	ldrh	r3, [r4, #12]
 8008f70:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008f74:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008f78:	81a3      	strh	r3, [r4, #12]
 8008f7a:	6126      	str	r6, [r4, #16]
 8008f7c:	6165      	str	r5, [r4, #20]
 8008f7e:	444e      	add	r6, r9
 8008f80:	eba5 0509 	sub.w	r5, r5, r9
 8008f84:	6026      	str	r6, [r4, #0]
 8008f86:	60a5      	str	r5, [r4, #8]
 8008f88:	463e      	mov	r6, r7
 8008f8a:	42be      	cmp	r6, r7
 8008f8c:	d900      	bls.n	8008f90 <__ssputs_r+0x70>
 8008f8e:	463e      	mov	r6, r7
 8008f90:	6820      	ldr	r0, [r4, #0]
 8008f92:	4632      	mov	r2, r6
 8008f94:	4641      	mov	r1, r8
 8008f96:	f000 f9c9 	bl	800932c <memmove>
 8008f9a:	68a3      	ldr	r3, [r4, #8]
 8008f9c:	1b9b      	subs	r3, r3, r6
 8008f9e:	60a3      	str	r3, [r4, #8]
 8008fa0:	6823      	ldr	r3, [r4, #0]
 8008fa2:	4433      	add	r3, r6
 8008fa4:	6023      	str	r3, [r4, #0]
 8008fa6:	2000      	movs	r0, #0
 8008fa8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008fac:	462a      	mov	r2, r5
 8008fae:	f000 fa3b 	bl	8009428 <_realloc_r>
 8008fb2:	4606      	mov	r6, r0
 8008fb4:	2800      	cmp	r0, #0
 8008fb6:	d1e0      	bne.n	8008f7a <__ssputs_r+0x5a>
 8008fb8:	6921      	ldr	r1, [r4, #16]
 8008fba:	4650      	mov	r0, sl
 8008fbc:	f7ff fb34 	bl	8008628 <_free_r>
 8008fc0:	230c      	movs	r3, #12
 8008fc2:	f8ca 3000 	str.w	r3, [sl]
 8008fc6:	89a3      	ldrh	r3, [r4, #12]
 8008fc8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008fcc:	81a3      	strh	r3, [r4, #12]
 8008fce:	f04f 30ff 	mov.w	r0, #4294967295
 8008fd2:	e7e9      	b.n	8008fa8 <__ssputs_r+0x88>

08008fd4 <_svfiprintf_r>:
 8008fd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008fd8:	4698      	mov	r8, r3
 8008fda:	898b      	ldrh	r3, [r1, #12]
 8008fdc:	061b      	lsls	r3, r3, #24
 8008fde:	b09d      	sub	sp, #116	; 0x74
 8008fe0:	4607      	mov	r7, r0
 8008fe2:	460d      	mov	r5, r1
 8008fe4:	4614      	mov	r4, r2
 8008fe6:	d50e      	bpl.n	8009006 <_svfiprintf_r+0x32>
 8008fe8:	690b      	ldr	r3, [r1, #16]
 8008fea:	b963      	cbnz	r3, 8009006 <_svfiprintf_r+0x32>
 8008fec:	2140      	movs	r1, #64	; 0x40
 8008fee:	f7ff fb8f 	bl	8008710 <_malloc_r>
 8008ff2:	6028      	str	r0, [r5, #0]
 8008ff4:	6128      	str	r0, [r5, #16]
 8008ff6:	b920      	cbnz	r0, 8009002 <_svfiprintf_r+0x2e>
 8008ff8:	230c      	movs	r3, #12
 8008ffa:	603b      	str	r3, [r7, #0]
 8008ffc:	f04f 30ff 	mov.w	r0, #4294967295
 8009000:	e0d0      	b.n	80091a4 <_svfiprintf_r+0x1d0>
 8009002:	2340      	movs	r3, #64	; 0x40
 8009004:	616b      	str	r3, [r5, #20]
 8009006:	2300      	movs	r3, #0
 8009008:	9309      	str	r3, [sp, #36]	; 0x24
 800900a:	2320      	movs	r3, #32
 800900c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009010:	f8cd 800c 	str.w	r8, [sp, #12]
 8009014:	2330      	movs	r3, #48	; 0x30
 8009016:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80091bc <_svfiprintf_r+0x1e8>
 800901a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800901e:	f04f 0901 	mov.w	r9, #1
 8009022:	4623      	mov	r3, r4
 8009024:	469a      	mov	sl, r3
 8009026:	f813 2b01 	ldrb.w	r2, [r3], #1
 800902a:	b10a      	cbz	r2, 8009030 <_svfiprintf_r+0x5c>
 800902c:	2a25      	cmp	r2, #37	; 0x25
 800902e:	d1f9      	bne.n	8009024 <_svfiprintf_r+0x50>
 8009030:	ebba 0b04 	subs.w	fp, sl, r4
 8009034:	d00b      	beq.n	800904e <_svfiprintf_r+0x7a>
 8009036:	465b      	mov	r3, fp
 8009038:	4622      	mov	r2, r4
 800903a:	4629      	mov	r1, r5
 800903c:	4638      	mov	r0, r7
 800903e:	f7ff ff6f 	bl	8008f20 <__ssputs_r>
 8009042:	3001      	adds	r0, #1
 8009044:	f000 80a9 	beq.w	800919a <_svfiprintf_r+0x1c6>
 8009048:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800904a:	445a      	add	r2, fp
 800904c:	9209      	str	r2, [sp, #36]	; 0x24
 800904e:	f89a 3000 	ldrb.w	r3, [sl]
 8009052:	2b00      	cmp	r3, #0
 8009054:	f000 80a1 	beq.w	800919a <_svfiprintf_r+0x1c6>
 8009058:	2300      	movs	r3, #0
 800905a:	f04f 32ff 	mov.w	r2, #4294967295
 800905e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009062:	f10a 0a01 	add.w	sl, sl, #1
 8009066:	9304      	str	r3, [sp, #16]
 8009068:	9307      	str	r3, [sp, #28]
 800906a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800906e:	931a      	str	r3, [sp, #104]	; 0x68
 8009070:	4654      	mov	r4, sl
 8009072:	2205      	movs	r2, #5
 8009074:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009078:	4850      	ldr	r0, [pc, #320]	; (80091bc <_svfiprintf_r+0x1e8>)
 800907a:	f7f7 f8e1 	bl	8000240 <memchr>
 800907e:	9a04      	ldr	r2, [sp, #16]
 8009080:	b9d8      	cbnz	r0, 80090ba <_svfiprintf_r+0xe6>
 8009082:	06d0      	lsls	r0, r2, #27
 8009084:	bf44      	itt	mi
 8009086:	2320      	movmi	r3, #32
 8009088:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800908c:	0711      	lsls	r1, r2, #28
 800908e:	bf44      	itt	mi
 8009090:	232b      	movmi	r3, #43	; 0x2b
 8009092:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009096:	f89a 3000 	ldrb.w	r3, [sl]
 800909a:	2b2a      	cmp	r3, #42	; 0x2a
 800909c:	d015      	beq.n	80090ca <_svfiprintf_r+0xf6>
 800909e:	9a07      	ldr	r2, [sp, #28]
 80090a0:	4654      	mov	r4, sl
 80090a2:	2000      	movs	r0, #0
 80090a4:	f04f 0c0a 	mov.w	ip, #10
 80090a8:	4621      	mov	r1, r4
 80090aa:	f811 3b01 	ldrb.w	r3, [r1], #1
 80090ae:	3b30      	subs	r3, #48	; 0x30
 80090b0:	2b09      	cmp	r3, #9
 80090b2:	d94d      	bls.n	8009150 <_svfiprintf_r+0x17c>
 80090b4:	b1b0      	cbz	r0, 80090e4 <_svfiprintf_r+0x110>
 80090b6:	9207      	str	r2, [sp, #28]
 80090b8:	e014      	b.n	80090e4 <_svfiprintf_r+0x110>
 80090ba:	eba0 0308 	sub.w	r3, r0, r8
 80090be:	fa09 f303 	lsl.w	r3, r9, r3
 80090c2:	4313      	orrs	r3, r2
 80090c4:	9304      	str	r3, [sp, #16]
 80090c6:	46a2      	mov	sl, r4
 80090c8:	e7d2      	b.n	8009070 <_svfiprintf_r+0x9c>
 80090ca:	9b03      	ldr	r3, [sp, #12]
 80090cc:	1d19      	adds	r1, r3, #4
 80090ce:	681b      	ldr	r3, [r3, #0]
 80090d0:	9103      	str	r1, [sp, #12]
 80090d2:	2b00      	cmp	r3, #0
 80090d4:	bfbb      	ittet	lt
 80090d6:	425b      	neglt	r3, r3
 80090d8:	f042 0202 	orrlt.w	r2, r2, #2
 80090dc:	9307      	strge	r3, [sp, #28]
 80090de:	9307      	strlt	r3, [sp, #28]
 80090e0:	bfb8      	it	lt
 80090e2:	9204      	strlt	r2, [sp, #16]
 80090e4:	7823      	ldrb	r3, [r4, #0]
 80090e6:	2b2e      	cmp	r3, #46	; 0x2e
 80090e8:	d10c      	bne.n	8009104 <_svfiprintf_r+0x130>
 80090ea:	7863      	ldrb	r3, [r4, #1]
 80090ec:	2b2a      	cmp	r3, #42	; 0x2a
 80090ee:	d134      	bne.n	800915a <_svfiprintf_r+0x186>
 80090f0:	9b03      	ldr	r3, [sp, #12]
 80090f2:	1d1a      	adds	r2, r3, #4
 80090f4:	681b      	ldr	r3, [r3, #0]
 80090f6:	9203      	str	r2, [sp, #12]
 80090f8:	2b00      	cmp	r3, #0
 80090fa:	bfb8      	it	lt
 80090fc:	f04f 33ff 	movlt.w	r3, #4294967295
 8009100:	3402      	adds	r4, #2
 8009102:	9305      	str	r3, [sp, #20]
 8009104:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 80091cc <_svfiprintf_r+0x1f8>
 8009108:	7821      	ldrb	r1, [r4, #0]
 800910a:	2203      	movs	r2, #3
 800910c:	4650      	mov	r0, sl
 800910e:	f7f7 f897 	bl	8000240 <memchr>
 8009112:	b138      	cbz	r0, 8009124 <_svfiprintf_r+0x150>
 8009114:	9b04      	ldr	r3, [sp, #16]
 8009116:	eba0 000a 	sub.w	r0, r0, sl
 800911a:	2240      	movs	r2, #64	; 0x40
 800911c:	4082      	lsls	r2, r0
 800911e:	4313      	orrs	r3, r2
 8009120:	3401      	adds	r4, #1
 8009122:	9304      	str	r3, [sp, #16]
 8009124:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009128:	4825      	ldr	r0, [pc, #148]	; (80091c0 <_svfiprintf_r+0x1ec>)
 800912a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800912e:	2206      	movs	r2, #6
 8009130:	f7f7 f886 	bl	8000240 <memchr>
 8009134:	2800      	cmp	r0, #0
 8009136:	d038      	beq.n	80091aa <_svfiprintf_r+0x1d6>
 8009138:	4b22      	ldr	r3, [pc, #136]	; (80091c4 <_svfiprintf_r+0x1f0>)
 800913a:	bb1b      	cbnz	r3, 8009184 <_svfiprintf_r+0x1b0>
 800913c:	9b03      	ldr	r3, [sp, #12]
 800913e:	3307      	adds	r3, #7
 8009140:	f023 0307 	bic.w	r3, r3, #7
 8009144:	3308      	adds	r3, #8
 8009146:	9303      	str	r3, [sp, #12]
 8009148:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800914a:	4433      	add	r3, r6
 800914c:	9309      	str	r3, [sp, #36]	; 0x24
 800914e:	e768      	b.n	8009022 <_svfiprintf_r+0x4e>
 8009150:	fb0c 3202 	mla	r2, ip, r2, r3
 8009154:	460c      	mov	r4, r1
 8009156:	2001      	movs	r0, #1
 8009158:	e7a6      	b.n	80090a8 <_svfiprintf_r+0xd4>
 800915a:	2300      	movs	r3, #0
 800915c:	3401      	adds	r4, #1
 800915e:	9305      	str	r3, [sp, #20]
 8009160:	4619      	mov	r1, r3
 8009162:	f04f 0c0a 	mov.w	ip, #10
 8009166:	4620      	mov	r0, r4
 8009168:	f810 2b01 	ldrb.w	r2, [r0], #1
 800916c:	3a30      	subs	r2, #48	; 0x30
 800916e:	2a09      	cmp	r2, #9
 8009170:	d903      	bls.n	800917a <_svfiprintf_r+0x1a6>
 8009172:	2b00      	cmp	r3, #0
 8009174:	d0c6      	beq.n	8009104 <_svfiprintf_r+0x130>
 8009176:	9105      	str	r1, [sp, #20]
 8009178:	e7c4      	b.n	8009104 <_svfiprintf_r+0x130>
 800917a:	fb0c 2101 	mla	r1, ip, r1, r2
 800917e:	4604      	mov	r4, r0
 8009180:	2301      	movs	r3, #1
 8009182:	e7f0      	b.n	8009166 <_svfiprintf_r+0x192>
 8009184:	ab03      	add	r3, sp, #12
 8009186:	9300      	str	r3, [sp, #0]
 8009188:	462a      	mov	r2, r5
 800918a:	4b0f      	ldr	r3, [pc, #60]	; (80091c8 <_svfiprintf_r+0x1f4>)
 800918c:	a904      	add	r1, sp, #16
 800918e:	4638      	mov	r0, r7
 8009190:	f7fd ff06 	bl	8006fa0 <_printf_float>
 8009194:	1c42      	adds	r2, r0, #1
 8009196:	4606      	mov	r6, r0
 8009198:	d1d6      	bne.n	8009148 <_svfiprintf_r+0x174>
 800919a:	89ab      	ldrh	r3, [r5, #12]
 800919c:	065b      	lsls	r3, r3, #25
 800919e:	f53f af2d 	bmi.w	8008ffc <_svfiprintf_r+0x28>
 80091a2:	9809      	ldr	r0, [sp, #36]	; 0x24
 80091a4:	b01d      	add	sp, #116	; 0x74
 80091a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80091aa:	ab03      	add	r3, sp, #12
 80091ac:	9300      	str	r3, [sp, #0]
 80091ae:	462a      	mov	r2, r5
 80091b0:	4b05      	ldr	r3, [pc, #20]	; (80091c8 <_svfiprintf_r+0x1f4>)
 80091b2:	a904      	add	r1, sp, #16
 80091b4:	4638      	mov	r0, r7
 80091b6:	f7fe f97b 	bl	80074b0 <_printf_i>
 80091ba:	e7eb      	b.n	8009194 <_svfiprintf_r+0x1c0>
 80091bc:	0802fd2c 	.word	0x0802fd2c
 80091c0:	0802fd36 	.word	0x0802fd36
 80091c4:	08006fa1 	.word	0x08006fa1
 80091c8:	08008f21 	.word	0x08008f21
 80091cc:	0802fd32 	.word	0x0802fd32

080091d0 <__sflush_r>:
 80091d0:	898a      	ldrh	r2, [r1, #12]
 80091d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80091d6:	4605      	mov	r5, r0
 80091d8:	0710      	lsls	r0, r2, #28
 80091da:	460c      	mov	r4, r1
 80091dc:	d458      	bmi.n	8009290 <__sflush_r+0xc0>
 80091de:	684b      	ldr	r3, [r1, #4]
 80091e0:	2b00      	cmp	r3, #0
 80091e2:	dc05      	bgt.n	80091f0 <__sflush_r+0x20>
 80091e4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80091e6:	2b00      	cmp	r3, #0
 80091e8:	dc02      	bgt.n	80091f0 <__sflush_r+0x20>
 80091ea:	2000      	movs	r0, #0
 80091ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80091f0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80091f2:	2e00      	cmp	r6, #0
 80091f4:	d0f9      	beq.n	80091ea <__sflush_r+0x1a>
 80091f6:	2300      	movs	r3, #0
 80091f8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80091fc:	682f      	ldr	r7, [r5, #0]
 80091fe:	6a21      	ldr	r1, [r4, #32]
 8009200:	602b      	str	r3, [r5, #0]
 8009202:	d032      	beq.n	800926a <__sflush_r+0x9a>
 8009204:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009206:	89a3      	ldrh	r3, [r4, #12]
 8009208:	075a      	lsls	r2, r3, #29
 800920a:	d505      	bpl.n	8009218 <__sflush_r+0x48>
 800920c:	6863      	ldr	r3, [r4, #4]
 800920e:	1ac0      	subs	r0, r0, r3
 8009210:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009212:	b10b      	cbz	r3, 8009218 <__sflush_r+0x48>
 8009214:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009216:	1ac0      	subs	r0, r0, r3
 8009218:	2300      	movs	r3, #0
 800921a:	4602      	mov	r2, r0
 800921c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800921e:	6a21      	ldr	r1, [r4, #32]
 8009220:	4628      	mov	r0, r5
 8009222:	47b0      	blx	r6
 8009224:	1c43      	adds	r3, r0, #1
 8009226:	89a3      	ldrh	r3, [r4, #12]
 8009228:	d106      	bne.n	8009238 <__sflush_r+0x68>
 800922a:	6829      	ldr	r1, [r5, #0]
 800922c:	291d      	cmp	r1, #29
 800922e:	d82b      	bhi.n	8009288 <__sflush_r+0xb8>
 8009230:	4a29      	ldr	r2, [pc, #164]	; (80092d8 <__sflush_r+0x108>)
 8009232:	410a      	asrs	r2, r1
 8009234:	07d6      	lsls	r6, r2, #31
 8009236:	d427      	bmi.n	8009288 <__sflush_r+0xb8>
 8009238:	2200      	movs	r2, #0
 800923a:	6062      	str	r2, [r4, #4]
 800923c:	04d9      	lsls	r1, r3, #19
 800923e:	6922      	ldr	r2, [r4, #16]
 8009240:	6022      	str	r2, [r4, #0]
 8009242:	d504      	bpl.n	800924e <__sflush_r+0x7e>
 8009244:	1c42      	adds	r2, r0, #1
 8009246:	d101      	bne.n	800924c <__sflush_r+0x7c>
 8009248:	682b      	ldr	r3, [r5, #0]
 800924a:	b903      	cbnz	r3, 800924e <__sflush_r+0x7e>
 800924c:	6560      	str	r0, [r4, #84]	; 0x54
 800924e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009250:	602f      	str	r7, [r5, #0]
 8009252:	2900      	cmp	r1, #0
 8009254:	d0c9      	beq.n	80091ea <__sflush_r+0x1a>
 8009256:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800925a:	4299      	cmp	r1, r3
 800925c:	d002      	beq.n	8009264 <__sflush_r+0x94>
 800925e:	4628      	mov	r0, r5
 8009260:	f7ff f9e2 	bl	8008628 <_free_r>
 8009264:	2000      	movs	r0, #0
 8009266:	6360      	str	r0, [r4, #52]	; 0x34
 8009268:	e7c0      	b.n	80091ec <__sflush_r+0x1c>
 800926a:	2301      	movs	r3, #1
 800926c:	4628      	mov	r0, r5
 800926e:	47b0      	blx	r6
 8009270:	1c41      	adds	r1, r0, #1
 8009272:	d1c8      	bne.n	8009206 <__sflush_r+0x36>
 8009274:	682b      	ldr	r3, [r5, #0]
 8009276:	2b00      	cmp	r3, #0
 8009278:	d0c5      	beq.n	8009206 <__sflush_r+0x36>
 800927a:	2b1d      	cmp	r3, #29
 800927c:	d001      	beq.n	8009282 <__sflush_r+0xb2>
 800927e:	2b16      	cmp	r3, #22
 8009280:	d101      	bne.n	8009286 <__sflush_r+0xb6>
 8009282:	602f      	str	r7, [r5, #0]
 8009284:	e7b1      	b.n	80091ea <__sflush_r+0x1a>
 8009286:	89a3      	ldrh	r3, [r4, #12]
 8009288:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800928c:	81a3      	strh	r3, [r4, #12]
 800928e:	e7ad      	b.n	80091ec <__sflush_r+0x1c>
 8009290:	690f      	ldr	r7, [r1, #16]
 8009292:	2f00      	cmp	r7, #0
 8009294:	d0a9      	beq.n	80091ea <__sflush_r+0x1a>
 8009296:	0793      	lsls	r3, r2, #30
 8009298:	680e      	ldr	r6, [r1, #0]
 800929a:	bf08      	it	eq
 800929c:	694b      	ldreq	r3, [r1, #20]
 800929e:	600f      	str	r7, [r1, #0]
 80092a0:	bf18      	it	ne
 80092a2:	2300      	movne	r3, #0
 80092a4:	eba6 0807 	sub.w	r8, r6, r7
 80092a8:	608b      	str	r3, [r1, #8]
 80092aa:	f1b8 0f00 	cmp.w	r8, #0
 80092ae:	dd9c      	ble.n	80091ea <__sflush_r+0x1a>
 80092b0:	6a21      	ldr	r1, [r4, #32]
 80092b2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80092b4:	4643      	mov	r3, r8
 80092b6:	463a      	mov	r2, r7
 80092b8:	4628      	mov	r0, r5
 80092ba:	47b0      	blx	r6
 80092bc:	2800      	cmp	r0, #0
 80092be:	dc06      	bgt.n	80092ce <__sflush_r+0xfe>
 80092c0:	89a3      	ldrh	r3, [r4, #12]
 80092c2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80092c6:	81a3      	strh	r3, [r4, #12]
 80092c8:	f04f 30ff 	mov.w	r0, #4294967295
 80092cc:	e78e      	b.n	80091ec <__sflush_r+0x1c>
 80092ce:	4407      	add	r7, r0
 80092d0:	eba8 0800 	sub.w	r8, r8, r0
 80092d4:	e7e9      	b.n	80092aa <__sflush_r+0xda>
 80092d6:	bf00      	nop
 80092d8:	dfbffffe 	.word	0xdfbffffe

080092dc <_fflush_r>:
 80092dc:	b538      	push	{r3, r4, r5, lr}
 80092de:	690b      	ldr	r3, [r1, #16]
 80092e0:	4605      	mov	r5, r0
 80092e2:	460c      	mov	r4, r1
 80092e4:	b913      	cbnz	r3, 80092ec <_fflush_r+0x10>
 80092e6:	2500      	movs	r5, #0
 80092e8:	4628      	mov	r0, r5
 80092ea:	bd38      	pop	{r3, r4, r5, pc}
 80092ec:	b118      	cbz	r0, 80092f6 <_fflush_r+0x1a>
 80092ee:	6a03      	ldr	r3, [r0, #32]
 80092f0:	b90b      	cbnz	r3, 80092f6 <_fflush_r+0x1a>
 80092f2:	f7fe fa8b 	bl	800780c <__sinit>
 80092f6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80092fa:	2b00      	cmp	r3, #0
 80092fc:	d0f3      	beq.n	80092e6 <_fflush_r+0xa>
 80092fe:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009300:	07d0      	lsls	r0, r2, #31
 8009302:	d404      	bmi.n	800930e <_fflush_r+0x32>
 8009304:	0599      	lsls	r1, r3, #22
 8009306:	d402      	bmi.n	800930e <_fflush_r+0x32>
 8009308:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800930a:	f7fe fb96 	bl	8007a3a <__retarget_lock_acquire_recursive>
 800930e:	4628      	mov	r0, r5
 8009310:	4621      	mov	r1, r4
 8009312:	f7ff ff5d 	bl	80091d0 <__sflush_r>
 8009316:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009318:	07da      	lsls	r2, r3, #31
 800931a:	4605      	mov	r5, r0
 800931c:	d4e4      	bmi.n	80092e8 <_fflush_r+0xc>
 800931e:	89a3      	ldrh	r3, [r4, #12]
 8009320:	059b      	lsls	r3, r3, #22
 8009322:	d4e1      	bmi.n	80092e8 <_fflush_r+0xc>
 8009324:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009326:	f7fe fb89 	bl	8007a3c <__retarget_lock_release_recursive>
 800932a:	e7dd      	b.n	80092e8 <_fflush_r+0xc>

0800932c <memmove>:
 800932c:	4288      	cmp	r0, r1
 800932e:	b510      	push	{r4, lr}
 8009330:	eb01 0402 	add.w	r4, r1, r2
 8009334:	d902      	bls.n	800933c <memmove+0x10>
 8009336:	4284      	cmp	r4, r0
 8009338:	4623      	mov	r3, r4
 800933a:	d807      	bhi.n	800934c <memmove+0x20>
 800933c:	1e43      	subs	r3, r0, #1
 800933e:	42a1      	cmp	r1, r4
 8009340:	d008      	beq.n	8009354 <memmove+0x28>
 8009342:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009346:	f803 2f01 	strb.w	r2, [r3, #1]!
 800934a:	e7f8      	b.n	800933e <memmove+0x12>
 800934c:	4402      	add	r2, r0
 800934e:	4601      	mov	r1, r0
 8009350:	428a      	cmp	r2, r1
 8009352:	d100      	bne.n	8009356 <memmove+0x2a>
 8009354:	bd10      	pop	{r4, pc}
 8009356:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800935a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800935e:	e7f7      	b.n	8009350 <memmove+0x24>

08009360 <_sbrk_r>:
 8009360:	b538      	push	{r3, r4, r5, lr}
 8009362:	4d06      	ldr	r5, [pc, #24]	; (800937c <_sbrk_r+0x1c>)
 8009364:	2300      	movs	r3, #0
 8009366:	4604      	mov	r4, r0
 8009368:	4608      	mov	r0, r1
 800936a:	602b      	str	r3, [r5, #0]
 800936c:	f7f8 fa56 	bl	800181c <_sbrk>
 8009370:	1c43      	adds	r3, r0, #1
 8009372:	d102      	bne.n	800937a <_sbrk_r+0x1a>
 8009374:	682b      	ldr	r3, [r5, #0]
 8009376:	b103      	cbz	r3, 800937a <_sbrk_r+0x1a>
 8009378:	6023      	str	r3, [r4, #0]
 800937a:	bd38      	pop	{r3, r4, r5, pc}
 800937c:	20000594 	.word	0x20000594

08009380 <memcpy>:
 8009380:	440a      	add	r2, r1
 8009382:	4291      	cmp	r1, r2
 8009384:	f100 33ff 	add.w	r3, r0, #4294967295
 8009388:	d100      	bne.n	800938c <memcpy+0xc>
 800938a:	4770      	bx	lr
 800938c:	b510      	push	{r4, lr}
 800938e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009392:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009396:	4291      	cmp	r1, r2
 8009398:	d1f9      	bne.n	800938e <memcpy+0xe>
 800939a:	bd10      	pop	{r4, pc}

0800939c <__assert_func>:
 800939c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800939e:	4614      	mov	r4, r2
 80093a0:	461a      	mov	r2, r3
 80093a2:	4b09      	ldr	r3, [pc, #36]	; (80093c8 <__assert_func+0x2c>)
 80093a4:	681b      	ldr	r3, [r3, #0]
 80093a6:	4605      	mov	r5, r0
 80093a8:	68d8      	ldr	r0, [r3, #12]
 80093aa:	b14c      	cbz	r4, 80093c0 <__assert_func+0x24>
 80093ac:	4b07      	ldr	r3, [pc, #28]	; (80093cc <__assert_func+0x30>)
 80093ae:	9100      	str	r1, [sp, #0]
 80093b0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80093b4:	4906      	ldr	r1, [pc, #24]	; (80093d0 <__assert_func+0x34>)
 80093b6:	462b      	mov	r3, r5
 80093b8:	f000 f872 	bl	80094a0 <fiprintf>
 80093bc:	f000 f882 	bl	80094c4 <abort>
 80093c0:	4b04      	ldr	r3, [pc, #16]	; (80093d4 <__assert_func+0x38>)
 80093c2:	461c      	mov	r4, r3
 80093c4:	e7f3      	b.n	80093ae <__assert_func+0x12>
 80093c6:	bf00      	nop
 80093c8:	20000084 	.word	0x20000084
 80093cc:	0802fd47 	.word	0x0802fd47
 80093d0:	0802fd54 	.word	0x0802fd54
 80093d4:	0802fd82 	.word	0x0802fd82

080093d8 <_calloc_r>:
 80093d8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80093da:	fba1 2402 	umull	r2, r4, r1, r2
 80093de:	b94c      	cbnz	r4, 80093f4 <_calloc_r+0x1c>
 80093e0:	4611      	mov	r1, r2
 80093e2:	9201      	str	r2, [sp, #4]
 80093e4:	f7ff f994 	bl	8008710 <_malloc_r>
 80093e8:	9a01      	ldr	r2, [sp, #4]
 80093ea:	4605      	mov	r5, r0
 80093ec:	b930      	cbnz	r0, 80093fc <_calloc_r+0x24>
 80093ee:	4628      	mov	r0, r5
 80093f0:	b003      	add	sp, #12
 80093f2:	bd30      	pop	{r4, r5, pc}
 80093f4:	220c      	movs	r2, #12
 80093f6:	6002      	str	r2, [r0, #0]
 80093f8:	2500      	movs	r5, #0
 80093fa:	e7f8      	b.n	80093ee <_calloc_r+0x16>
 80093fc:	4621      	mov	r1, r4
 80093fe:	f7fe fa9e 	bl	800793e <memset>
 8009402:	e7f4      	b.n	80093ee <_calloc_r+0x16>

08009404 <__ascii_mbtowc>:
 8009404:	b082      	sub	sp, #8
 8009406:	b901      	cbnz	r1, 800940a <__ascii_mbtowc+0x6>
 8009408:	a901      	add	r1, sp, #4
 800940a:	b142      	cbz	r2, 800941e <__ascii_mbtowc+0x1a>
 800940c:	b14b      	cbz	r3, 8009422 <__ascii_mbtowc+0x1e>
 800940e:	7813      	ldrb	r3, [r2, #0]
 8009410:	600b      	str	r3, [r1, #0]
 8009412:	7812      	ldrb	r2, [r2, #0]
 8009414:	1e10      	subs	r0, r2, #0
 8009416:	bf18      	it	ne
 8009418:	2001      	movne	r0, #1
 800941a:	b002      	add	sp, #8
 800941c:	4770      	bx	lr
 800941e:	4610      	mov	r0, r2
 8009420:	e7fb      	b.n	800941a <__ascii_mbtowc+0x16>
 8009422:	f06f 0001 	mvn.w	r0, #1
 8009426:	e7f8      	b.n	800941a <__ascii_mbtowc+0x16>

08009428 <_realloc_r>:
 8009428:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800942c:	4680      	mov	r8, r0
 800942e:	4614      	mov	r4, r2
 8009430:	460e      	mov	r6, r1
 8009432:	b921      	cbnz	r1, 800943e <_realloc_r+0x16>
 8009434:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009438:	4611      	mov	r1, r2
 800943a:	f7ff b969 	b.w	8008710 <_malloc_r>
 800943e:	b92a      	cbnz	r2, 800944c <_realloc_r+0x24>
 8009440:	f7ff f8f2 	bl	8008628 <_free_r>
 8009444:	4625      	mov	r5, r4
 8009446:	4628      	mov	r0, r5
 8009448:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800944c:	f000 f841 	bl	80094d2 <_malloc_usable_size_r>
 8009450:	4284      	cmp	r4, r0
 8009452:	4607      	mov	r7, r0
 8009454:	d802      	bhi.n	800945c <_realloc_r+0x34>
 8009456:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800945a:	d812      	bhi.n	8009482 <_realloc_r+0x5a>
 800945c:	4621      	mov	r1, r4
 800945e:	4640      	mov	r0, r8
 8009460:	f7ff f956 	bl	8008710 <_malloc_r>
 8009464:	4605      	mov	r5, r0
 8009466:	2800      	cmp	r0, #0
 8009468:	d0ed      	beq.n	8009446 <_realloc_r+0x1e>
 800946a:	42bc      	cmp	r4, r7
 800946c:	4622      	mov	r2, r4
 800946e:	4631      	mov	r1, r6
 8009470:	bf28      	it	cs
 8009472:	463a      	movcs	r2, r7
 8009474:	f7ff ff84 	bl	8009380 <memcpy>
 8009478:	4631      	mov	r1, r6
 800947a:	4640      	mov	r0, r8
 800947c:	f7ff f8d4 	bl	8008628 <_free_r>
 8009480:	e7e1      	b.n	8009446 <_realloc_r+0x1e>
 8009482:	4635      	mov	r5, r6
 8009484:	e7df      	b.n	8009446 <_realloc_r+0x1e>

08009486 <__ascii_wctomb>:
 8009486:	b149      	cbz	r1, 800949c <__ascii_wctomb+0x16>
 8009488:	2aff      	cmp	r2, #255	; 0xff
 800948a:	bf85      	ittet	hi
 800948c:	238a      	movhi	r3, #138	; 0x8a
 800948e:	6003      	strhi	r3, [r0, #0]
 8009490:	700a      	strbls	r2, [r1, #0]
 8009492:	f04f 30ff 	movhi.w	r0, #4294967295
 8009496:	bf98      	it	ls
 8009498:	2001      	movls	r0, #1
 800949a:	4770      	bx	lr
 800949c:	4608      	mov	r0, r1
 800949e:	4770      	bx	lr

080094a0 <fiprintf>:
 80094a0:	b40e      	push	{r1, r2, r3}
 80094a2:	b503      	push	{r0, r1, lr}
 80094a4:	4601      	mov	r1, r0
 80094a6:	ab03      	add	r3, sp, #12
 80094a8:	4805      	ldr	r0, [pc, #20]	; (80094c0 <fiprintf+0x20>)
 80094aa:	f853 2b04 	ldr.w	r2, [r3], #4
 80094ae:	6800      	ldr	r0, [r0, #0]
 80094b0:	9301      	str	r3, [sp, #4]
 80094b2:	f000 f83f 	bl	8009534 <_vfiprintf_r>
 80094b6:	b002      	add	sp, #8
 80094b8:	f85d eb04 	ldr.w	lr, [sp], #4
 80094bc:	b003      	add	sp, #12
 80094be:	4770      	bx	lr
 80094c0:	20000084 	.word	0x20000084

080094c4 <abort>:
 80094c4:	b508      	push	{r3, lr}
 80094c6:	2006      	movs	r0, #6
 80094c8:	f000 fa0c 	bl	80098e4 <raise>
 80094cc:	2001      	movs	r0, #1
 80094ce:	f7f8 f92d 	bl	800172c <_exit>

080094d2 <_malloc_usable_size_r>:
 80094d2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80094d6:	1f18      	subs	r0, r3, #4
 80094d8:	2b00      	cmp	r3, #0
 80094da:	bfbc      	itt	lt
 80094dc:	580b      	ldrlt	r3, [r1, r0]
 80094de:	18c0      	addlt	r0, r0, r3
 80094e0:	4770      	bx	lr

080094e2 <__sfputc_r>:
 80094e2:	6893      	ldr	r3, [r2, #8]
 80094e4:	3b01      	subs	r3, #1
 80094e6:	2b00      	cmp	r3, #0
 80094e8:	b410      	push	{r4}
 80094ea:	6093      	str	r3, [r2, #8]
 80094ec:	da08      	bge.n	8009500 <__sfputc_r+0x1e>
 80094ee:	6994      	ldr	r4, [r2, #24]
 80094f0:	42a3      	cmp	r3, r4
 80094f2:	db01      	blt.n	80094f8 <__sfputc_r+0x16>
 80094f4:	290a      	cmp	r1, #10
 80094f6:	d103      	bne.n	8009500 <__sfputc_r+0x1e>
 80094f8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80094fc:	f000 b934 	b.w	8009768 <__swbuf_r>
 8009500:	6813      	ldr	r3, [r2, #0]
 8009502:	1c58      	adds	r0, r3, #1
 8009504:	6010      	str	r0, [r2, #0]
 8009506:	7019      	strb	r1, [r3, #0]
 8009508:	4608      	mov	r0, r1
 800950a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800950e:	4770      	bx	lr

08009510 <__sfputs_r>:
 8009510:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009512:	4606      	mov	r6, r0
 8009514:	460f      	mov	r7, r1
 8009516:	4614      	mov	r4, r2
 8009518:	18d5      	adds	r5, r2, r3
 800951a:	42ac      	cmp	r4, r5
 800951c:	d101      	bne.n	8009522 <__sfputs_r+0x12>
 800951e:	2000      	movs	r0, #0
 8009520:	e007      	b.n	8009532 <__sfputs_r+0x22>
 8009522:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009526:	463a      	mov	r2, r7
 8009528:	4630      	mov	r0, r6
 800952a:	f7ff ffda 	bl	80094e2 <__sfputc_r>
 800952e:	1c43      	adds	r3, r0, #1
 8009530:	d1f3      	bne.n	800951a <__sfputs_r+0xa>
 8009532:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08009534 <_vfiprintf_r>:
 8009534:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009538:	460d      	mov	r5, r1
 800953a:	b09d      	sub	sp, #116	; 0x74
 800953c:	4614      	mov	r4, r2
 800953e:	4698      	mov	r8, r3
 8009540:	4606      	mov	r6, r0
 8009542:	b118      	cbz	r0, 800954c <_vfiprintf_r+0x18>
 8009544:	6a03      	ldr	r3, [r0, #32]
 8009546:	b90b      	cbnz	r3, 800954c <_vfiprintf_r+0x18>
 8009548:	f7fe f960 	bl	800780c <__sinit>
 800954c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800954e:	07d9      	lsls	r1, r3, #31
 8009550:	d405      	bmi.n	800955e <_vfiprintf_r+0x2a>
 8009552:	89ab      	ldrh	r3, [r5, #12]
 8009554:	059a      	lsls	r2, r3, #22
 8009556:	d402      	bmi.n	800955e <_vfiprintf_r+0x2a>
 8009558:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800955a:	f7fe fa6e 	bl	8007a3a <__retarget_lock_acquire_recursive>
 800955e:	89ab      	ldrh	r3, [r5, #12]
 8009560:	071b      	lsls	r3, r3, #28
 8009562:	d501      	bpl.n	8009568 <_vfiprintf_r+0x34>
 8009564:	692b      	ldr	r3, [r5, #16]
 8009566:	b99b      	cbnz	r3, 8009590 <_vfiprintf_r+0x5c>
 8009568:	4629      	mov	r1, r5
 800956a:	4630      	mov	r0, r6
 800956c:	f000 f93a 	bl	80097e4 <__swsetup_r>
 8009570:	b170      	cbz	r0, 8009590 <_vfiprintf_r+0x5c>
 8009572:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009574:	07dc      	lsls	r4, r3, #31
 8009576:	d504      	bpl.n	8009582 <_vfiprintf_r+0x4e>
 8009578:	f04f 30ff 	mov.w	r0, #4294967295
 800957c:	b01d      	add	sp, #116	; 0x74
 800957e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009582:	89ab      	ldrh	r3, [r5, #12]
 8009584:	0598      	lsls	r0, r3, #22
 8009586:	d4f7      	bmi.n	8009578 <_vfiprintf_r+0x44>
 8009588:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800958a:	f7fe fa57 	bl	8007a3c <__retarget_lock_release_recursive>
 800958e:	e7f3      	b.n	8009578 <_vfiprintf_r+0x44>
 8009590:	2300      	movs	r3, #0
 8009592:	9309      	str	r3, [sp, #36]	; 0x24
 8009594:	2320      	movs	r3, #32
 8009596:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800959a:	f8cd 800c 	str.w	r8, [sp, #12]
 800959e:	2330      	movs	r3, #48	; 0x30
 80095a0:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8009754 <_vfiprintf_r+0x220>
 80095a4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80095a8:	f04f 0901 	mov.w	r9, #1
 80095ac:	4623      	mov	r3, r4
 80095ae:	469a      	mov	sl, r3
 80095b0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80095b4:	b10a      	cbz	r2, 80095ba <_vfiprintf_r+0x86>
 80095b6:	2a25      	cmp	r2, #37	; 0x25
 80095b8:	d1f9      	bne.n	80095ae <_vfiprintf_r+0x7a>
 80095ba:	ebba 0b04 	subs.w	fp, sl, r4
 80095be:	d00b      	beq.n	80095d8 <_vfiprintf_r+0xa4>
 80095c0:	465b      	mov	r3, fp
 80095c2:	4622      	mov	r2, r4
 80095c4:	4629      	mov	r1, r5
 80095c6:	4630      	mov	r0, r6
 80095c8:	f7ff ffa2 	bl	8009510 <__sfputs_r>
 80095cc:	3001      	adds	r0, #1
 80095ce:	f000 80a9 	beq.w	8009724 <_vfiprintf_r+0x1f0>
 80095d2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80095d4:	445a      	add	r2, fp
 80095d6:	9209      	str	r2, [sp, #36]	; 0x24
 80095d8:	f89a 3000 	ldrb.w	r3, [sl]
 80095dc:	2b00      	cmp	r3, #0
 80095de:	f000 80a1 	beq.w	8009724 <_vfiprintf_r+0x1f0>
 80095e2:	2300      	movs	r3, #0
 80095e4:	f04f 32ff 	mov.w	r2, #4294967295
 80095e8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80095ec:	f10a 0a01 	add.w	sl, sl, #1
 80095f0:	9304      	str	r3, [sp, #16]
 80095f2:	9307      	str	r3, [sp, #28]
 80095f4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80095f8:	931a      	str	r3, [sp, #104]	; 0x68
 80095fa:	4654      	mov	r4, sl
 80095fc:	2205      	movs	r2, #5
 80095fe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009602:	4854      	ldr	r0, [pc, #336]	; (8009754 <_vfiprintf_r+0x220>)
 8009604:	f7f6 fe1c 	bl	8000240 <memchr>
 8009608:	9a04      	ldr	r2, [sp, #16]
 800960a:	b9d8      	cbnz	r0, 8009644 <_vfiprintf_r+0x110>
 800960c:	06d1      	lsls	r1, r2, #27
 800960e:	bf44      	itt	mi
 8009610:	2320      	movmi	r3, #32
 8009612:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009616:	0713      	lsls	r3, r2, #28
 8009618:	bf44      	itt	mi
 800961a:	232b      	movmi	r3, #43	; 0x2b
 800961c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009620:	f89a 3000 	ldrb.w	r3, [sl]
 8009624:	2b2a      	cmp	r3, #42	; 0x2a
 8009626:	d015      	beq.n	8009654 <_vfiprintf_r+0x120>
 8009628:	9a07      	ldr	r2, [sp, #28]
 800962a:	4654      	mov	r4, sl
 800962c:	2000      	movs	r0, #0
 800962e:	f04f 0c0a 	mov.w	ip, #10
 8009632:	4621      	mov	r1, r4
 8009634:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009638:	3b30      	subs	r3, #48	; 0x30
 800963a:	2b09      	cmp	r3, #9
 800963c:	d94d      	bls.n	80096da <_vfiprintf_r+0x1a6>
 800963e:	b1b0      	cbz	r0, 800966e <_vfiprintf_r+0x13a>
 8009640:	9207      	str	r2, [sp, #28]
 8009642:	e014      	b.n	800966e <_vfiprintf_r+0x13a>
 8009644:	eba0 0308 	sub.w	r3, r0, r8
 8009648:	fa09 f303 	lsl.w	r3, r9, r3
 800964c:	4313      	orrs	r3, r2
 800964e:	9304      	str	r3, [sp, #16]
 8009650:	46a2      	mov	sl, r4
 8009652:	e7d2      	b.n	80095fa <_vfiprintf_r+0xc6>
 8009654:	9b03      	ldr	r3, [sp, #12]
 8009656:	1d19      	adds	r1, r3, #4
 8009658:	681b      	ldr	r3, [r3, #0]
 800965a:	9103      	str	r1, [sp, #12]
 800965c:	2b00      	cmp	r3, #0
 800965e:	bfbb      	ittet	lt
 8009660:	425b      	neglt	r3, r3
 8009662:	f042 0202 	orrlt.w	r2, r2, #2
 8009666:	9307      	strge	r3, [sp, #28]
 8009668:	9307      	strlt	r3, [sp, #28]
 800966a:	bfb8      	it	lt
 800966c:	9204      	strlt	r2, [sp, #16]
 800966e:	7823      	ldrb	r3, [r4, #0]
 8009670:	2b2e      	cmp	r3, #46	; 0x2e
 8009672:	d10c      	bne.n	800968e <_vfiprintf_r+0x15a>
 8009674:	7863      	ldrb	r3, [r4, #1]
 8009676:	2b2a      	cmp	r3, #42	; 0x2a
 8009678:	d134      	bne.n	80096e4 <_vfiprintf_r+0x1b0>
 800967a:	9b03      	ldr	r3, [sp, #12]
 800967c:	1d1a      	adds	r2, r3, #4
 800967e:	681b      	ldr	r3, [r3, #0]
 8009680:	9203      	str	r2, [sp, #12]
 8009682:	2b00      	cmp	r3, #0
 8009684:	bfb8      	it	lt
 8009686:	f04f 33ff 	movlt.w	r3, #4294967295
 800968a:	3402      	adds	r4, #2
 800968c:	9305      	str	r3, [sp, #20]
 800968e:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8009764 <_vfiprintf_r+0x230>
 8009692:	7821      	ldrb	r1, [r4, #0]
 8009694:	2203      	movs	r2, #3
 8009696:	4650      	mov	r0, sl
 8009698:	f7f6 fdd2 	bl	8000240 <memchr>
 800969c:	b138      	cbz	r0, 80096ae <_vfiprintf_r+0x17a>
 800969e:	9b04      	ldr	r3, [sp, #16]
 80096a0:	eba0 000a 	sub.w	r0, r0, sl
 80096a4:	2240      	movs	r2, #64	; 0x40
 80096a6:	4082      	lsls	r2, r0
 80096a8:	4313      	orrs	r3, r2
 80096aa:	3401      	adds	r4, #1
 80096ac:	9304      	str	r3, [sp, #16]
 80096ae:	f814 1b01 	ldrb.w	r1, [r4], #1
 80096b2:	4829      	ldr	r0, [pc, #164]	; (8009758 <_vfiprintf_r+0x224>)
 80096b4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80096b8:	2206      	movs	r2, #6
 80096ba:	f7f6 fdc1 	bl	8000240 <memchr>
 80096be:	2800      	cmp	r0, #0
 80096c0:	d03f      	beq.n	8009742 <_vfiprintf_r+0x20e>
 80096c2:	4b26      	ldr	r3, [pc, #152]	; (800975c <_vfiprintf_r+0x228>)
 80096c4:	bb1b      	cbnz	r3, 800970e <_vfiprintf_r+0x1da>
 80096c6:	9b03      	ldr	r3, [sp, #12]
 80096c8:	3307      	adds	r3, #7
 80096ca:	f023 0307 	bic.w	r3, r3, #7
 80096ce:	3308      	adds	r3, #8
 80096d0:	9303      	str	r3, [sp, #12]
 80096d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80096d4:	443b      	add	r3, r7
 80096d6:	9309      	str	r3, [sp, #36]	; 0x24
 80096d8:	e768      	b.n	80095ac <_vfiprintf_r+0x78>
 80096da:	fb0c 3202 	mla	r2, ip, r2, r3
 80096de:	460c      	mov	r4, r1
 80096e0:	2001      	movs	r0, #1
 80096e2:	e7a6      	b.n	8009632 <_vfiprintf_r+0xfe>
 80096e4:	2300      	movs	r3, #0
 80096e6:	3401      	adds	r4, #1
 80096e8:	9305      	str	r3, [sp, #20]
 80096ea:	4619      	mov	r1, r3
 80096ec:	f04f 0c0a 	mov.w	ip, #10
 80096f0:	4620      	mov	r0, r4
 80096f2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80096f6:	3a30      	subs	r2, #48	; 0x30
 80096f8:	2a09      	cmp	r2, #9
 80096fa:	d903      	bls.n	8009704 <_vfiprintf_r+0x1d0>
 80096fc:	2b00      	cmp	r3, #0
 80096fe:	d0c6      	beq.n	800968e <_vfiprintf_r+0x15a>
 8009700:	9105      	str	r1, [sp, #20]
 8009702:	e7c4      	b.n	800968e <_vfiprintf_r+0x15a>
 8009704:	fb0c 2101 	mla	r1, ip, r1, r2
 8009708:	4604      	mov	r4, r0
 800970a:	2301      	movs	r3, #1
 800970c:	e7f0      	b.n	80096f0 <_vfiprintf_r+0x1bc>
 800970e:	ab03      	add	r3, sp, #12
 8009710:	9300      	str	r3, [sp, #0]
 8009712:	462a      	mov	r2, r5
 8009714:	4b12      	ldr	r3, [pc, #72]	; (8009760 <_vfiprintf_r+0x22c>)
 8009716:	a904      	add	r1, sp, #16
 8009718:	4630      	mov	r0, r6
 800971a:	f7fd fc41 	bl	8006fa0 <_printf_float>
 800971e:	4607      	mov	r7, r0
 8009720:	1c78      	adds	r0, r7, #1
 8009722:	d1d6      	bne.n	80096d2 <_vfiprintf_r+0x19e>
 8009724:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009726:	07d9      	lsls	r1, r3, #31
 8009728:	d405      	bmi.n	8009736 <_vfiprintf_r+0x202>
 800972a:	89ab      	ldrh	r3, [r5, #12]
 800972c:	059a      	lsls	r2, r3, #22
 800972e:	d402      	bmi.n	8009736 <_vfiprintf_r+0x202>
 8009730:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009732:	f7fe f983 	bl	8007a3c <__retarget_lock_release_recursive>
 8009736:	89ab      	ldrh	r3, [r5, #12]
 8009738:	065b      	lsls	r3, r3, #25
 800973a:	f53f af1d 	bmi.w	8009578 <_vfiprintf_r+0x44>
 800973e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009740:	e71c      	b.n	800957c <_vfiprintf_r+0x48>
 8009742:	ab03      	add	r3, sp, #12
 8009744:	9300      	str	r3, [sp, #0]
 8009746:	462a      	mov	r2, r5
 8009748:	4b05      	ldr	r3, [pc, #20]	; (8009760 <_vfiprintf_r+0x22c>)
 800974a:	a904      	add	r1, sp, #16
 800974c:	4630      	mov	r0, r6
 800974e:	f7fd feaf 	bl	80074b0 <_printf_i>
 8009752:	e7e4      	b.n	800971e <_vfiprintf_r+0x1ea>
 8009754:	0802fd2c 	.word	0x0802fd2c
 8009758:	0802fd36 	.word	0x0802fd36
 800975c:	08006fa1 	.word	0x08006fa1
 8009760:	08009511 	.word	0x08009511
 8009764:	0802fd32 	.word	0x0802fd32

08009768 <__swbuf_r>:
 8009768:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800976a:	460e      	mov	r6, r1
 800976c:	4614      	mov	r4, r2
 800976e:	4605      	mov	r5, r0
 8009770:	b118      	cbz	r0, 800977a <__swbuf_r+0x12>
 8009772:	6a03      	ldr	r3, [r0, #32]
 8009774:	b90b      	cbnz	r3, 800977a <__swbuf_r+0x12>
 8009776:	f7fe f849 	bl	800780c <__sinit>
 800977a:	69a3      	ldr	r3, [r4, #24]
 800977c:	60a3      	str	r3, [r4, #8]
 800977e:	89a3      	ldrh	r3, [r4, #12]
 8009780:	071a      	lsls	r2, r3, #28
 8009782:	d525      	bpl.n	80097d0 <__swbuf_r+0x68>
 8009784:	6923      	ldr	r3, [r4, #16]
 8009786:	b31b      	cbz	r3, 80097d0 <__swbuf_r+0x68>
 8009788:	6823      	ldr	r3, [r4, #0]
 800978a:	6922      	ldr	r2, [r4, #16]
 800978c:	1a98      	subs	r0, r3, r2
 800978e:	6963      	ldr	r3, [r4, #20]
 8009790:	b2f6      	uxtb	r6, r6
 8009792:	4283      	cmp	r3, r0
 8009794:	4637      	mov	r7, r6
 8009796:	dc04      	bgt.n	80097a2 <__swbuf_r+0x3a>
 8009798:	4621      	mov	r1, r4
 800979a:	4628      	mov	r0, r5
 800979c:	f7ff fd9e 	bl	80092dc <_fflush_r>
 80097a0:	b9e0      	cbnz	r0, 80097dc <__swbuf_r+0x74>
 80097a2:	68a3      	ldr	r3, [r4, #8]
 80097a4:	3b01      	subs	r3, #1
 80097a6:	60a3      	str	r3, [r4, #8]
 80097a8:	6823      	ldr	r3, [r4, #0]
 80097aa:	1c5a      	adds	r2, r3, #1
 80097ac:	6022      	str	r2, [r4, #0]
 80097ae:	701e      	strb	r6, [r3, #0]
 80097b0:	6962      	ldr	r2, [r4, #20]
 80097b2:	1c43      	adds	r3, r0, #1
 80097b4:	429a      	cmp	r2, r3
 80097b6:	d004      	beq.n	80097c2 <__swbuf_r+0x5a>
 80097b8:	89a3      	ldrh	r3, [r4, #12]
 80097ba:	07db      	lsls	r3, r3, #31
 80097bc:	d506      	bpl.n	80097cc <__swbuf_r+0x64>
 80097be:	2e0a      	cmp	r6, #10
 80097c0:	d104      	bne.n	80097cc <__swbuf_r+0x64>
 80097c2:	4621      	mov	r1, r4
 80097c4:	4628      	mov	r0, r5
 80097c6:	f7ff fd89 	bl	80092dc <_fflush_r>
 80097ca:	b938      	cbnz	r0, 80097dc <__swbuf_r+0x74>
 80097cc:	4638      	mov	r0, r7
 80097ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80097d0:	4621      	mov	r1, r4
 80097d2:	4628      	mov	r0, r5
 80097d4:	f000 f806 	bl	80097e4 <__swsetup_r>
 80097d8:	2800      	cmp	r0, #0
 80097da:	d0d5      	beq.n	8009788 <__swbuf_r+0x20>
 80097dc:	f04f 37ff 	mov.w	r7, #4294967295
 80097e0:	e7f4      	b.n	80097cc <__swbuf_r+0x64>
	...

080097e4 <__swsetup_r>:
 80097e4:	b538      	push	{r3, r4, r5, lr}
 80097e6:	4b2a      	ldr	r3, [pc, #168]	; (8009890 <__swsetup_r+0xac>)
 80097e8:	4605      	mov	r5, r0
 80097ea:	6818      	ldr	r0, [r3, #0]
 80097ec:	460c      	mov	r4, r1
 80097ee:	b118      	cbz	r0, 80097f8 <__swsetup_r+0x14>
 80097f0:	6a03      	ldr	r3, [r0, #32]
 80097f2:	b90b      	cbnz	r3, 80097f8 <__swsetup_r+0x14>
 80097f4:	f7fe f80a 	bl	800780c <__sinit>
 80097f8:	89a3      	ldrh	r3, [r4, #12]
 80097fa:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80097fe:	0718      	lsls	r0, r3, #28
 8009800:	d422      	bmi.n	8009848 <__swsetup_r+0x64>
 8009802:	06d9      	lsls	r1, r3, #27
 8009804:	d407      	bmi.n	8009816 <__swsetup_r+0x32>
 8009806:	2309      	movs	r3, #9
 8009808:	602b      	str	r3, [r5, #0]
 800980a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800980e:	81a3      	strh	r3, [r4, #12]
 8009810:	f04f 30ff 	mov.w	r0, #4294967295
 8009814:	e034      	b.n	8009880 <__swsetup_r+0x9c>
 8009816:	0758      	lsls	r0, r3, #29
 8009818:	d512      	bpl.n	8009840 <__swsetup_r+0x5c>
 800981a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800981c:	b141      	cbz	r1, 8009830 <__swsetup_r+0x4c>
 800981e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009822:	4299      	cmp	r1, r3
 8009824:	d002      	beq.n	800982c <__swsetup_r+0x48>
 8009826:	4628      	mov	r0, r5
 8009828:	f7fe fefe 	bl	8008628 <_free_r>
 800982c:	2300      	movs	r3, #0
 800982e:	6363      	str	r3, [r4, #52]	; 0x34
 8009830:	89a3      	ldrh	r3, [r4, #12]
 8009832:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009836:	81a3      	strh	r3, [r4, #12]
 8009838:	2300      	movs	r3, #0
 800983a:	6063      	str	r3, [r4, #4]
 800983c:	6923      	ldr	r3, [r4, #16]
 800983e:	6023      	str	r3, [r4, #0]
 8009840:	89a3      	ldrh	r3, [r4, #12]
 8009842:	f043 0308 	orr.w	r3, r3, #8
 8009846:	81a3      	strh	r3, [r4, #12]
 8009848:	6923      	ldr	r3, [r4, #16]
 800984a:	b94b      	cbnz	r3, 8009860 <__swsetup_r+0x7c>
 800984c:	89a3      	ldrh	r3, [r4, #12]
 800984e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009852:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009856:	d003      	beq.n	8009860 <__swsetup_r+0x7c>
 8009858:	4621      	mov	r1, r4
 800985a:	4628      	mov	r0, r5
 800985c:	f000 f884 	bl	8009968 <__smakebuf_r>
 8009860:	89a0      	ldrh	r0, [r4, #12]
 8009862:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009866:	f010 0301 	ands.w	r3, r0, #1
 800986a:	d00a      	beq.n	8009882 <__swsetup_r+0x9e>
 800986c:	2300      	movs	r3, #0
 800986e:	60a3      	str	r3, [r4, #8]
 8009870:	6963      	ldr	r3, [r4, #20]
 8009872:	425b      	negs	r3, r3
 8009874:	61a3      	str	r3, [r4, #24]
 8009876:	6923      	ldr	r3, [r4, #16]
 8009878:	b943      	cbnz	r3, 800988c <__swsetup_r+0xa8>
 800987a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800987e:	d1c4      	bne.n	800980a <__swsetup_r+0x26>
 8009880:	bd38      	pop	{r3, r4, r5, pc}
 8009882:	0781      	lsls	r1, r0, #30
 8009884:	bf58      	it	pl
 8009886:	6963      	ldrpl	r3, [r4, #20]
 8009888:	60a3      	str	r3, [r4, #8]
 800988a:	e7f4      	b.n	8009876 <__swsetup_r+0x92>
 800988c:	2000      	movs	r0, #0
 800988e:	e7f7      	b.n	8009880 <__swsetup_r+0x9c>
 8009890:	20000084 	.word	0x20000084

08009894 <_raise_r>:
 8009894:	291f      	cmp	r1, #31
 8009896:	b538      	push	{r3, r4, r5, lr}
 8009898:	4604      	mov	r4, r0
 800989a:	460d      	mov	r5, r1
 800989c:	d904      	bls.n	80098a8 <_raise_r+0x14>
 800989e:	2316      	movs	r3, #22
 80098a0:	6003      	str	r3, [r0, #0]
 80098a2:	f04f 30ff 	mov.w	r0, #4294967295
 80098a6:	bd38      	pop	{r3, r4, r5, pc}
 80098a8:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 80098aa:	b112      	cbz	r2, 80098b2 <_raise_r+0x1e>
 80098ac:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80098b0:	b94b      	cbnz	r3, 80098c6 <_raise_r+0x32>
 80098b2:	4620      	mov	r0, r4
 80098b4:	f000 f830 	bl	8009918 <_getpid_r>
 80098b8:	462a      	mov	r2, r5
 80098ba:	4601      	mov	r1, r0
 80098bc:	4620      	mov	r0, r4
 80098be:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80098c2:	f000 b817 	b.w	80098f4 <_kill_r>
 80098c6:	2b01      	cmp	r3, #1
 80098c8:	d00a      	beq.n	80098e0 <_raise_r+0x4c>
 80098ca:	1c59      	adds	r1, r3, #1
 80098cc:	d103      	bne.n	80098d6 <_raise_r+0x42>
 80098ce:	2316      	movs	r3, #22
 80098d0:	6003      	str	r3, [r0, #0]
 80098d2:	2001      	movs	r0, #1
 80098d4:	e7e7      	b.n	80098a6 <_raise_r+0x12>
 80098d6:	2400      	movs	r4, #0
 80098d8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80098dc:	4628      	mov	r0, r5
 80098de:	4798      	blx	r3
 80098e0:	2000      	movs	r0, #0
 80098e2:	e7e0      	b.n	80098a6 <_raise_r+0x12>

080098e4 <raise>:
 80098e4:	4b02      	ldr	r3, [pc, #8]	; (80098f0 <raise+0xc>)
 80098e6:	4601      	mov	r1, r0
 80098e8:	6818      	ldr	r0, [r3, #0]
 80098ea:	f7ff bfd3 	b.w	8009894 <_raise_r>
 80098ee:	bf00      	nop
 80098f0:	20000084 	.word	0x20000084

080098f4 <_kill_r>:
 80098f4:	b538      	push	{r3, r4, r5, lr}
 80098f6:	4d07      	ldr	r5, [pc, #28]	; (8009914 <_kill_r+0x20>)
 80098f8:	2300      	movs	r3, #0
 80098fa:	4604      	mov	r4, r0
 80098fc:	4608      	mov	r0, r1
 80098fe:	4611      	mov	r1, r2
 8009900:	602b      	str	r3, [r5, #0]
 8009902:	f7f7 ff03 	bl	800170c <_kill>
 8009906:	1c43      	adds	r3, r0, #1
 8009908:	d102      	bne.n	8009910 <_kill_r+0x1c>
 800990a:	682b      	ldr	r3, [r5, #0]
 800990c:	b103      	cbz	r3, 8009910 <_kill_r+0x1c>
 800990e:	6023      	str	r3, [r4, #0]
 8009910:	bd38      	pop	{r3, r4, r5, pc}
 8009912:	bf00      	nop
 8009914:	20000594 	.word	0x20000594

08009918 <_getpid_r>:
 8009918:	f7f7 bef0 	b.w	80016fc <_getpid>

0800991c <__swhatbuf_r>:
 800991c:	b570      	push	{r4, r5, r6, lr}
 800991e:	460c      	mov	r4, r1
 8009920:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009924:	2900      	cmp	r1, #0
 8009926:	b096      	sub	sp, #88	; 0x58
 8009928:	4615      	mov	r5, r2
 800992a:	461e      	mov	r6, r3
 800992c:	da0d      	bge.n	800994a <__swhatbuf_r+0x2e>
 800992e:	89a3      	ldrh	r3, [r4, #12]
 8009930:	f013 0f80 	tst.w	r3, #128	; 0x80
 8009934:	f04f 0100 	mov.w	r1, #0
 8009938:	bf0c      	ite	eq
 800993a:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800993e:	2340      	movne	r3, #64	; 0x40
 8009940:	2000      	movs	r0, #0
 8009942:	6031      	str	r1, [r6, #0]
 8009944:	602b      	str	r3, [r5, #0]
 8009946:	b016      	add	sp, #88	; 0x58
 8009948:	bd70      	pop	{r4, r5, r6, pc}
 800994a:	466a      	mov	r2, sp
 800994c:	f000 f848 	bl	80099e0 <_fstat_r>
 8009950:	2800      	cmp	r0, #0
 8009952:	dbec      	blt.n	800992e <__swhatbuf_r+0x12>
 8009954:	9901      	ldr	r1, [sp, #4]
 8009956:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800995a:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800995e:	4259      	negs	r1, r3
 8009960:	4159      	adcs	r1, r3
 8009962:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009966:	e7eb      	b.n	8009940 <__swhatbuf_r+0x24>

08009968 <__smakebuf_r>:
 8009968:	898b      	ldrh	r3, [r1, #12]
 800996a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800996c:	079d      	lsls	r5, r3, #30
 800996e:	4606      	mov	r6, r0
 8009970:	460c      	mov	r4, r1
 8009972:	d507      	bpl.n	8009984 <__smakebuf_r+0x1c>
 8009974:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009978:	6023      	str	r3, [r4, #0]
 800997a:	6123      	str	r3, [r4, #16]
 800997c:	2301      	movs	r3, #1
 800997e:	6163      	str	r3, [r4, #20]
 8009980:	b002      	add	sp, #8
 8009982:	bd70      	pop	{r4, r5, r6, pc}
 8009984:	ab01      	add	r3, sp, #4
 8009986:	466a      	mov	r2, sp
 8009988:	f7ff ffc8 	bl	800991c <__swhatbuf_r>
 800998c:	9900      	ldr	r1, [sp, #0]
 800998e:	4605      	mov	r5, r0
 8009990:	4630      	mov	r0, r6
 8009992:	f7fe febd 	bl	8008710 <_malloc_r>
 8009996:	b948      	cbnz	r0, 80099ac <__smakebuf_r+0x44>
 8009998:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800999c:	059a      	lsls	r2, r3, #22
 800999e:	d4ef      	bmi.n	8009980 <__smakebuf_r+0x18>
 80099a0:	f023 0303 	bic.w	r3, r3, #3
 80099a4:	f043 0302 	orr.w	r3, r3, #2
 80099a8:	81a3      	strh	r3, [r4, #12]
 80099aa:	e7e3      	b.n	8009974 <__smakebuf_r+0xc>
 80099ac:	89a3      	ldrh	r3, [r4, #12]
 80099ae:	6020      	str	r0, [r4, #0]
 80099b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80099b4:	81a3      	strh	r3, [r4, #12]
 80099b6:	9b00      	ldr	r3, [sp, #0]
 80099b8:	6163      	str	r3, [r4, #20]
 80099ba:	9b01      	ldr	r3, [sp, #4]
 80099bc:	6120      	str	r0, [r4, #16]
 80099be:	b15b      	cbz	r3, 80099d8 <__smakebuf_r+0x70>
 80099c0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80099c4:	4630      	mov	r0, r6
 80099c6:	f000 f81d 	bl	8009a04 <_isatty_r>
 80099ca:	b128      	cbz	r0, 80099d8 <__smakebuf_r+0x70>
 80099cc:	89a3      	ldrh	r3, [r4, #12]
 80099ce:	f023 0303 	bic.w	r3, r3, #3
 80099d2:	f043 0301 	orr.w	r3, r3, #1
 80099d6:	81a3      	strh	r3, [r4, #12]
 80099d8:	89a3      	ldrh	r3, [r4, #12]
 80099da:	431d      	orrs	r5, r3
 80099dc:	81a5      	strh	r5, [r4, #12]
 80099de:	e7cf      	b.n	8009980 <__smakebuf_r+0x18>

080099e0 <_fstat_r>:
 80099e0:	b538      	push	{r3, r4, r5, lr}
 80099e2:	4d07      	ldr	r5, [pc, #28]	; (8009a00 <_fstat_r+0x20>)
 80099e4:	2300      	movs	r3, #0
 80099e6:	4604      	mov	r4, r0
 80099e8:	4608      	mov	r0, r1
 80099ea:	4611      	mov	r1, r2
 80099ec:	602b      	str	r3, [r5, #0]
 80099ee:	f7f7 feec 	bl	80017ca <_fstat>
 80099f2:	1c43      	adds	r3, r0, #1
 80099f4:	d102      	bne.n	80099fc <_fstat_r+0x1c>
 80099f6:	682b      	ldr	r3, [r5, #0]
 80099f8:	b103      	cbz	r3, 80099fc <_fstat_r+0x1c>
 80099fa:	6023      	str	r3, [r4, #0]
 80099fc:	bd38      	pop	{r3, r4, r5, pc}
 80099fe:	bf00      	nop
 8009a00:	20000594 	.word	0x20000594

08009a04 <_isatty_r>:
 8009a04:	b538      	push	{r3, r4, r5, lr}
 8009a06:	4d06      	ldr	r5, [pc, #24]	; (8009a20 <_isatty_r+0x1c>)
 8009a08:	2300      	movs	r3, #0
 8009a0a:	4604      	mov	r4, r0
 8009a0c:	4608      	mov	r0, r1
 8009a0e:	602b      	str	r3, [r5, #0]
 8009a10:	f7f7 feeb 	bl	80017ea <_isatty>
 8009a14:	1c43      	adds	r3, r0, #1
 8009a16:	d102      	bne.n	8009a1e <_isatty_r+0x1a>
 8009a18:	682b      	ldr	r3, [r5, #0]
 8009a1a:	b103      	cbz	r3, 8009a1e <_isatty_r+0x1a>
 8009a1c:	6023      	str	r3, [r4, #0]
 8009a1e:	bd38      	pop	{r3, r4, r5, pc}
 8009a20:	20000594 	.word	0x20000594
 8009a24:	00000000 	.word	0x00000000

08009a28 <sqrt>:
 8009a28:	b508      	push	{r3, lr}
 8009a2a:	ed2d 8b04 	vpush	{d8-d9}
 8009a2e:	eeb0 8b40 	vmov.f64	d8, d0
 8009a32:	f000 fa9d 	bl	8009f70 <__ieee754_sqrt>
 8009a36:	eeb4 8b48 	vcmp.f64	d8, d8
 8009a3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009a3e:	d60c      	bvs.n	8009a5a <sqrt+0x32>
 8009a40:	ed9f 9b07 	vldr	d9, [pc, #28]	; 8009a60 <sqrt+0x38>
 8009a44:	eeb4 8bc9 	vcmpe.f64	d8, d9
 8009a48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009a4c:	d505      	bpl.n	8009a5a <sqrt+0x32>
 8009a4e:	f7fd ffc9 	bl	80079e4 <__errno>
 8009a52:	ee89 0b09 	vdiv.f64	d0, d9, d9
 8009a56:	2321      	movs	r3, #33	; 0x21
 8009a58:	6003      	str	r3, [r0, #0]
 8009a5a:	ecbd 8b04 	vpop	{d8-d9}
 8009a5e:	bd08      	pop	{r3, pc}
	...

08009a68 <checkint>:
 8009a68:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8009a6c:	f240 33fe 	movw	r3, #1022	; 0x3fe
 8009a70:	429a      	cmp	r2, r3
 8009a72:	b570      	push	{r4, r5, r6, lr}
 8009a74:	dd2a      	ble.n	8009acc <checkint+0x64>
 8009a76:	f240 4333 	movw	r3, #1075	; 0x433
 8009a7a:	429a      	cmp	r2, r3
 8009a7c:	dc24      	bgt.n	8009ac8 <checkint+0x60>
 8009a7e:	1a9b      	subs	r3, r3, r2
 8009a80:	f1a3 0620 	sub.w	r6, r3, #32
 8009a84:	f04f 32ff 	mov.w	r2, #4294967295
 8009a88:	fa02 f403 	lsl.w	r4, r2, r3
 8009a8c:	fa02 f606 	lsl.w	r6, r2, r6
 8009a90:	f1c3 0520 	rsb	r5, r3, #32
 8009a94:	fa22 f505 	lsr.w	r5, r2, r5
 8009a98:	4334      	orrs	r4, r6
 8009a9a:	432c      	orrs	r4, r5
 8009a9c:	409a      	lsls	r2, r3
 8009a9e:	ea20 0202 	bic.w	r2, r0, r2
 8009aa2:	ea21 0404 	bic.w	r4, r1, r4
 8009aa6:	4322      	orrs	r2, r4
 8009aa8:	f1a3 0420 	sub.w	r4, r3, #32
 8009aac:	f1c3 0220 	rsb	r2, r3, #32
 8009ab0:	d10c      	bne.n	8009acc <checkint+0x64>
 8009ab2:	40d8      	lsrs	r0, r3
 8009ab4:	fa01 f302 	lsl.w	r3, r1, r2
 8009ab8:	4318      	orrs	r0, r3
 8009aba:	40e1      	lsrs	r1, r4
 8009abc:	4308      	orrs	r0, r1
 8009abe:	f000 0001 	and.w	r0, r0, #1
 8009ac2:	f1d0 0002 	rsbs	r0, r0, #2
 8009ac6:	bd70      	pop	{r4, r5, r6, pc}
 8009ac8:	2002      	movs	r0, #2
 8009aca:	e7fc      	b.n	8009ac6 <checkint+0x5e>
 8009acc:	2000      	movs	r0, #0
 8009ace:	e7fa      	b.n	8009ac6 <checkint+0x5e>

08009ad0 <pow>:
 8009ad0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ad4:	ee10 4a90 	vmov	r4, s1
 8009ad8:	ed2d 8b0a 	vpush	{d8-d12}
 8009adc:	ea4f 5814 	mov.w	r8, r4, lsr #20
 8009ae0:	ee11 aa90 	vmov	sl, s3
 8009ae4:	f108 32ff 	add.w	r2, r8, #4294967295
 8009ae8:	f240 73fd 	movw	r3, #2045	; 0x7fd
 8009aec:	429a      	cmp	r2, r3
 8009aee:	ee10 5a10 	vmov	r5, s0
 8009af2:	ee11 0a10 	vmov	r0, s2
 8009af6:	b087      	sub	sp, #28
 8009af8:	46c4      	mov	ip, r8
 8009afa:	ea4f 561a 	mov.w	r6, sl, lsr #20
 8009afe:	d806      	bhi.n	8009b0e <pow+0x3e>
 8009b00:	f3c6 030a 	ubfx	r3, r6, #0, #11
 8009b04:	f2a3 33be 	subw	r3, r3, #958	; 0x3be
 8009b08:	2b7f      	cmp	r3, #127	; 0x7f
 8009b0a:	f240 8156 	bls.w	8009dba <pow+0x2ea>
 8009b0e:	1802      	adds	r2, r0, r0
 8009b10:	eb4a 010a 	adc.w	r1, sl, sl
 8009b14:	f06f 0b01 	mvn.w	fp, #1
 8009b18:	1e57      	subs	r7, r2, #1
 8009b1a:	f141 33ff 	adc.w	r3, r1, #4294967295
 8009b1e:	f46f 1e00 	mvn.w	lr, #2097152	; 0x200000
 8009b22:	45bb      	cmp	fp, r7
 8009b24:	eb7e 0303 	sbcs.w	r3, lr, r3
 8009b28:	d242      	bcs.n	8009bb0 <pow+0xe0>
 8009b2a:	ea52 0301 	orrs.w	r3, r2, r1
 8009b2e:	f04f 0300 	mov.w	r3, #0
 8009b32:	d10c      	bne.n	8009b4e <pow+0x7e>
 8009b34:	196d      	adds	r5, r5, r5
 8009b36:	f484 2400 	eor.w	r4, r4, #524288	; 0x80000
 8009b3a:	4164      	adcs	r4, r4
 8009b3c:	42ab      	cmp	r3, r5
 8009b3e:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8009b42:	41a3      	sbcs	r3, r4
 8009b44:	f0c0 808f 	bcc.w	8009c66 <pow+0x196>
 8009b48:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 8009b4c:	e02b      	b.n	8009ba6 <pow+0xd6>
 8009b4e:	4ed4      	ldr	r6, [pc, #848]	; (8009ea0 <pow+0x3d0>)
 8009b50:	42b4      	cmp	r4, r6
 8009b52:	bf08      	it	eq
 8009b54:	429d      	cmpeq	r5, r3
 8009b56:	d109      	bne.n	8009b6c <pow+0x9c>
 8009b58:	1800      	adds	r0, r0, r0
 8009b5a:	f48a 2a00 	eor.w	sl, sl, #524288	; 0x80000
 8009b5e:	eb4a 0a0a 	adc.w	sl, sl, sl
 8009b62:	4283      	cmp	r3, r0
 8009b64:	4bcf      	ldr	r3, [pc, #828]	; (8009ea4 <pow+0x3d4>)
 8009b66:	eb73 030a 	sbcs.w	r3, r3, sl
 8009b6a:	e7eb      	b.n	8009b44 <pow+0x74>
 8009b6c:	196d      	adds	r5, r5, r5
 8009b6e:	48ce      	ldr	r0, [pc, #824]	; (8009ea8 <pow+0x3d8>)
 8009b70:	4164      	adcs	r4, r4
 8009b72:	42ab      	cmp	r3, r5
 8009b74:	eb70 0604 	sbcs.w	r6, r0, r4
 8009b78:	d375      	bcc.n	8009c66 <pow+0x196>
 8009b7a:	4281      	cmp	r1, r0
 8009b7c:	bf08      	it	eq
 8009b7e:	429a      	cmpeq	r2, r3
 8009b80:	d171      	bne.n	8009c66 <pow+0x196>
 8009b82:	4aca      	ldr	r2, [pc, #808]	; (8009eac <pow+0x3dc>)
 8009b84:	4294      	cmp	r4, r2
 8009b86:	bf08      	it	eq
 8009b88:	429d      	cmpeq	r5, r3
 8009b8a:	d0dd      	beq.n	8009b48 <pow+0x78>
 8009b8c:	4294      	cmp	r4, r2
 8009b8e:	ea6f 0a0a 	mvn.w	sl, sl
 8009b92:	bf34      	ite	cc
 8009b94:	2400      	movcc	r4, #0
 8009b96:	2401      	movcs	r4, #1
 8009b98:	ea4f 7ada 	mov.w	sl, sl, lsr #31
 8009b9c:	4554      	cmp	r4, sl
 8009b9e:	f040 81dc 	bne.w	8009f5a <pow+0x48a>
 8009ba2:	ee21 0b01 	vmul.f64	d0, d1, d1
 8009ba6:	b007      	add	sp, #28
 8009ba8:	ecbd 8b0a 	vpop	{d8-d12}
 8009bac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009bb0:	196f      	adds	r7, r5, r5
 8009bb2:	eb44 0904 	adc.w	r9, r4, r4
 8009bb6:	1e7a      	subs	r2, r7, #1
 8009bb8:	f169 0300 	sbc.w	r3, r9, #0
 8009bbc:	4593      	cmp	fp, r2
 8009bbe:	eb7e 0303 	sbcs.w	r3, lr, r3
 8009bc2:	d225      	bcs.n	8009c10 <pow+0x140>
 8009bc4:	ee20 0b00 	vmul.f64	d0, d0, d0
 8009bc8:	2c00      	cmp	r4, #0
 8009bca:	da13      	bge.n	8009bf4 <pow+0x124>
 8009bcc:	4651      	mov	r1, sl
 8009bce:	f7ff ff4b 	bl	8009a68 <checkint>
 8009bd2:	2801      	cmp	r0, #1
 8009bd4:	d10e      	bne.n	8009bf4 <pow+0x124>
 8009bd6:	eeb1 0b40 	vneg.f64	d0, d0
 8009bda:	ea57 0909 	orrs.w	r9, r7, r9
 8009bde:	d10b      	bne.n	8009bf8 <pow+0x128>
 8009be0:	f1ba 0f00 	cmp.w	sl, #0
 8009be4:	dadf      	bge.n	8009ba6 <pow+0xd6>
 8009be6:	b007      	add	sp, #28
 8009be8:	ecbd 8b0a 	vpop	{d8-d12}
 8009bec:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009bf0:	f000 b9ee 	b.w	8009fd0 <__math_divzero>
 8009bf4:	2000      	movs	r0, #0
 8009bf6:	e7f0      	b.n	8009bda <pow+0x10a>
 8009bf8:	f1ba 0f00 	cmp.w	sl, #0
 8009bfc:	dad3      	bge.n	8009ba6 <pow+0xd6>
 8009bfe:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8009c02:	ee86 7b00 	vdiv.f64	d7, d6, d0
 8009c06:	ed8d 7b00 	vstr	d7, [sp]
 8009c0a:	ed9d 0b00 	vldr	d0, [sp]
 8009c0e:	e7ca      	b.n	8009ba6 <pow+0xd6>
 8009c10:	2c00      	cmp	r4, #0
 8009c12:	da2b      	bge.n	8009c6c <pow+0x19c>
 8009c14:	4651      	mov	r1, sl
 8009c16:	f7ff ff27 	bl	8009a68 <checkint>
 8009c1a:	b930      	cbnz	r0, 8009c2a <pow+0x15a>
 8009c1c:	b007      	add	sp, #28
 8009c1e:	ecbd 8b0a 	vpop	{d8-d12}
 8009c22:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c26:	f000 b9eb 	b.w	800a000 <__math_invalid>
 8009c2a:	1e41      	subs	r1, r0, #1
 8009c2c:	4248      	negs	r0, r1
 8009c2e:	4148      	adcs	r0, r1
 8009c30:	0480      	lsls	r0, r0, #18
 8009c32:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 8009c36:	f3c8 0c0a 	ubfx	ip, r8, #0, #11
 8009c3a:	f3c6 020a 	ubfx	r2, r6, #0, #11
 8009c3e:	f2a2 33be 	subw	r3, r2, #958	; 0x3be
 8009c42:	2b7f      	cmp	r3, #127	; 0x7f
 8009c44:	d92d      	bls.n	8009ca2 <pow+0x1d2>
 8009c46:	4b96      	ldr	r3, [pc, #600]	; (8009ea0 <pow+0x3d0>)
 8009c48:	2000      	movs	r0, #0
 8009c4a:	429c      	cmp	r4, r3
 8009c4c:	bf08      	it	eq
 8009c4e:	4285      	cmpeq	r5, r0
 8009c50:	f43f af7a 	beq.w	8009b48 <pow+0x78>
 8009c54:	f240 31bd 	movw	r1, #957	; 0x3bd
 8009c58:	428a      	cmp	r2, r1
 8009c5a:	d80c      	bhi.n	8009c76 <pow+0x1a6>
 8009c5c:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 8009c60:	42a8      	cmp	r0, r5
 8009c62:	41a3      	sbcs	r3, r4
 8009c64:	d204      	bcs.n	8009c70 <pow+0x1a0>
 8009c66:	ee31 0b00 	vadd.f64	d0, d1, d0
 8009c6a:	e79c      	b.n	8009ba6 <pow+0xd6>
 8009c6c:	2000      	movs	r0, #0
 8009c6e:	e7e4      	b.n	8009c3a <pow+0x16a>
 8009c70:	ee30 0b41 	vsub.f64	d0, d0, d1
 8009c74:	e797      	b.n	8009ba6 <pow+0xd6>
 8009c76:	2d01      	cmp	r5, #1
 8009c78:	eb74 0303 	sbcs.w	r3, r4, r3
 8009c7c:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8009c80:	bf34      	ite	cc
 8009c82:	2301      	movcc	r3, #1
 8009c84:	2300      	movcs	r3, #0
 8009c86:	4296      	cmp	r6, r2
 8009c88:	bf8c      	ite	hi
 8009c8a:	2600      	movhi	r6, #0
 8009c8c:	2601      	movls	r6, #1
 8009c8e:	42b3      	cmp	r3, r6
 8009c90:	f000 809b 	beq.w	8009dca <pow+0x2fa>
 8009c94:	b007      	add	sp, #28
 8009c96:	ecbd 8b0a 	vpop	{d8-d12}
 8009c9a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c9e:	f000 b98f 	b.w	8009fc0 <__math_oflow>
 8009ca2:	f1bc 0f00 	cmp.w	ip, #0
 8009ca6:	d10b      	bne.n	8009cc0 <pow+0x1f0>
 8009ca8:	ed9f 7b79 	vldr	d7, [pc, #484]	; 8009e90 <pow+0x3c0>
 8009cac:	ee20 7b07 	vmul.f64	d7, d0, d7
 8009cb0:	ec53 2b17 	vmov	r2, r3, d7
 8009cb4:	ee17 5a10 	vmov	r5, s14
 8009cb8:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 8009cbc:	f1a4 7450 	sub.w	r4, r4, #54525952	; 0x3400000
 8009cc0:	4b7b      	ldr	r3, [pc, #492]	; (8009eb0 <pow+0x3e0>)
 8009cc2:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 8009cc6:	4423      	add	r3, r4
 8009cc8:	f3c3 3246 	ubfx	r2, r3, #13, #7
 8009ccc:	1519      	asrs	r1, r3, #20
 8009cce:	0d1b      	lsrs	r3, r3, #20
 8009cd0:	051b      	lsls	r3, r3, #20
 8009cd2:	1ae7      	subs	r7, r4, r3
 8009cd4:	4b77      	ldr	r3, [pc, #476]	; (8009eb4 <pow+0x3e4>)
 8009cd6:	ee03 1a10 	vmov	s6, r1
 8009cda:	eb03 1142 	add.w	r1, r3, r2, lsl #5
 8009cde:	1e2e      	subs	r6, r5, #0
 8009ce0:	ed91 7b12 	vldr	d7, [r1, #72]	; 0x48
 8009ce4:	ec47 6b15 	vmov	d5, r6, r7
 8009ce8:	ed91 2b16 	vldr	d2, [r1, #88]	; 0x58
 8009cec:	eea5 6b07 	vfma.f64	d6, d5, d7
 8009cf0:	ed93 7b00 	vldr	d7, [r3]
 8009cf4:	ed93 5b02 	vldr	d5, [r3, #8]
 8009cf8:	eeb8 3bc3 	vcvt.f64.s32	d3, s6
 8009cfc:	eea3 2b07 	vfma.f64	d2, d3, d7
 8009d00:	ed91 7b18 	vldr	d7, [r1, #96]	; 0x60
 8009d04:	ee36 4b02 	vadd.f64	d4, d6, d2
 8009d08:	ee32 2b44 	vsub.f64	d2, d2, d4
 8009d0c:	eea3 7b05 	vfma.f64	d7, d3, d5
 8009d10:	ed93 5b04 	vldr	d5, [r3, #16]
 8009d14:	ee32 2b06 	vadd.f64	d2, d2, d6
 8009d18:	ee37 7b02 	vadd.f64	d7, d7, d2
 8009d1c:	ee26 5b05 	vmul.f64	d5, d6, d5
 8009d20:	ee26 0b05 	vmul.f64	d0, d6, d5
 8009d24:	ee34 8b00 	vadd.f64	d8, d4, d0
 8009d28:	eeb0 9b40 	vmov.f64	d9, d0
 8009d2c:	ee34 4b48 	vsub.f64	d4, d4, d8
 8009d30:	ee95 9b06 	vfnms.f64	d9, d5, d6
 8009d34:	ee34 ab00 	vadd.f64	d10, d4, d0
 8009d38:	ed93 5b06 	vldr	d5, [r3, #24]
 8009d3c:	ee26 bb00 	vmul.f64	d11, d6, d0
 8009d40:	ee37 7b09 	vadd.f64	d7, d7, d9
 8009d44:	ed93 4b08 	vldr	d4, [r3, #32]
 8009d48:	ee37 7b0a 	vadd.f64	d7, d7, d10
 8009d4c:	ed93 3b0c 	vldr	d3, [r3, #48]	; 0x30
 8009d50:	eea6 5b04 	vfma.f64	d5, d6, d4
 8009d54:	ed93 4b0a 	vldr	d4, [r3, #40]	; 0x28
 8009d58:	ed93 cb10 	vldr	d12, [r3, #64]	; 0x40
 8009d5c:	eea6 4b03 	vfma.f64	d4, d6, d3
 8009d60:	ed93 3b0e 	vldr	d3, [r3, #56]	; 0x38
 8009d64:	eea6 3b0c 	vfma.f64	d3, d6, d12
 8009d68:	eea0 4b03 	vfma.f64	d4, d0, d3
 8009d6c:	eea0 5b04 	vfma.f64	d5, d0, d4
 8009d70:	eeab 7b05 	vfma.f64	d7, d11, d5
 8009d74:	ee38 4b07 	vadd.f64	d4, d8, d7
 8009d78:	ee21 6b04 	vmul.f64	d6, d1, d4
 8009d7c:	ee16 3a90 	vmov	r3, s13
 8009d80:	eeb0 5b46 	vmov.f64	d5, d6
 8009d84:	f3c3 560a 	ubfx	r6, r3, #20, #11
 8009d88:	f46f 7272 	mvn.w	r2, #968	; 0x3c8
 8009d8c:	18b2      	adds	r2, r6, r2
 8009d8e:	2a3e      	cmp	r2, #62	; 0x3e
 8009d90:	ee91 5b04 	vfnms.f64	d5, d1, d4
 8009d94:	ee38 8b44 	vsub.f64	d8, d8, d4
 8009d98:	ee38 8b07 	vadd.f64	d8, d8, d7
 8009d9c:	eea1 5b08 	vfma.f64	d5, d1, d8
 8009da0:	d91b      	bls.n	8009dda <pow+0x30a>
 8009da2:	2a00      	cmp	r2, #0
 8009da4:	da0b      	bge.n	8009dbe <pow+0x2ee>
 8009da6:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 8009daa:	ee36 0b00 	vadd.f64	d0, d6, d0
 8009dae:	2800      	cmp	r0, #0
 8009db0:	f43f aef9 	beq.w	8009ba6 <pow+0xd6>
 8009db4:	eeb1 0b40 	vneg.f64	d0, d0
 8009db8:	e6f5      	b.n	8009ba6 <pow+0xd6>
 8009dba:	2000      	movs	r0, #0
 8009dbc:	e780      	b.n	8009cc0 <pow+0x1f0>
 8009dbe:	f5b6 6f81 	cmp.w	r6, #1032	; 0x408
 8009dc2:	d909      	bls.n	8009dd8 <pow+0x308>
 8009dc4:	2b00      	cmp	r3, #0
 8009dc6:	f6bf af65 	bge.w	8009c94 <pow+0x1c4>
 8009dca:	b007      	add	sp, #28
 8009dcc:	ecbd 8b0a 	vpop	{d8-d12}
 8009dd0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009dd4:	f000 b8ec 	b.w	8009fb0 <__math_uflow>
 8009dd8:	2600      	movs	r6, #0
 8009dda:	4937      	ldr	r1, [pc, #220]	; (8009eb8 <pow+0x3e8>)
 8009ddc:	ed91 4b02 	vldr	d4, [r1, #8]
 8009de0:	ed91 3b00 	vldr	d3, [r1]
 8009de4:	eeb0 7b44 	vmov.f64	d7, d4
 8009de8:	eea6 7b03 	vfma.f64	d7, d6, d3
 8009dec:	ee17 5a10 	vmov	r5, s14
 8009df0:	ee37 7b44 	vsub.f64	d7, d7, d4
 8009df4:	ed91 4b04 	vldr	d4, [r1, #16]
 8009df8:	f005 037f 	and.w	r3, r5, #127	; 0x7f
 8009dfc:	eea7 6b04 	vfma.f64	d6, d7, d4
 8009e00:	ed91 4b06 	vldr	d4, [r1, #24]
 8009e04:	18dc      	adds	r4, r3, r3
 8009e06:	f104 030f 	add.w	r3, r4, #15
 8009e0a:	eb01 04c4 	add.w	r4, r1, r4, lsl #3
 8009e0e:	eea7 6b04 	vfma.f64	d6, d7, d4
 8009e12:	ed91 3b0a 	vldr	d3, [r1, #40]	; 0x28
 8009e16:	ee35 5b06 	vadd.f64	d5, d5, d6
 8009e1a:	ee25 6b05 	vmul.f64	d6, d5, d5
 8009e1e:	ed94 7b1c 	vldr	d7, [r4, #112]	; 0x70
 8009e22:	ed91 4b08 	vldr	d4, [r1, #32]
 8009e26:	ee35 7b07 	vadd.f64	d7, d5, d7
 8009e2a:	eb01 02c3 	add.w	r2, r1, r3, lsl #3
 8009e2e:	eea5 4b03 	vfma.f64	d4, d5, d3
 8009e32:	ed91 3b0e 	vldr	d3, [r1, #56]	; 0x38
 8009e36:	eea6 7b04 	vfma.f64	d7, d6, d4
 8009e3a:	ee26 6b06 	vmul.f64	d6, d6, d6
 8009e3e:	ed91 4b0c 	vldr	d4, [r1, #48]	; 0x30
 8009e42:	f851 c033 	ldr.w	ip, [r1, r3, lsl #3]
 8009e46:	f8d2 e004 	ldr.w	lr, [r2, #4]
 8009e4a:	eea5 4b03 	vfma.f64	d4, d5, d3
 8009e4e:	1940      	adds	r0, r0, r5
 8009e50:	2700      	movs	r7, #0
 8009e52:	eb17 020c 	adds.w	r2, r7, ip
 8009e56:	eb0e 3340 	add.w	r3, lr, r0, lsl #13
 8009e5a:	eea6 7b04 	vfma.f64	d7, d6, d4
 8009e5e:	2e00      	cmp	r6, #0
 8009e60:	d176      	bne.n	8009f50 <pow+0x480>
 8009e62:	42bd      	cmp	r5, r7
 8009e64:	db2a      	blt.n	8009ebc <pow+0x3ec>
 8009e66:	f103 4140 	add.w	r1, r3, #3221225472	; 0xc0000000
 8009e6a:	f501 0170 	add.w	r1, r1, #15728640	; 0xf00000
 8009e6e:	4610      	mov	r0, r2
 8009e70:	ec41 0b10 	vmov	d0, r0, r1
 8009e74:	eea7 0b00 	vfma.f64	d0, d7, d0
 8009e78:	ed9f 7b07 	vldr	d7, [pc, #28]	; 8009e98 <pow+0x3c8>
 8009e7c:	ee20 0b07 	vmul.f64	d0, d0, d7
 8009e80:	b007      	add	sp, #28
 8009e82:	ecbd 8b0a 	vpop	{d8-d12}
 8009e86:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e8a:	f000 b8d1 	b.w	800a030 <__math_check_oflow>
 8009e8e:	bf00      	nop
 8009e90:	00000000 	.word	0x00000000
 8009e94:	43300000 	.word	0x43300000
 8009e98:	00000000 	.word	0x00000000
 8009e9c:	7f000000 	.word	0x7f000000
 8009ea0:	3ff00000 	.word	0x3ff00000
 8009ea4:	fff00000 	.word	0xfff00000
 8009ea8:	ffe00000 	.word	0xffe00000
 8009eac:	7fe00000 	.word	0x7fe00000
 8009eb0:	c0196aab 	.word	0xc0196aab
 8009eb4:	0802fe88 	.word	0x0802fe88
 8009eb8:	08030ed0 	.word	0x08030ed0
 8009ebc:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
 8009ec0:	f501 1100 	add.w	r1, r1, #2097152	; 0x200000
 8009ec4:	4610      	mov	r0, r2
 8009ec6:	ec41 0b15 	vmov	d5, r0, r1
 8009eca:	eeb7 3b00 	vmov.f64	d3, #112	; 0x3f800000  1.0
 8009ece:	ee27 6b05 	vmul.f64	d6, d7, d5
 8009ed2:	ee35 7b06 	vadd.f64	d7, d5, d6
 8009ed6:	eeb0 4bc7 	vabs.f64	d4, d7
 8009eda:	eeb4 4bc3 	vcmpe.f64	d4, d3
 8009ede:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009ee2:	ed9f 0b1f 	vldr	d0, [pc, #124]	; 8009f60 <pow+0x490>
 8009ee6:	d52a      	bpl.n	8009f3e <pow+0x46e>
 8009ee8:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8009eec:	ee35 5b47 	vsub.f64	d5, d5, d7
 8009ef0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009ef4:	ee35 5b06 	vadd.f64	d5, d5, d6
 8009ef8:	eebf 4b00 	vmov.f64	d4, #240	; 0xbf800000 -1.0
 8009efc:	bf58      	it	pl
 8009efe:	eeb0 4b43 	vmovpl.f64	d4, d3
 8009f02:	ee37 3b04 	vadd.f64	d3, d7, d4
 8009f06:	ee34 6b43 	vsub.f64	d6, d4, d3
 8009f0a:	ee36 6b07 	vadd.f64	d6, d6, d7
 8009f0e:	ee36 6b05 	vadd.f64	d6, d6, d5
 8009f12:	ee36 6b03 	vadd.f64	d6, d6, d3
 8009f16:	ee36 7b44 	vsub.f64	d7, d6, d4
 8009f1a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8009f1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009f22:	d104      	bne.n	8009f2e <pow+0x45e>
 8009f24:	4632      	mov	r2, r6
 8009f26:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 8009f2a:	ec43 2b17 	vmov	d7, r2, r3
 8009f2e:	ed8d 0b02 	vstr	d0, [sp, #8]
 8009f32:	ed9d 6b02 	vldr	d6, [sp, #8]
 8009f36:	ee26 6b00 	vmul.f64	d6, d6, d0
 8009f3a:	ed8d 6b04 	vstr	d6, [sp, #16]
 8009f3e:	ee27 0b00 	vmul.f64	d0, d7, d0
 8009f42:	b007      	add	sp, #28
 8009f44:	ecbd 8b0a 	vpop	{d8-d12}
 8009f48:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f4c:	f000 b867 	b.w	800a01e <__math_check_uflow>
 8009f50:	ec43 2b10 	vmov	d0, r2, r3
 8009f54:	eea7 0b00 	vfma.f64	d0, d7, d0
 8009f58:	e625      	b.n	8009ba6 <pow+0xd6>
 8009f5a:	ed9f 0b03 	vldr	d0, [pc, #12]	; 8009f68 <pow+0x498>
 8009f5e:	e622      	b.n	8009ba6 <pow+0xd6>
 8009f60:	00000000 	.word	0x00000000
 8009f64:	00100000 	.word	0x00100000
	...

08009f70 <__ieee754_sqrt>:
 8009f70:	eeb1 0bc0 	vsqrt.f64	d0, d0
 8009f74:	4770      	bx	lr

08009f76 <with_errno>:
 8009f76:	b513      	push	{r0, r1, r4, lr}
 8009f78:	4604      	mov	r4, r0
 8009f7a:	ed8d 0b00 	vstr	d0, [sp]
 8009f7e:	f7fd fd31 	bl	80079e4 <__errno>
 8009f82:	ed9d 0b00 	vldr	d0, [sp]
 8009f86:	6004      	str	r4, [r0, #0]
 8009f88:	b002      	add	sp, #8
 8009f8a:	bd10      	pop	{r4, pc}

08009f8c <xflow>:
 8009f8c:	b082      	sub	sp, #8
 8009f8e:	b158      	cbz	r0, 8009fa8 <xflow+0x1c>
 8009f90:	eeb1 7b40 	vneg.f64	d7, d0
 8009f94:	ed8d 7b00 	vstr	d7, [sp]
 8009f98:	ed9d 7b00 	vldr	d7, [sp]
 8009f9c:	2022      	movs	r0, #34	; 0x22
 8009f9e:	ee20 0b07 	vmul.f64	d0, d0, d7
 8009fa2:	b002      	add	sp, #8
 8009fa4:	f7ff bfe7 	b.w	8009f76 <with_errno>
 8009fa8:	eeb0 7b40 	vmov.f64	d7, d0
 8009fac:	e7f2      	b.n	8009f94 <xflow+0x8>
	...

08009fb0 <__math_uflow>:
 8009fb0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8009fb8 <__math_uflow+0x8>
 8009fb4:	f7ff bfea 	b.w	8009f8c <xflow>
 8009fb8:	00000000 	.word	0x00000000
 8009fbc:	10000000 	.word	0x10000000

08009fc0 <__math_oflow>:
 8009fc0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8009fc8 <__math_oflow+0x8>
 8009fc4:	f7ff bfe2 	b.w	8009f8c <xflow>
 8009fc8:	00000000 	.word	0x00000000
 8009fcc:	70000000 	.word	0x70000000

08009fd0 <__math_divzero>:
 8009fd0:	b082      	sub	sp, #8
 8009fd2:	2800      	cmp	r0, #0
 8009fd4:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8009fd8:	eebf 7b00 	vmov.f64	d7, #240	; 0xbf800000 -1.0
 8009fdc:	fe06 7b07 	vseleq.f64	d7, d6, d7
 8009fe0:	ed8d 7b00 	vstr	d7, [sp]
 8009fe4:	ed9d 0b00 	vldr	d0, [sp]
 8009fe8:	ed9f 7b03 	vldr	d7, [pc, #12]	; 8009ff8 <__math_divzero+0x28>
 8009fec:	2022      	movs	r0, #34	; 0x22
 8009fee:	ee80 0b07 	vdiv.f64	d0, d0, d7
 8009ff2:	b002      	add	sp, #8
 8009ff4:	f7ff bfbf 	b.w	8009f76 <with_errno>
	...

0800a000 <__math_invalid>:
 800a000:	eeb0 7b40 	vmov.f64	d7, d0
 800a004:	eeb4 7b47 	vcmp.f64	d7, d7
 800a008:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a00c:	ee30 6b40 	vsub.f64	d6, d0, d0
 800a010:	ee86 0b06 	vdiv.f64	d0, d6, d6
 800a014:	d602      	bvs.n	800a01c <__math_invalid+0x1c>
 800a016:	2021      	movs	r0, #33	; 0x21
 800a018:	f7ff bfad 	b.w	8009f76 <with_errno>
 800a01c:	4770      	bx	lr

0800a01e <__math_check_uflow>:
 800a01e:	eeb5 0b40 	vcmp.f64	d0, #0.0
 800a022:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a026:	d102      	bne.n	800a02e <__math_check_uflow+0x10>
 800a028:	2022      	movs	r0, #34	; 0x22
 800a02a:	f7ff bfa4 	b.w	8009f76 <with_errno>
 800a02e:	4770      	bx	lr

0800a030 <__math_check_oflow>:
 800a030:	ed9f 6b07 	vldr	d6, [pc, #28]	; 800a050 <__math_check_oflow+0x20>
 800a034:	eeb0 7bc0 	vabs.f64	d7, d0
 800a038:	eeb4 7b46 	vcmp.f64	d7, d6
 800a03c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a040:	dd02      	ble.n	800a048 <__math_check_oflow+0x18>
 800a042:	2022      	movs	r0, #34	; 0x22
 800a044:	f7ff bf97 	b.w	8009f76 <with_errno>
 800a048:	4770      	bx	lr
 800a04a:	bf00      	nop
 800a04c:	f3af 8000 	nop.w
 800a050:	ffffffff 	.word	0xffffffff
 800a054:	7fefffff 	.word	0x7fefffff

0800a058 <_init>:
 800a058:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a05a:	bf00      	nop
 800a05c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a05e:	bc08      	pop	{r3}
 800a060:	469e      	mov	lr, r3
 800a062:	4770      	bx	lr

0800a064 <_fini>:
 800a064:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a066:	bf00      	nop
 800a068:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a06a:	bc08      	pop	{r3}
 800a06c:	469e      	mov	lr, r3
 800a06e:	4770      	bx	lr
